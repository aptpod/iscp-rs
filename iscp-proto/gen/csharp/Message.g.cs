// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: iscp2/v1/message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iscp2.V1 {

  /// <summary>Holder for reflection information generated from iscp2/v1/message.proto</summary>
  internal static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for iscp2/v1/message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZpc2NwMi92MS9tZXNzYWdlLnByb3RvEghpc2NwMi52MRoZaXNjcDIvdjEv",
            "Y29ubmVjdGlvbi5wcm90bxoZaXNjcDIvdjEvZG93bnN0cmVhbS5wcm90bxoX",
            "aXNjcDIvdjEvZTJlX2NhbGwucHJvdG8aGGlzY3AyL3YxL3BpbmdfcG9uZy5w",
            "cm90bxoXaXNjcDIvdjEvdXBzdHJlYW0ucHJvdG8itxIKB01lc3NhZ2USQwoP",
            "Y29ubmVjdF9yZXF1ZXN0GAEgASgLMhguaXNjcDIudjEuQ29ubmVjdFJlcXVl",
            "c3RIAFIOY29ubmVjdFJlcXVlc3QSRgoQY29ubmVjdF9yZXNwb25zZRgCIAEo",
            "CzIZLmlzY3AyLnYxLkNvbm5lY3RSZXNwb25zZUgAUg9jb25uZWN0UmVzcG9u",
            "c2USNgoKZGlzY29ubmVjdBgDIAEoCzIULmlzY3AyLnYxLkRpc2Nvbm5lY3RI",
            "AFIKZGlzY29ubmVjdBJTChV1cHN0cmVhbV9vcGVuX3JlcXVlc3QYQCABKAsy",
            "HS5pc2NwMi52MS5VcHN0cmVhbU9wZW5SZXF1ZXN0SABSE3Vwc3RyZWFtT3Bl",
            "blJlcXVlc3QSVgoWdXBzdHJlYW1fb3Blbl9yZXNwb25zZRhBIAEoCzIeLmlz",
            "Y3AyLnYxLlVwc3RyZWFtT3BlblJlc3BvbnNlSABSFHVwc3RyZWFtT3BlblJl",
            "c3BvbnNlElkKF3Vwc3RyZWFtX3Jlc3VtZV9yZXF1ZXN0GEIgASgLMh8uaXNj",
            "cDIudjEuVXBzdHJlYW1SZXN1bWVSZXF1ZXN0SABSFXVwc3RyZWFtUmVzdW1l",
            "UmVxdWVzdBJcChh1cHN0cmVhbV9yZXN1bWVfcmVzcG9uc2UYQyABKAsyIC5p",
            "c2NwMi52MS5VcHN0cmVhbVJlc3VtZVJlc3BvbnNlSABSFnVwc3RyZWFtUmVz",
            "dW1lUmVzcG9uc2USVgoWdXBzdHJlYW1fY2xvc2VfcmVxdWVzdBhEIAEoCzIe",
            "LmlzY3AyLnYxLlVwc3RyZWFtQ2xvc2VSZXF1ZXN0SABSFHVwc3RyZWFtQ2xv",
            "c2VSZXF1ZXN0ElkKF3Vwc3RyZWFtX2Nsb3NlX3Jlc3BvbnNlGEUgASgLMh8u",
            "aXNjcDIudjEuVXBzdHJlYW1DbG9zZVJlc3BvbnNlSABSFXVwc3RyZWFtQ2xv",
            "c2VSZXNwb25zZRJACg51cHN0cmVhbV9jaHVuaxhGIAEoCzIXLmlzY3AyLnYx",
            "LlVwc3RyZWFtQ2h1bmtIAFINdXBzdHJlYW1DaHVuaxJKChJ1cHN0cmVhbV9j",
            "aHVua19hY2sYRyABKAsyGi5pc2NwMi52MS5VcHN0cmVhbUNodW5rQWNrSABS",
            "EHVwc3RyZWFtQ2h1bmtBY2sSSQoRdXBzdHJlYW1fbWV0YWRhdGEYSCABKAsy",
            "Gi5pc2NwMi52MS5VcHN0cmVhbU1ldGFkYXRhSABSEHVwc3RyZWFtTWV0YWRh",
            "dGESUwoVdXBzdHJlYW1fbWV0YWRhdGFfYWNrGEkgASgLMh0uaXNjcDIudjEu",
            "VXBzdHJlYW1NZXRhZGF0YUFja0gAUhN1cHN0cmVhbU1ldGFkYXRhQWNrEloK",
            "F2Rvd25zdHJlYW1fb3Blbl9yZXF1ZXN0GIABIAEoCzIfLmlzY3AyLnYxLkRv",
            "d25zdHJlYW1PcGVuUmVxdWVzdEgAUhVkb3duc3RyZWFtT3BlblJlcXVlc3QS",
            "XQoYZG93bnN0cmVhbV9vcGVuX3Jlc3BvbnNlGIEBIAEoCzIgLmlzY3AyLnYx",
            "LkRvd25zdHJlYW1PcGVuUmVzcG9uc2VIAFIWZG93bnN0cmVhbU9wZW5SZXNw",
            "b25zZRJgChlkb3duc3RyZWFtX3Jlc3VtZV9yZXF1ZXN0GIIBIAEoCzIhLmlz",
            "Y3AyLnYxLkRvd25zdHJlYW1SZXN1bWVSZXF1ZXN0SABSF2Rvd25zdHJlYW1S",
            "ZXN1bWVSZXF1ZXN0EmMKGmRvd25zdHJlYW1fcmVzdW1lX3Jlc3BvbnNlGIMB",
            "IAEoCzIiLmlzY3AyLnYxLkRvd25zdHJlYW1SZXN1bWVSZXNwb25zZUgAUhhk",
            "b3duc3RyZWFtUmVzdW1lUmVzcG9uc2USXQoYZG93bnN0cmVhbV9jbG9zZV9y",
            "ZXF1ZXN0GIQBIAEoCzIgLmlzY3AyLnYxLkRvd25zdHJlYW1DbG9zZVJlcXVl",
            "c3RIAFIWZG93bnN0cmVhbUNsb3NlUmVxdWVzdBJgChlkb3duc3RyZWFtX2Ns",
            "b3NlX3Jlc3BvbnNlGIUBIAEoCzIhLmlzY3AyLnYxLkRvd25zdHJlYW1DbG9z",
            "ZVJlc3BvbnNlSABSF2Rvd25zdHJlYW1DbG9zZVJlc3BvbnNlEkcKEGRvd25z",
            "dHJlYW1fY2h1bmsYhgEgASgLMhkuaXNjcDIudjEuRG93bnN0cmVhbUNodW5r",
            "SABSD2Rvd25zdHJlYW1DaHVuaxJRChRkb3duc3RyZWFtX2NodW5rX2FjaxiH",
            "ASABKAsyHC5pc2NwMi52MS5Eb3duc3RyZWFtQ2h1bmtBY2tIAFISZG93bnN0",
            "cmVhbUNodW5rQWNrEmoKHWRvd25zdHJlYW1fY2h1bmtfYWNrX2NvbXBsZXRl",
            "GIgBIAEoCzIkLmlzY3AyLnYxLkRvd25zdHJlYW1DaHVua0Fja0NvbXBsZXRl",
            "SABSGmRvd25zdHJlYW1DaHVua0Fja0NvbXBsZXRlElAKE2Rvd25zdHJlYW1f",
            "bWV0YWRhdGEYiQEgASgLMhwuaXNjcDIudjEuRG93bnN0cmVhbU1ldGFkYXRh",
            "SABSEmRvd25zdHJlYW1NZXRhZGF0YRJaChdkb3duc3RyZWFtX21ldGFkYXRh",
            "X2FjaxiKASABKAsyHy5pc2NwMi52MS5Eb3duc3RyZWFtTWV0YWRhdGFBY2tI",
            "AFIVZG93bnN0cmVhbU1ldGFkYXRhQWNrEiUKBHBpbmcYwAEgASgLMg4uaXNj",
            "cDIudjEuUGluZ0gAUgRwaW5nEiUKBHBvbmcYwQEgASgLMg4uaXNjcDIudjEu",
            "UG9uZ0gAUgRwb25nEj4KDXVwc3RyZWFtX2NhbGwYgAIgASgLMhYuaXNjcDIu",
            "djEuVXBzdHJlYW1DYWxsSABSDHVwc3RyZWFtQ2FsbBJIChF1cHN0cmVhbV9j",
            "YWxsX2FjaxiBAiABKAsyGS5pc2NwMi52MS5VcHN0cmVhbUNhbGxBY2tIAFIP",
            "dXBzdHJlYW1DYWxsQWNrEkQKD2Rvd25zdHJlYW1fY2FsbBiCAiABKAsyGC5p",
            "c2NwMi52MS5Eb3duc3RyZWFtQ2FsbEgAUg5kb3duc3RyZWFtQ2FsbEIJCgdt",
            "ZXNzYWdlQqcBCiBjb20uZ2l0aHViLmFwdHBvZC5wcm90by5pc2NwMi52MUIM",
            "TWVzc2FnZVByb3RvUAFaNGdpdGh1Yi5jb20vYXB0cG9kL2lzY3AtcHJvdG8v",
            "Z2VuL2dvL2lzY3AyL3YxO2lzY3AydjGiAgNJWFiqAghJc2NwMi5WMcoCCElz",
            "Y3AyXFYx4gIUSXNjcDJcVjFcR1BCTWV0YWRhdGHqAglJc2NwMjo6VjFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Iscp2.V1.ConnectionReflection.Descriptor, global::Iscp2.V1.DownstreamReflection.Descriptor, global::Iscp2.V1.E2ECallReflection.Descriptor, global::Iscp2.V1.PingPongReflection.Descriptor, global::Iscp2.V1.UpstreamReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iscp2.V1.Message), global::Iscp2.V1.Message.Parser, new[]{ "ConnectRequest", "ConnectResponse", "Disconnect", "UpstreamOpenRequest", "UpstreamOpenResponse", "UpstreamResumeRequest", "UpstreamResumeResponse", "UpstreamCloseRequest", "UpstreamCloseResponse", "UpstreamChunk", "UpstreamChunkAck", "UpstreamMetadata", "UpstreamMetadataAck", "DownstreamOpenRequest", "DownstreamOpenResponse", "DownstreamResumeRequest", "DownstreamResumeResponse", "DownstreamCloseRequest", "DownstreamCloseResponse", "DownstreamChunk", "DownstreamChunkAck", "DownstreamChunkAckComplete", "DownstreamMetadata", "DownstreamMetadataAck", "Ping", "Pong", "UpstreamCall", "UpstreamCallAck", "DownstreamCall" }, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class Message : pb::IMessage<Message>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iscp2.V1.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Message(Message other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.ConnectRequest:
          ConnectRequest = other.ConnectRequest.Clone();
          break;
        case MessageOneofCase.ConnectResponse:
          ConnectResponse = other.ConnectResponse.Clone();
          break;
        case MessageOneofCase.Disconnect:
          Disconnect = other.Disconnect.Clone();
          break;
        case MessageOneofCase.UpstreamOpenRequest:
          UpstreamOpenRequest = other.UpstreamOpenRequest.Clone();
          break;
        case MessageOneofCase.UpstreamOpenResponse:
          UpstreamOpenResponse = other.UpstreamOpenResponse.Clone();
          break;
        case MessageOneofCase.UpstreamResumeRequest:
          UpstreamResumeRequest = other.UpstreamResumeRequest.Clone();
          break;
        case MessageOneofCase.UpstreamResumeResponse:
          UpstreamResumeResponse = other.UpstreamResumeResponse.Clone();
          break;
        case MessageOneofCase.UpstreamCloseRequest:
          UpstreamCloseRequest = other.UpstreamCloseRequest.Clone();
          break;
        case MessageOneofCase.UpstreamCloseResponse:
          UpstreamCloseResponse = other.UpstreamCloseResponse.Clone();
          break;
        case MessageOneofCase.UpstreamChunk:
          UpstreamChunk = other.UpstreamChunk.Clone();
          break;
        case MessageOneofCase.UpstreamChunkAck:
          UpstreamChunkAck = other.UpstreamChunkAck.Clone();
          break;
        case MessageOneofCase.UpstreamMetadata:
          UpstreamMetadata = other.UpstreamMetadata.Clone();
          break;
        case MessageOneofCase.UpstreamMetadataAck:
          UpstreamMetadataAck = other.UpstreamMetadataAck.Clone();
          break;
        case MessageOneofCase.DownstreamOpenRequest:
          DownstreamOpenRequest = other.DownstreamOpenRequest.Clone();
          break;
        case MessageOneofCase.DownstreamOpenResponse:
          DownstreamOpenResponse = other.DownstreamOpenResponse.Clone();
          break;
        case MessageOneofCase.DownstreamResumeRequest:
          DownstreamResumeRequest = other.DownstreamResumeRequest.Clone();
          break;
        case MessageOneofCase.DownstreamResumeResponse:
          DownstreamResumeResponse = other.DownstreamResumeResponse.Clone();
          break;
        case MessageOneofCase.DownstreamCloseRequest:
          DownstreamCloseRequest = other.DownstreamCloseRequest.Clone();
          break;
        case MessageOneofCase.DownstreamCloseResponse:
          DownstreamCloseResponse = other.DownstreamCloseResponse.Clone();
          break;
        case MessageOneofCase.DownstreamChunk:
          DownstreamChunk = other.DownstreamChunk.Clone();
          break;
        case MessageOneofCase.DownstreamChunkAck:
          DownstreamChunkAck = other.DownstreamChunkAck.Clone();
          break;
        case MessageOneofCase.DownstreamChunkAckComplete:
          DownstreamChunkAckComplete = other.DownstreamChunkAckComplete.Clone();
          break;
        case MessageOneofCase.DownstreamMetadata:
          DownstreamMetadata = other.DownstreamMetadata.Clone();
          break;
        case MessageOneofCase.DownstreamMetadataAck:
          DownstreamMetadataAck = other.DownstreamMetadataAck.Clone();
          break;
        case MessageOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case MessageOneofCase.Pong:
          Pong = other.Pong.Clone();
          break;
        case MessageOneofCase.UpstreamCall:
          UpstreamCall = other.UpstreamCall.Clone();
          break;
        case MessageOneofCase.UpstreamCallAck:
          UpstreamCallAck = other.UpstreamCallAck.Clone();
          break;
        case MessageOneofCase.DownstreamCall:
          DownstreamCall = other.DownstreamCall.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "connect_request" field.</summary>
    public const int ConnectRequestFieldNumber = 1;
    /// <summary>
    /// Connect
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.ConnectRequest ConnectRequest {
      get { return messageCase_ == MessageOneofCase.ConnectRequest ? (global::Iscp2.V1.ConnectRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ConnectRequest;
      }
    }

    /// <summary>Field number for the "connect_response" field.</summary>
    public const int ConnectResponseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.ConnectResponse ConnectResponse {
      get { return messageCase_ == MessageOneofCase.ConnectResponse ? (global::Iscp2.V1.ConnectResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ConnectResponse;
      }
    }

    /// <summary>Field number for the "disconnect" field.</summary>
    public const int DisconnectFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.Disconnect Disconnect {
      get { return messageCase_ == MessageOneofCase.Disconnect ? (global::Iscp2.V1.Disconnect) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Disconnect;
      }
    }

    /// <summary>Field number for the "upstream_open_request" field.</summary>
    public const int UpstreamOpenRequestFieldNumber = 64;
    /// <summary>
    /// Upstream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamOpenRequest UpstreamOpenRequest {
      get { return messageCase_ == MessageOneofCase.UpstreamOpenRequest ? (global::Iscp2.V1.UpstreamOpenRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamOpenRequest;
      }
    }

    /// <summary>Field number for the "upstream_open_response" field.</summary>
    public const int UpstreamOpenResponseFieldNumber = 65;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamOpenResponse UpstreamOpenResponse {
      get { return messageCase_ == MessageOneofCase.UpstreamOpenResponse ? (global::Iscp2.V1.UpstreamOpenResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamOpenResponse;
      }
    }

    /// <summary>Field number for the "upstream_resume_request" field.</summary>
    public const int UpstreamResumeRequestFieldNumber = 66;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamResumeRequest UpstreamResumeRequest {
      get { return messageCase_ == MessageOneofCase.UpstreamResumeRequest ? (global::Iscp2.V1.UpstreamResumeRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamResumeRequest;
      }
    }

    /// <summary>Field number for the "upstream_resume_response" field.</summary>
    public const int UpstreamResumeResponseFieldNumber = 67;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamResumeResponse UpstreamResumeResponse {
      get { return messageCase_ == MessageOneofCase.UpstreamResumeResponse ? (global::Iscp2.V1.UpstreamResumeResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamResumeResponse;
      }
    }

    /// <summary>Field number for the "upstream_close_request" field.</summary>
    public const int UpstreamCloseRequestFieldNumber = 68;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamCloseRequest UpstreamCloseRequest {
      get { return messageCase_ == MessageOneofCase.UpstreamCloseRequest ? (global::Iscp2.V1.UpstreamCloseRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamCloseRequest;
      }
    }

    /// <summary>Field number for the "upstream_close_response" field.</summary>
    public const int UpstreamCloseResponseFieldNumber = 69;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamCloseResponse UpstreamCloseResponse {
      get { return messageCase_ == MessageOneofCase.UpstreamCloseResponse ? (global::Iscp2.V1.UpstreamCloseResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamCloseResponse;
      }
    }

    /// <summary>Field number for the "upstream_chunk" field.</summary>
    public const int UpstreamChunkFieldNumber = 70;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamChunk UpstreamChunk {
      get { return messageCase_ == MessageOneofCase.UpstreamChunk ? (global::Iscp2.V1.UpstreamChunk) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamChunk;
      }
    }

    /// <summary>Field number for the "upstream_chunk_ack" field.</summary>
    public const int UpstreamChunkAckFieldNumber = 71;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamChunkAck UpstreamChunkAck {
      get { return messageCase_ == MessageOneofCase.UpstreamChunkAck ? (global::Iscp2.V1.UpstreamChunkAck) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamChunkAck;
      }
    }

    /// <summary>Field number for the "upstream_metadata" field.</summary>
    public const int UpstreamMetadataFieldNumber = 72;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamMetadata UpstreamMetadata {
      get { return messageCase_ == MessageOneofCase.UpstreamMetadata ? (global::Iscp2.V1.UpstreamMetadata) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamMetadata;
      }
    }

    /// <summary>Field number for the "upstream_metadata_ack" field.</summary>
    public const int UpstreamMetadataAckFieldNumber = 73;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamMetadataAck UpstreamMetadataAck {
      get { return messageCase_ == MessageOneofCase.UpstreamMetadataAck ? (global::Iscp2.V1.UpstreamMetadataAck) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamMetadataAck;
      }
    }

    /// <summary>Field number for the "downstream_open_request" field.</summary>
    public const int DownstreamOpenRequestFieldNumber = 128;
    /// <summary>
    /// Downstream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamOpenRequest DownstreamOpenRequest {
      get { return messageCase_ == MessageOneofCase.DownstreamOpenRequest ? (global::Iscp2.V1.DownstreamOpenRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamOpenRequest;
      }
    }

    /// <summary>Field number for the "downstream_open_response" field.</summary>
    public const int DownstreamOpenResponseFieldNumber = 129;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamOpenResponse DownstreamOpenResponse {
      get { return messageCase_ == MessageOneofCase.DownstreamOpenResponse ? (global::Iscp2.V1.DownstreamOpenResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamOpenResponse;
      }
    }

    /// <summary>Field number for the "downstream_resume_request" field.</summary>
    public const int DownstreamResumeRequestFieldNumber = 130;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamResumeRequest DownstreamResumeRequest {
      get { return messageCase_ == MessageOneofCase.DownstreamResumeRequest ? (global::Iscp2.V1.DownstreamResumeRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamResumeRequest;
      }
    }

    /// <summary>Field number for the "downstream_resume_response" field.</summary>
    public const int DownstreamResumeResponseFieldNumber = 131;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamResumeResponse DownstreamResumeResponse {
      get { return messageCase_ == MessageOneofCase.DownstreamResumeResponse ? (global::Iscp2.V1.DownstreamResumeResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamResumeResponse;
      }
    }

    /// <summary>Field number for the "downstream_close_request" field.</summary>
    public const int DownstreamCloseRequestFieldNumber = 132;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamCloseRequest DownstreamCloseRequest {
      get { return messageCase_ == MessageOneofCase.DownstreamCloseRequest ? (global::Iscp2.V1.DownstreamCloseRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamCloseRequest;
      }
    }

    /// <summary>Field number for the "downstream_close_response" field.</summary>
    public const int DownstreamCloseResponseFieldNumber = 133;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamCloseResponse DownstreamCloseResponse {
      get { return messageCase_ == MessageOneofCase.DownstreamCloseResponse ? (global::Iscp2.V1.DownstreamCloseResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamCloseResponse;
      }
    }

    /// <summary>Field number for the "downstream_chunk" field.</summary>
    public const int DownstreamChunkFieldNumber = 134;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamChunk DownstreamChunk {
      get { return messageCase_ == MessageOneofCase.DownstreamChunk ? (global::Iscp2.V1.DownstreamChunk) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamChunk;
      }
    }

    /// <summary>Field number for the "downstream_chunk_ack" field.</summary>
    public const int DownstreamChunkAckFieldNumber = 135;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamChunkAck DownstreamChunkAck {
      get { return messageCase_ == MessageOneofCase.DownstreamChunkAck ? (global::Iscp2.V1.DownstreamChunkAck) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamChunkAck;
      }
    }

    /// <summary>Field number for the "downstream_chunk_ack_complete" field.</summary>
    public const int DownstreamChunkAckCompleteFieldNumber = 136;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamChunkAckComplete DownstreamChunkAckComplete {
      get { return messageCase_ == MessageOneofCase.DownstreamChunkAckComplete ? (global::Iscp2.V1.DownstreamChunkAckComplete) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamChunkAckComplete;
      }
    }

    /// <summary>Field number for the "downstream_metadata" field.</summary>
    public const int DownstreamMetadataFieldNumber = 137;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamMetadata DownstreamMetadata {
      get { return messageCase_ == MessageOneofCase.DownstreamMetadata ? (global::Iscp2.V1.DownstreamMetadata) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamMetadata;
      }
    }

    /// <summary>Field number for the "downstream_metadata_ack" field.</summary>
    public const int DownstreamMetadataAckFieldNumber = 138;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamMetadataAck DownstreamMetadataAck {
      get { return messageCase_ == MessageOneofCase.DownstreamMetadataAck ? (global::Iscp2.V1.DownstreamMetadataAck) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamMetadataAck;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 192;
    /// <summary>
    /// Ping/Pong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.Ping Ping {
      get { return messageCase_ == MessageOneofCase.Ping ? (global::Iscp2.V1.Ping) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "pong" field.</summary>
    public const int PongFieldNumber = 193;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.Pong Pong {
      get { return messageCase_ == MessageOneofCase.Pong ? (global::Iscp2.V1.Pong) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pong;
      }
    }

    /// <summary>Field number for the "upstream_call" field.</summary>
    public const int UpstreamCallFieldNumber = 256;
    /// <summary>
    /// E2E Call
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamCall UpstreamCall {
      get { return messageCase_ == MessageOneofCase.UpstreamCall ? (global::Iscp2.V1.UpstreamCall) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamCall;
      }
    }

    /// <summary>Field number for the "upstream_call_ack" field.</summary>
    public const int UpstreamCallAckFieldNumber = 257;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.UpstreamCallAck UpstreamCallAck {
      get { return messageCase_ == MessageOneofCase.UpstreamCallAck ? (global::Iscp2.V1.UpstreamCallAck) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpstreamCallAck;
      }
    }

    /// <summary>Field number for the "downstream_call" field.</summary>
    public const int DownstreamCallFieldNumber = 258;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Iscp2.V1.DownstreamCall DownstreamCall {
      get { return messageCase_ == MessageOneofCase.DownstreamCall ? (global::Iscp2.V1.DownstreamCall) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DownstreamCall;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      ConnectRequest = 1,
      ConnectResponse = 2,
      Disconnect = 3,
      UpstreamOpenRequest = 64,
      UpstreamOpenResponse = 65,
      UpstreamResumeRequest = 66,
      UpstreamResumeResponse = 67,
      UpstreamCloseRequest = 68,
      UpstreamCloseResponse = 69,
      UpstreamChunk = 70,
      UpstreamChunkAck = 71,
      UpstreamMetadata = 72,
      UpstreamMetadataAck = 73,
      DownstreamOpenRequest = 128,
      DownstreamOpenResponse = 129,
      DownstreamResumeRequest = 130,
      DownstreamResumeResponse = 131,
      DownstreamCloseRequest = 132,
      DownstreamCloseResponse = 133,
      DownstreamChunk = 134,
      DownstreamChunkAck = 135,
      DownstreamChunkAckComplete = 136,
      DownstreamMetadata = 137,
      DownstreamMetadataAck = 138,
      Ping = 192,
      Pong = 193,
      UpstreamCall = 256,
      UpstreamCallAck = 257,
      DownstreamCall = 258,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConnectRequest, other.ConnectRequest)) return false;
      if (!object.Equals(ConnectResponse, other.ConnectResponse)) return false;
      if (!object.Equals(Disconnect, other.Disconnect)) return false;
      if (!object.Equals(UpstreamOpenRequest, other.UpstreamOpenRequest)) return false;
      if (!object.Equals(UpstreamOpenResponse, other.UpstreamOpenResponse)) return false;
      if (!object.Equals(UpstreamResumeRequest, other.UpstreamResumeRequest)) return false;
      if (!object.Equals(UpstreamResumeResponse, other.UpstreamResumeResponse)) return false;
      if (!object.Equals(UpstreamCloseRequest, other.UpstreamCloseRequest)) return false;
      if (!object.Equals(UpstreamCloseResponse, other.UpstreamCloseResponse)) return false;
      if (!object.Equals(UpstreamChunk, other.UpstreamChunk)) return false;
      if (!object.Equals(UpstreamChunkAck, other.UpstreamChunkAck)) return false;
      if (!object.Equals(UpstreamMetadata, other.UpstreamMetadata)) return false;
      if (!object.Equals(UpstreamMetadataAck, other.UpstreamMetadataAck)) return false;
      if (!object.Equals(DownstreamOpenRequest, other.DownstreamOpenRequest)) return false;
      if (!object.Equals(DownstreamOpenResponse, other.DownstreamOpenResponse)) return false;
      if (!object.Equals(DownstreamResumeRequest, other.DownstreamResumeRequest)) return false;
      if (!object.Equals(DownstreamResumeResponse, other.DownstreamResumeResponse)) return false;
      if (!object.Equals(DownstreamCloseRequest, other.DownstreamCloseRequest)) return false;
      if (!object.Equals(DownstreamCloseResponse, other.DownstreamCloseResponse)) return false;
      if (!object.Equals(DownstreamChunk, other.DownstreamChunk)) return false;
      if (!object.Equals(DownstreamChunkAck, other.DownstreamChunkAck)) return false;
      if (!object.Equals(DownstreamChunkAckComplete, other.DownstreamChunkAckComplete)) return false;
      if (!object.Equals(DownstreamMetadata, other.DownstreamMetadata)) return false;
      if (!object.Equals(DownstreamMetadataAck, other.DownstreamMetadataAck)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Pong, other.Pong)) return false;
      if (!object.Equals(UpstreamCall, other.UpstreamCall)) return false;
      if (!object.Equals(UpstreamCallAck, other.UpstreamCallAck)) return false;
      if (!object.Equals(DownstreamCall, other.DownstreamCall)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.ConnectRequest) hash ^= ConnectRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.ConnectResponse) hash ^= ConnectResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamOpenRequest) hash ^= UpstreamOpenRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamOpenResponse) hash ^= UpstreamOpenResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamResumeRequest) hash ^= UpstreamResumeRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamResumeResponse) hash ^= UpstreamResumeResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamCloseRequest) hash ^= UpstreamCloseRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamCloseResponse) hash ^= UpstreamCloseResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamChunk) hash ^= UpstreamChunk.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamChunkAck) hash ^= UpstreamChunkAck.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamMetadata) hash ^= UpstreamMetadata.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamMetadataAck) hash ^= UpstreamMetadataAck.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamOpenRequest) hash ^= DownstreamOpenRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamOpenResponse) hash ^= DownstreamOpenResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamResumeRequest) hash ^= DownstreamResumeRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamResumeResponse) hash ^= DownstreamResumeResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamCloseRequest) hash ^= DownstreamCloseRequest.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamCloseResponse) hash ^= DownstreamCloseResponse.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamChunk) hash ^= DownstreamChunk.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamChunkAck) hash ^= DownstreamChunkAck.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamChunkAckComplete) hash ^= DownstreamChunkAckComplete.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamMetadata) hash ^= DownstreamMetadata.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamMetadataAck) hash ^= DownstreamMetadataAck.GetHashCode();
      if (messageCase_ == MessageOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pong) hash ^= Pong.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamCall) hash ^= UpstreamCall.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpstreamCallAck) hash ^= UpstreamCallAck.GetHashCode();
      if (messageCase_ == MessageOneofCase.DownstreamCall) hash ^= DownstreamCall.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (messageCase_ == MessageOneofCase.ConnectRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnectRequest);
      }
      if (messageCase_ == MessageOneofCase.ConnectResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectResponse);
      }
      if (messageCase_ == MessageOneofCase.Disconnect) {
        output.WriteRawTag(26);
        output.WriteMessage(Disconnect);
      }
      if (messageCase_ == MessageOneofCase.UpstreamOpenRequest) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(UpstreamOpenRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamOpenResponse) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(UpstreamOpenResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamResumeRequest) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(UpstreamResumeRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamResumeResponse) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(UpstreamResumeResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCloseRequest) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(UpstreamCloseRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCloseResponse) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(UpstreamCloseResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamChunk) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(UpstreamChunk);
      }
      if (messageCase_ == MessageOneofCase.UpstreamChunkAck) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(UpstreamChunkAck);
      }
      if (messageCase_ == MessageOneofCase.UpstreamMetadata) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(UpstreamMetadata);
      }
      if (messageCase_ == MessageOneofCase.UpstreamMetadataAck) {
        output.WriteRawTag(202, 4);
        output.WriteMessage(UpstreamMetadataAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamOpenRequest) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(DownstreamOpenRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamOpenResponse) {
        output.WriteRawTag(138, 8);
        output.WriteMessage(DownstreamOpenResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamResumeRequest) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(DownstreamResumeRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamResumeResponse) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(DownstreamResumeResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCloseRequest) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(DownstreamCloseRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCloseResponse) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(DownstreamCloseResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunk) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(DownstreamChunk);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunkAck) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(DownstreamChunkAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunkAckComplete) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(DownstreamChunkAckComplete);
      }
      if (messageCase_ == MessageOneofCase.DownstreamMetadata) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(DownstreamMetadata);
      }
      if (messageCase_ == MessageOneofCase.DownstreamMetadataAck) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(DownstreamMetadataAck);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        output.WriteRawTag(130, 12);
        output.WriteMessage(Ping);
      }
      if (messageCase_ == MessageOneofCase.Pong) {
        output.WriteRawTag(138, 12);
        output.WriteMessage(Pong);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCall) {
        output.WriteRawTag(130, 16);
        output.WriteMessage(UpstreamCall);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCallAck) {
        output.WriteRawTag(138, 16);
        output.WriteMessage(UpstreamCallAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCall) {
        output.WriteRawTag(146, 16);
        output.WriteMessage(DownstreamCall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (messageCase_ == MessageOneofCase.ConnectRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnectRequest);
      }
      if (messageCase_ == MessageOneofCase.ConnectResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(ConnectResponse);
      }
      if (messageCase_ == MessageOneofCase.Disconnect) {
        output.WriteRawTag(26);
        output.WriteMessage(Disconnect);
      }
      if (messageCase_ == MessageOneofCase.UpstreamOpenRequest) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(UpstreamOpenRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamOpenResponse) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(UpstreamOpenResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamResumeRequest) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(UpstreamResumeRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamResumeResponse) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(UpstreamResumeResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCloseRequest) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(UpstreamCloseRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCloseResponse) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(UpstreamCloseResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamChunk) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(UpstreamChunk);
      }
      if (messageCase_ == MessageOneofCase.UpstreamChunkAck) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(UpstreamChunkAck);
      }
      if (messageCase_ == MessageOneofCase.UpstreamMetadata) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(UpstreamMetadata);
      }
      if (messageCase_ == MessageOneofCase.UpstreamMetadataAck) {
        output.WriteRawTag(202, 4);
        output.WriteMessage(UpstreamMetadataAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamOpenRequest) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(DownstreamOpenRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamOpenResponse) {
        output.WriteRawTag(138, 8);
        output.WriteMessage(DownstreamOpenResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamResumeRequest) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(DownstreamResumeRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamResumeResponse) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(DownstreamResumeResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCloseRequest) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(DownstreamCloseRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCloseResponse) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(DownstreamCloseResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunk) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(DownstreamChunk);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunkAck) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(DownstreamChunkAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunkAckComplete) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(DownstreamChunkAckComplete);
      }
      if (messageCase_ == MessageOneofCase.DownstreamMetadata) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(DownstreamMetadata);
      }
      if (messageCase_ == MessageOneofCase.DownstreamMetadataAck) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(DownstreamMetadataAck);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        output.WriteRawTag(130, 12);
        output.WriteMessage(Ping);
      }
      if (messageCase_ == MessageOneofCase.Pong) {
        output.WriteRawTag(138, 12);
        output.WriteMessage(Pong);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCall) {
        output.WriteRawTag(130, 16);
        output.WriteMessage(UpstreamCall);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCallAck) {
        output.WriteRawTag(138, 16);
        output.WriteMessage(UpstreamCallAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCall) {
        output.WriteRawTag(146, 16);
        output.WriteMessage(DownstreamCall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.ConnectRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectRequest);
      }
      if (messageCase_ == MessageOneofCase.ConnectResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectResponse);
      }
      if (messageCase_ == MessageOneofCase.Disconnect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disconnect);
      }
      if (messageCase_ == MessageOneofCase.UpstreamOpenRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamOpenRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamOpenResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamOpenResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamResumeRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamResumeRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamResumeResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamResumeResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCloseRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamCloseRequest);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCloseResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamCloseResponse);
      }
      if (messageCase_ == MessageOneofCase.UpstreamChunk) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamChunk);
      }
      if (messageCase_ == MessageOneofCase.UpstreamChunkAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamChunkAck);
      }
      if (messageCase_ == MessageOneofCase.UpstreamMetadata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamMetadata);
      }
      if (messageCase_ == MessageOneofCase.UpstreamMetadataAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamMetadataAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamOpenRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamOpenRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamOpenResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamOpenResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamResumeRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamResumeRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamResumeResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamResumeResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCloseRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamCloseRequest);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCloseResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamCloseResponse);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunk) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamChunk);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunkAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamChunkAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamChunkAckComplete) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamChunkAckComplete);
      }
      if (messageCase_ == MessageOneofCase.DownstreamMetadata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamMetadata);
      }
      if (messageCase_ == MessageOneofCase.DownstreamMetadataAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamMetadataAck);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (messageCase_ == MessageOneofCase.Pong) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pong);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCall) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamCall);
      }
      if (messageCase_ == MessageOneofCase.UpstreamCallAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpstreamCallAck);
      }
      if (messageCase_ == MessageOneofCase.DownstreamCall) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DownstreamCall);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.ConnectRequest:
          if (ConnectRequest == null) {
            ConnectRequest = new global::Iscp2.V1.ConnectRequest();
          }
          ConnectRequest.MergeFrom(other.ConnectRequest);
          break;
        case MessageOneofCase.ConnectResponse:
          if (ConnectResponse == null) {
            ConnectResponse = new global::Iscp2.V1.ConnectResponse();
          }
          ConnectResponse.MergeFrom(other.ConnectResponse);
          break;
        case MessageOneofCase.Disconnect:
          if (Disconnect == null) {
            Disconnect = new global::Iscp2.V1.Disconnect();
          }
          Disconnect.MergeFrom(other.Disconnect);
          break;
        case MessageOneofCase.UpstreamOpenRequest:
          if (UpstreamOpenRequest == null) {
            UpstreamOpenRequest = new global::Iscp2.V1.UpstreamOpenRequest();
          }
          UpstreamOpenRequest.MergeFrom(other.UpstreamOpenRequest);
          break;
        case MessageOneofCase.UpstreamOpenResponse:
          if (UpstreamOpenResponse == null) {
            UpstreamOpenResponse = new global::Iscp2.V1.UpstreamOpenResponse();
          }
          UpstreamOpenResponse.MergeFrom(other.UpstreamOpenResponse);
          break;
        case MessageOneofCase.UpstreamResumeRequest:
          if (UpstreamResumeRequest == null) {
            UpstreamResumeRequest = new global::Iscp2.V1.UpstreamResumeRequest();
          }
          UpstreamResumeRequest.MergeFrom(other.UpstreamResumeRequest);
          break;
        case MessageOneofCase.UpstreamResumeResponse:
          if (UpstreamResumeResponse == null) {
            UpstreamResumeResponse = new global::Iscp2.V1.UpstreamResumeResponse();
          }
          UpstreamResumeResponse.MergeFrom(other.UpstreamResumeResponse);
          break;
        case MessageOneofCase.UpstreamCloseRequest:
          if (UpstreamCloseRequest == null) {
            UpstreamCloseRequest = new global::Iscp2.V1.UpstreamCloseRequest();
          }
          UpstreamCloseRequest.MergeFrom(other.UpstreamCloseRequest);
          break;
        case MessageOneofCase.UpstreamCloseResponse:
          if (UpstreamCloseResponse == null) {
            UpstreamCloseResponse = new global::Iscp2.V1.UpstreamCloseResponse();
          }
          UpstreamCloseResponse.MergeFrom(other.UpstreamCloseResponse);
          break;
        case MessageOneofCase.UpstreamChunk:
          if (UpstreamChunk == null) {
            UpstreamChunk = new global::Iscp2.V1.UpstreamChunk();
          }
          UpstreamChunk.MergeFrom(other.UpstreamChunk);
          break;
        case MessageOneofCase.UpstreamChunkAck:
          if (UpstreamChunkAck == null) {
            UpstreamChunkAck = new global::Iscp2.V1.UpstreamChunkAck();
          }
          UpstreamChunkAck.MergeFrom(other.UpstreamChunkAck);
          break;
        case MessageOneofCase.UpstreamMetadata:
          if (UpstreamMetadata == null) {
            UpstreamMetadata = new global::Iscp2.V1.UpstreamMetadata();
          }
          UpstreamMetadata.MergeFrom(other.UpstreamMetadata);
          break;
        case MessageOneofCase.UpstreamMetadataAck:
          if (UpstreamMetadataAck == null) {
            UpstreamMetadataAck = new global::Iscp2.V1.UpstreamMetadataAck();
          }
          UpstreamMetadataAck.MergeFrom(other.UpstreamMetadataAck);
          break;
        case MessageOneofCase.DownstreamOpenRequest:
          if (DownstreamOpenRequest == null) {
            DownstreamOpenRequest = new global::Iscp2.V1.DownstreamOpenRequest();
          }
          DownstreamOpenRequest.MergeFrom(other.DownstreamOpenRequest);
          break;
        case MessageOneofCase.DownstreamOpenResponse:
          if (DownstreamOpenResponse == null) {
            DownstreamOpenResponse = new global::Iscp2.V1.DownstreamOpenResponse();
          }
          DownstreamOpenResponse.MergeFrom(other.DownstreamOpenResponse);
          break;
        case MessageOneofCase.DownstreamResumeRequest:
          if (DownstreamResumeRequest == null) {
            DownstreamResumeRequest = new global::Iscp2.V1.DownstreamResumeRequest();
          }
          DownstreamResumeRequest.MergeFrom(other.DownstreamResumeRequest);
          break;
        case MessageOneofCase.DownstreamResumeResponse:
          if (DownstreamResumeResponse == null) {
            DownstreamResumeResponse = new global::Iscp2.V1.DownstreamResumeResponse();
          }
          DownstreamResumeResponse.MergeFrom(other.DownstreamResumeResponse);
          break;
        case MessageOneofCase.DownstreamCloseRequest:
          if (DownstreamCloseRequest == null) {
            DownstreamCloseRequest = new global::Iscp2.V1.DownstreamCloseRequest();
          }
          DownstreamCloseRequest.MergeFrom(other.DownstreamCloseRequest);
          break;
        case MessageOneofCase.DownstreamCloseResponse:
          if (DownstreamCloseResponse == null) {
            DownstreamCloseResponse = new global::Iscp2.V1.DownstreamCloseResponse();
          }
          DownstreamCloseResponse.MergeFrom(other.DownstreamCloseResponse);
          break;
        case MessageOneofCase.DownstreamChunk:
          if (DownstreamChunk == null) {
            DownstreamChunk = new global::Iscp2.V1.DownstreamChunk();
          }
          DownstreamChunk.MergeFrom(other.DownstreamChunk);
          break;
        case MessageOneofCase.DownstreamChunkAck:
          if (DownstreamChunkAck == null) {
            DownstreamChunkAck = new global::Iscp2.V1.DownstreamChunkAck();
          }
          DownstreamChunkAck.MergeFrom(other.DownstreamChunkAck);
          break;
        case MessageOneofCase.DownstreamChunkAckComplete:
          if (DownstreamChunkAckComplete == null) {
            DownstreamChunkAckComplete = new global::Iscp2.V1.DownstreamChunkAckComplete();
          }
          DownstreamChunkAckComplete.MergeFrom(other.DownstreamChunkAckComplete);
          break;
        case MessageOneofCase.DownstreamMetadata:
          if (DownstreamMetadata == null) {
            DownstreamMetadata = new global::Iscp2.V1.DownstreamMetadata();
          }
          DownstreamMetadata.MergeFrom(other.DownstreamMetadata);
          break;
        case MessageOneofCase.DownstreamMetadataAck:
          if (DownstreamMetadataAck == null) {
            DownstreamMetadataAck = new global::Iscp2.V1.DownstreamMetadataAck();
          }
          DownstreamMetadataAck.MergeFrom(other.DownstreamMetadataAck);
          break;
        case MessageOneofCase.Ping:
          if (Ping == null) {
            Ping = new global::Iscp2.V1.Ping();
          }
          Ping.MergeFrom(other.Ping);
          break;
        case MessageOneofCase.Pong:
          if (Pong == null) {
            Pong = new global::Iscp2.V1.Pong();
          }
          Pong.MergeFrom(other.Pong);
          break;
        case MessageOneofCase.UpstreamCall:
          if (UpstreamCall == null) {
            UpstreamCall = new global::Iscp2.V1.UpstreamCall();
          }
          UpstreamCall.MergeFrom(other.UpstreamCall);
          break;
        case MessageOneofCase.UpstreamCallAck:
          if (UpstreamCallAck == null) {
            UpstreamCallAck = new global::Iscp2.V1.UpstreamCallAck();
          }
          UpstreamCallAck.MergeFrom(other.UpstreamCallAck);
          break;
        case MessageOneofCase.DownstreamCall:
          if (DownstreamCall == null) {
            DownstreamCall = new global::Iscp2.V1.DownstreamCall();
          }
          DownstreamCall.MergeFrom(other.DownstreamCall);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Iscp2.V1.ConnectRequest subBuilder = new global::Iscp2.V1.ConnectRequest();
            if (messageCase_ == MessageOneofCase.ConnectRequest) {
              subBuilder.MergeFrom(ConnectRequest);
            }
            input.ReadMessage(subBuilder);
            ConnectRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iscp2.V1.ConnectResponse subBuilder = new global::Iscp2.V1.ConnectResponse();
            if (messageCase_ == MessageOneofCase.ConnectResponse) {
              subBuilder.MergeFrom(ConnectResponse);
            }
            input.ReadMessage(subBuilder);
            ConnectResponse = subBuilder;
            break;
          }
          case 26: {
            global::Iscp2.V1.Disconnect subBuilder = new global::Iscp2.V1.Disconnect();
            if (messageCase_ == MessageOneofCase.Disconnect) {
              subBuilder.MergeFrom(Disconnect);
            }
            input.ReadMessage(subBuilder);
            Disconnect = subBuilder;
            break;
          }
          case 514: {
            global::Iscp2.V1.UpstreamOpenRequest subBuilder = new global::Iscp2.V1.UpstreamOpenRequest();
            if (messageCase_ == MessageOneofCase.UpstreamOpenRequest) {
              subBuilder.MergeFrom(UpstreamOpenRequest);
            }
            input.ReadMessage(subBuilder);
            UpstreamOpenRequest = subBuilder;
            break;
          }
          case 522: {
            global::Iscp2.V1.UpstreamOpenResponse subBuilder = new global::Iscp2.V1.UpstreamOpenResponse();
            if (messageCase_ == MessageOneofCase.UpstreamOpenResponse) {
              subBuilder.MergeFrom(UpstreamOpenResponse);
            }
            input.ReadMessage(subBuilder);
            UpstreamOpenResponse = subBuilder;
            break;
          }
          case 530: {
            global::Iscp2.V1.UpstreamResumeRequest subBuilder = new global::Iscp2.V1.UpstreamResumeRequest();
            if (messageCase_ == MessageOneofCase.UpstreamResumeRequest) {
              subBuilder.MergeFrom(UpstreamResumeRequest);
            }
            input.ReadMessage(subBuilder);
            UpstreamResumeRequest = subBuilder;
            break;
          }
          case 538: {
            global::Iscp2.V1.UpstreamResumeResponse subBuilder = new global::Iscp2.V1.UpstreamResumeResponse();
            if (messageCase_ == MessageOneofCase.UpstreamResumeResponse) {
              subBuilder.MergeFrom(UpstreamResumeResponse);
            }
            input.ReadMessage(subBuilder);
            UpstreamResumeResponse = subBuilder;
            break;
          }
          case 546: {
            global::Iscp2.V1.UpstreamCloseRequest subBuilder = new global::Iscp2.V1.UpstreamCloseRequest();
            if (messageCase_ == MessageOneofCase.UpstreamCloseRequest) {
              subBuilder.MergeFrom(UpstreamCloseRequest);
            }
            input.ReadMessage(subBuilder);
            UpstreamCloseRequest = subBuilder;
            break;
          }
          case 554: {
            global::Iscp2.V1.UpstreamCloseResponse subBuilder = new global::Iscp2.V1.UpstreamCloseResponse();
            if (messageCase_ == MessageOneofCase.UpstreamCloseResponse) {
              subBuilder.MergeFrom(UpstreamCloseResponse);
            }
            input.ReadMessage(subBuilder);
            UpstreamCloseResponse = subBuilder;
            break;
          }
          case 562: {
            global::Iscp2.V1.UpstreamChunk subBuilder = new global::Iscp2.V1.UpstreamChunk();
            if (messageCase_ == MessageOneofCase.UpstreamChunk) {
              subBuilder.MergeFrom(UpstreamChunk);
            }
            input.ReadMessage(subBuilder);
            UpstreamChunk = subBuilder;
            break;
          }
          case 570: {
            global::Iscp2.V1.UpstreamChunkAck subBuilder = new global::Iscp2.V1.UpstreamChunkAck();
            if (messageCase_ == MessageOneofCase.UpstreamChunkAck) {
              subBuilder.MergeFrom(UpstreamChunkAck);
            }
            input.ReadMessage(subBuilder);
            UpstreamChunkAck = subBuilder;
            break;
          }
          case 578: {
            global::Iscp2.V1.UpstreamMetadata subBuilder = new global::Iscp2.V1.UpstreamMetadata();
            if (messageCase_ == MessageOneofCase.UpstreamMetadata) {
              subBuilder.MergeFrom(UpstreamMetadata);
            }
            input.ReadMessage(subBuilder);
            UpstreamMetadata = subBuilder;
            break;
          }
          case 586: {
            global::Iscp2.V1.UpstreamMetadataAck subBuilder = new global::Iscp2.V1.UpstreamMetadataAck();
            if (messageCase_ == MessageOneofCase.UpstreamMetadataAck) {
              subBuilder.MergeFrom(UpstreamMetadataAck);
            }
            input.ReadMessage(subBuilder);
            UpstreamMetadataAck = subBuilder;
            break;
          }
          case 1026: {
            global::Iscp2.V1.DownstreamOpenRequest subBuilder = new global::Iscp2.V1.DownstreamOpenRequest();
            if (messageCase_ == MessageOneofCase.DownstreamOpenRequest) {
              subBuilder.MergeFrom(DownstreamOpenRequest);
            }
            input.ReadMessage(subBuilder);
            DownstreamOpenRequest = subBuilder;
            break;
          }
          case 1034: {
            global::Iscp2.V1.DownstreamOpenResponse subBuilder = new global::Iscp2.V1.DownstreamOpenResponse();
            if (messageCase_ == MessageOneofCase.DownstreamOpenResponse) {
              subBuilder.MergeFrom(DownstreamOpenResponse);
            }
            input.ReadMessage(subBuilder);
            DownstreamOpenResponse = subBuilder;
            break;
          }
          case 1042: {
            global::Iscp2.V1.DownstreamResumeRequest subBuilder = new global::Iscp2.V1.DownstreamResumeRequest();
            if (messageCase_ == MessageOneofCase.DownstreamResumeRequest) {
              subBuilder.MergeFrom(DownstreamResumeRequest);
            }
            input.ReadMessage(subBuilder);
            DownstreamResumeRequest = subBuilder;
            break;
          }
          case 1050: {
            global::Iscp2.V1.DownstreamResumeResponse subBuilder = new global::Iscp2.V1.DownstreamResumeResponse();
            if (messageCase_ == MessageOneofCase.DownstreamResumeResponse) {
              subBuilder.MergeFrom(DownstreamResumeResponse);
            }
            input.ReadMessage(subBuilder);
            DownstreamResumeResponse = subBuilder;
            break;
          }
          case 1058: {
            global::Iscp2.V1.DownstreamCloseRequest subBuilder = new global::Iscp2.V1.DownstreamCloseRequest();
            if (messageCase_ == MessageOneofCase.DownstreamCloseRequest) {
              subBuilder.MergeFrom(DownstreamCloseRequest);
            }
            input.ReadMessage(subBuilder);
            DownstreamCloseRequest = subBuilder;
            break;
          }
          case 1066: {
            global::Iscp2.V1.DownstreamCloseResponse subBuilder = new global::Iscp2.V1.DownstreamCloseResponse();
            if (messageCase_ == MessageOneofCase.DownstreamCloseResponse) {
              subBuilder.MergeFrom(DownstreamCloseResponse);
            }
            input.ReadMessage(subBuilder);
            DownstreamCloseResponse = subBuilder;
            break;
          }
          case 1074: {
            global::Iscp2.V1.DownstreamChunk subBuilder = new global::Iscp2.V1.DownstreamChunk();
            if (messageCase_ == MessageOneofCase.DownstreamChunk) {
              subBuilder.MergeFrom(DownstreamChunk);
            }
            input.ReadMessage(subBuilder);
            DownstreamChunk = subBuilder;
            break;
          }
          case 1082: {
            global::Iscp2.V1.DownstreamChunkAck subBuilder = new global::Iscp2.V1.DownstreamChunkAck();
            if (messageCase_ == MessageOneofCase.DownstreamChunkAck) {
              subBuilder.MergeFrom(DownstreamChunkAck);
            }
            input.ReadMessage(subBuilder);
            DownstreamChunkAck = subBuilder;
            break;
          }
          case 1090: {
            global::Iscp2.V1.DownstreamChunkAckComplete subBuilder = new global::Iscp2.V1.DownstreamChunkAckComplete();
            if (messageCase_ == MessageOneofCase.DownstreamChunkAckComplete) {
              subBuilder.MergeFrom(DownstreamChunkAckComplete);
            }
            input.ReadMessage(subBuilder);
            DownstreamChunkAckComplete = subBuilder;
            break;
          }
          case 1098: {
            global::Iscp2.V1.DownstreamMetadata subBuilder = new global::Iscp2.V1.DownstreamMetadata();
            if (messageCase_ == MessageOneofCase.DownstreamMetadata) {
              subBuilder.MergeFrom(DownstreamMetadata);
            }
            input.ReadMessage(subBuilder);
            DownstreamMetadata = subBuilder;
            break;
          }
          case 1106: {
            global::Iscp2.V1.DownstreamMetadataAck subBuilder = new global::Iscp2.V1.DownstreamMetadataAck();
            if (messageCase_ == MessageOneofCase.DownstreamMetadataAck) {
              subBuilder.MergeFrom(DownstreamMetadataAck);
            }
            input.ReadMessage(subBuilder);
            DownstreamMetadataAck = subBuilder;
            break;
          }
          case 1538: {
            global::Iscp2.V1.Ping subBuilder = new global::Iscp2.V1.Ping();
            if (messageCase_ == MessageOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 1546: {
            global::Iscp2.V1.Pong subBuilder = new global::Iscp2.V1.Pong();
            if (messageCase_ == MessageOneofCase.Pong) {
              subBuilder.MergeFrom(Pong);
            }
            input.ReadMessage(subBuilder);
            Pong = subBuilder;
            break;
          }
          case 2050: {
            global::Iscp2.V1.UpstreamCall subBuilder = new global::Iscp2.V1.UpstreamCall();
            if (messageCase_ == MessageOneofCase.UpstreamCall) {
              subBuilder.MergeFrom(UpstreamCall);
            }
            input.ReadMessage(subBuilder);
            UpstreamCall = subBuilder;
            break;
          }
          case 2058: {
            global::Iscp2.V1.UpstreamCallAck subBuilder = new global::Iscp2.V1.UpstreamCallAck();
            if (messageCase_ == MessageOneofCase.UpstreamCallAck) {
              subBuilder.MergeFrom(UpstreamCallAck);
            }
            input.ReadMessage(subBuilder);
            UpstreamCallAck = subBuilder;
            break;
          }
          case 2066: {
            global::Iscp2.V1.DownstreamCall subBuilder = new global::Iscp2.V1.DownstreamCall();
            if (messageCase_ == MessageOneofCase.DownstreamCall) {
              subBuilder.MergeFrom(DownstreamCall);
            }
            input.ReadMessage(subBuilder);
            DownstreamCall = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Iscp2.V1.ConnectRequest subBuilder = new global::Iscp2.V1.ConnectRequest();
            if (messageCase_ == MessageOneofCase.ConnectRequest) {
              subBuilder.MergeFrom(ConnectRequest);
            }
            input.ReadMessage(subBuilder);
            ConnectRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iscp2.V1.ConnectResponse subBuilder = new global::Iscp2.V1.ConnectResponse();
            if (messageCase_ == MessageOneofCase.ConnectResponse) {
              subBuilder.MergeFrom(ConnectResponse);
            }
            input.ReadMessage(subBuilder);
            ConnectResponse = subBuilder;
            break;
          }
          case 26: {
            global::Iscp2.V1.Disconnect subBuilder = new global::Iscp2.V1.Disconnect();
            if (messageCase_ == MessageOneofCase.Disconnect) {
              subBuilder.MergeFrom(Disconnect);
            }
            input.ReadMessage(subBuilder);
            Disconnect = subBuilder;
            break;
          }
          case 514: {
            global::Iscp2.V1.UpstreamOpenRequest subBuilder = new global::Iscp2.V1.UpstreamOpenRequest();
            if (messageCase_ == MessageOneofCase.UpstreamOpenRequest) {
              subBuilder.MergeFrom(UpstreamOpenRequest);
            }
            input.ReadMessage(subBuilder);
            UpstreamOpenRequest = subBuilder;
            break;
          }
          case 522: {
            global::Iscp2.V1.UpstreamOpenResponse subBuilder = new global::Iscp2.V1.UpstreamOpenResponse();
            if (messageCase_ == MessageOneofCase.UpstreamOpenResponse) {
              subBuilder.MergeFrom(UpstreamOpenResponse);
            }
            input.ReadMessage(subBuilder);
            UpstreamOpenResponse = subBuilder;
            break;
          }
          case 530: {
            global::Iscp2.V1.UpstreamResumeRequest subBuilder = new global::Iscp2.V1.UpstreamResumeRequest();
            if (messageCase_ == MessageOneofCase.UpstreamResumeRequest) {
              subBuilder.MergeFrom(UpstreamResumeRequest);
            }
            input.ReadMessage(subBuilder);
            UpstreamResumeRequest = subBuilder;
            break;
          }
          case 538: {
            global::Iscp2.V1.UpstreamResumeResponse subBuilder = new global::Iscp2.V1.UpstreamResumeResponse();
            if (messageCase_ == MessageOneofCase.UpstreamResumeResponse) {
              subBuilder.MergeFrom(UpstreamResumeResponse);
            }
            input.ReadMessage(subBuilder);
            UpstreamResumeResponse = subBuilder;
            break;
          }
          case 546: {
            global::Iscp2.V1.UpstreamCloseRequest subBuilder = new global::Iscp2.V1.UpstreamCloseRequest();
            if (messageCase_ == MessageOneofCase.UpstreamCloseRequest) {
              subBuilder.MergeFrom(UpstreamCloseRequest);
            }
            input.ReadMessage(subBuilder);
            UpstreamCloseRequest = subBuilder;
            break;
          }
          case 554: {
            global::Iscp2.V1.UpstreamCloseResponse subBuilder = new global::Iscp2.V1.UpstreamCloseResponse();
            if (messageCase_ == MessageOneofCase.UpstreamCloseResponse) {
              subBuilder.MergeFrom(UpstreamCloseResponse);
            }
            input.ReadMessage(subBuilder);
            UpstreamCloseResponse = subBuilder;
            break;
          }
          case 562: {
            global::Iscp2.V1.UpstreamChunk subBuilder = new global::Iscp2.V1.UpstreamChunk();
            if (messageCase_ == MessageOneofCase.UpstreamChunk) {
              subBuilder.MergeFrom(UpstreamChunk);
            }
            input.ReadMessage(subBuilder);
            UpstreamChunk = subBuilder;
            break;
          }
          case 570: {
            global::Iscp2.V1.UpstreamChunkAck subBuilder = new global::Iscp2.V1.UpstreamChunkAck();
            if (messageCase_ == MessageOneofCase.UpstreamChunkAck) {
              subBuilder.MergeFrom(UpstreamChunkAck);
            }
            input.ReadMessage(subBuilder);
            UpstreamChunkAck = subBuilder;
            break;
          }
          case 578: {
            global::Iscp2.V1.UpstreamMetadata subBuilder = new global::Iscp2.V1.UpstreamMetadata();
            if (messageCase_ == MessageOneofCase.UpstreamMetadata) {
              subBuilder.MergeFrom(UpstreamMetadata);
            }
            input.ReadMessage(subBuilder);
            UpstreamMetadata = subBuilder;
            break;
          }
          case 586: {
            global::Iscp2.V1.UpstreamMetadataAck subBuilder = new global::Iscp2.V1.UpstreamMetadataAck();
            if (messageCase_ == MessageOneofCase.UpstreamMetadataAck) {
              subBuilder.MergeFrom(UpstreamMetadataAck);
            }
            input.ReadMessage(subBuilder);
            UpstreamMetadataAck = subBuilder;
            break;
          }
          case 1026: {
            global::Iscp2.V1.DownstreamOpenRequest subBuilder = new global::Iscp2.V1.DownstreamOpenRequest();
            if (messageCase_ == MessageOneofCase.DownstreamOpenRequest) {
              subBuilder.MergeFrom(DownstreamOpenRequest);
            }
            input.ReadMessage(subBuilder);
            DownstreamOpenRequest = subBuilder;
            break;
          }
          case 1034: {
            global::Iscp2.V1.DownstreamOpenResponse subBuilder = new global::Iscp2.V1.DownstreamOpenResponse();
            if (messageCase_ == MessageOneofCase.DownstreamOpenResponse) {
              subBuilder.MergeFrom(DownstreamOpenResponse);
            }
            input.ReadMessage(subBuilder);
            DownstreamOpenResponse = subBuilder;
            break;
          }
          case 1042: {
            global::Iscp2.V1.DownstreamResumeRequest subBuilder = new global::Iscp2.V1.DownstreamResumeRequest();
            if (messageCase_ == MessageOneofCase.DownstreamResumeRequest) {
              subBuilder.MergeFrom(DownstreamResumeRequest);
            }
            input.ReadMessage(subBuilder);
            DownstreamResumeRequest = subBuilder;
            break;
          }
          case 1050: {
            global::Iscp2.V1.DownstreamResumeResponse subBuilder = new global::Iscp2.V1.DownstreamResumeResponse();
            if (messageCase_ == MessageOneofCase.DownstreamResumeResponse) {
              subBuilder.MergeFrom(DownstreamResumeResponse);
            }
            input.ReadMessage(subBuilder);
            DownstreamResumeResponse = subBuilder;
            break;
          }
          case 1058: {
            global::Iscp2.V1.DownstreamCloseRequest subBuilder = new global::Iscp2.V1.DownstreamCloseRequest();
            if (messageCase_ == MessageOneofCase.DownstreamCloseRequest) {
              subBuilder.MergeFrom(DownstreamCloseRequest);
            }
            input.ReadMessage(subBuilder);
            DownstreamCloseRequest = subBuilder;
            break;
          }
          case 1066: {
            global::Iscp2.V1.DownstreamCloseResponse subBuilder = new global::Iscp2.V1.DownstreamCloseResponse();
            if (messageCase_ == MessageOneofCase.DownstreamCloseResponse) {
              subBuilder.MergeFrom(DownstreamCloseResponse);
            }
            input.ReadMessage(subBuilder);
            DownstreamCloseResponse = subBuilder;
            break;
          }
          case 1074: {
            global::Iscp2.V1.DownstreamChunk subBuilder = new global::Iscp2.V1.DownstreamChunk();
            if (messageCase_ == MessageOneofCase.DownstreamChunk) {
              subBuilder.MergeFrom(DownstreamChunk);
            }
            input.ReadMessage(subBuilder);
            DownstreamChunk = subBuilder;
            break;
          }
          case 1082: {
            global::Iscp2.V1.DownstreamChunkAck subBuilder = new global::Iscp2.V1.DownstreamChunkAck();
            if (messageCase_ == MessageOneofCase.DownstreamChunkAck) {
              subBuilder.MergeFrom(DownstreamChunkAck);
            }
            input.ReadMessage(subBuilder);
            DownstreamChunkAck = subBuilder;
            break;
          }
          case 1090: {
            global::Iscp2.V1.DownstreamChunkAckComplete subBuilder = new global::Iscp2.V1.DownstreamChunkAckComplete();
            if (messageCase_ == MessageOneofCase.DownstreamChunkAckComplete) {
              subBuilder.MergeFrom(DownstreamChunkAckComplete);
            }
            input.ReadMessage(subBuilder);
            DownstreamChunkAckComplete = subBuilder;
            break;
          }
          case 1098: {
            global::Iscp2.V1.DownstreamMetadata subBuilder = new global::Iscp2.V1.DownstreamMetadata();
            if (messageCase_ == MessageOneofCase.DownstreamMetadata) {
              subBuilder.MergeFrom(DownstreamMetadata);
            }
            input.ReadMessage(subBuilder);
            DownstreamMetadata = subBuilder;
            break;
          }
          case 1106: {
            global::Iscp2.V1.DownstreamMetadataAck subBuilder = new global::Iscp2.V1.DownstreamMetadataAck();
            if (messageCase_ == MessageOneofCase.DownstreamMetadataAck) {
              subBuilder.MergeFrom(DownstreamMetadataAck);
            }
            input.ReadMessage(subBuilder);
            DownstreamMetadataAck = subBuilder;
            break;
          }
          case 1538: {
            global::Iscp2.V1.Ping subBuilder = new global::Iscp2.V1.Ping();
            if (messageCase_ == MessageOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 1546: {
            global::Iscp2.V1.Pong subBuilder = new global::Iscp2.V1.Pong();
            if (messageCase_ == MessageOneofCase.Pong) {
              subBuilder.MergeFrom(Pong);
            }
            input.ReadMessage(subBuilder);
            Pong = subBuilder;
            break;
          }
          case 2050: {
            global::Iscp2.V1.UpstreamCall subBuilder = new global::Iscp2.V1.UpstreamCall();
            if (messageCase_ == MessageOneofCase.UpstreamCall) {
              subBuilder.MergeFrom(UpstreamCall);
            }
            input.ReadMessage(subBuilder);
            UpstreamCall = subBuilder;
            break;
          }
          case 2058: {
            global::Iscp2.V1.UpstreamCallAck subBuilder = new global::Iscp2.V1.UpstreamCallAck();
            if (messageCase_ == MessageOneofCase.UpstreamCallAck) {
              subBuilder.MergeFrom(UpstreamCallAck);
            }
            input.ReadMessage(subBuilder);
            UpstreamCallAck = subBuilder;
            break;
          }
          case 2066: {
            global::Iscp2.V1.DownstreamCall subBuilder = new global::Iscp2.V1.DownstreamCall();
            if (messageCase_ == MessageOneofCase.DownstreamCall) {
              subBuilder.MergeFrom(DownstreamCall);
            }
            input.ReadMessage(subBuilder);
            DownstreamCall = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
