// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: iscp2/v1/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.github.aptpod.proto.iscp2.v1;

@kotlin.jvm.JvmName("-initializestreamChunk")
public inline fun streamChunk(block: com.github.aptpod.proto.iscp2.v1.StreamChunkKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.StreamChunk =
  com.github.aptpod.proto.iscp2.v1.StreamChunkKt.Dsl._create(com.github.aptpod.proto.iscp2.v1.StreamChunk.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `iscp2.v1.StreamChunk`
 */
public object StreamChunkKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.github.aptpod.proto.iscp2.v1.StreamChunk = _builder.build()

    /**
     * `uint32 sequence_number = 1 [json_name = "sequenceNumber"];`
     */
    public var sequenceNumber: kotlin.Int
      @JvmName("getSequenceNumber")
      get() = _builder.getSequenceNumber()
      @JvmName("setSequenceNumber")
      set(value) {
        _builder.setSequenceNumber(value)
      }
    /**
     * `uint32 sequence_number = 1 [json_name = "sequenceNumber"];`
     */
    public fun clearSequenceNumber() {
      _builder.clearSequenceNumber()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DataPointGroupsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     */
     public val dataPointGroups: com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDataPointGroupsList()
      )
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     * @param value The dataPointGroups to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDataPointGroups")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>.add(value: com.github.aptpod.proto.iscp2.v1.DataPointGroup) {
      _builder.addDataPointGroups(value)
    }
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     * @param value The dataPointGroups to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDataPointGroups")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>.plusAssign(value: com.github.aptpod.proto.iscp2.v1.DataPointGroup) {
      add(value)
    }
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     * @param values The dataPointGroups to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDataPointGroups")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>.addAll(values: kotlin.collections.Iterable<com.github.aptpod.proto.iscp2.v1.DataPointGroup>) {
      _builder.addAllDataPointGroups(values)
    }
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     * @param values The dataPointGroups to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDataPointGroups")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>.plusAssign(values: kotlin.collections.Iterable<com.github.aptpod.proto.iscp2.v1.DataPointGroup>) {
      addAll(values)
    }
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     * @param index The index to set the value at.
     * @param value The dataPointGroups to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDataPointGroups")
    public operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>.set(index: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.DataPointGroup) {
      _builder.setDataPointGroups(index, value)
    }
    /**
     * `repeated .iscp2.v1.DataPointGroup data_point_groups = 2 [json_name = "dataPointGroups"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDataPointGroups")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataPointGroup, DataPointGroupsProxy>.clear() {
      _builder.clearDataPointGroups()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.github.aptpod.proto.iscp2.v1.StreamChunk.copy(block: `com.github.aptpod.proto.iscp2.v1`.StreamChunkKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.StreamChunk =
  `com.github.aptpod.proto.iscp2.v1`.StreamChunkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

