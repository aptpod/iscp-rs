// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: iscp2/v1/downstream.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.github.aptpod.proto.iscp2.v1;

@kotlin.jvm.JvmName("-initializedownstreamChunkAck")
public inline fun downstreamChunkAck(block: com.github.aptpod.proto.iscp2.v1.DownstreamChunkAckKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck =
  com.github.aptpod.proto.iscp2.v1.DownstreamChunkAckKt.Dsl._create(com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `iscp2.v1.DownstreamChunkAck`
 */
public object DownstreamChunkAckKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck = _builder.build()

    /**
     * `uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];`
     */
    public var streamIdAlias: kotlin.Int
      @JvmName("getStreamIdAlias")
      get() = _builder.getStreamIdAlias()
      @JvmName("setStreamIdAlias")
      set(value) {
        _builder.setStreamIdAlias(value)
      }
    /**
     * `uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];`
     */
    public fun clearStreamIdAlias() {
      _builder.clearStreamIdAlias()
    }

    /**
     * `uint32 ack_id = 2 [json_name = "ackId"];`
     */
    public var ackId: kotlin.Int
      @JvmName("getAckId")
      get() = _builder.getAckId()
      @JvmName("setAckId")
      set(value) {
        _builder.setAckId(value)
      }
    /**
     * `uint32 ack_id = 2 [json_name = "ackId"];`
     */
    public fun clearAckId() {
      _builder.clearAckId()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ResultsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     */
     public val results: com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getResultsList()
      )
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     * @param value The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addResults")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>.add(value: com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult) {
      _builder.addResults(value)
    }
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     * @param value The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignResults")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>.plusAssign(value: com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult) {
      add(value)
    }
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     * @param values The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllResults")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>.addAll(values: kotlin.collections.Iterable<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult>) {
      _builder.addAllResults(values)
    }
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     * @param values The results to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllResults")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>.plusAssign(values: kotlin.collections.Iterable<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult>) {
      addAll(values)
    }
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     * @param index The index to set the value at.
     * @param value The results to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setResults")
    public operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>.set(index: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult) {
      _builder.setResults(index, value)
    }
    /**
     * `repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearResults")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, ResultsProxy>.clear() {
      _builder.clearResults()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class UpstreamAliasesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<uint32, .iscp2.v1.UpstreamInfo> upstream_aliases = 4 [json_name = "upstreamAliases"];`
     */
     public val upstreamAliases: com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo, UpstreamAliasesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getUpstreamAliasesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getUpstreamAliasesMap()
      )
    /**
     * `map<uint32, .iscp2.v1.UpstreamInfo> upstream_aliases = 4 [json_name = "upstreamAliases"];`
     */
    @JvmName("putUpstreamAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo, UpstreamAliasesProxy>
      .put(key: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.UpstreamInfo) {
         _builder.putUpstreamAliases(key, value)
       }
    /**
     * `map<uint32, .iscp2.v1.UpstreamInfo> upstream_aliases = 4 [json_name = "upstreamAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setUpstreamAliases")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo, UpstreamAliasesProxy>
      .set(key: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.UpstreamInfo) {
         put(key, value)
       }
    /**
     * `map<uint32, .iscp2.v1.UpstreamInfo> upstream_aliases = 4 [json_name = "upstreamAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeUpstreamAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo, UpstreamAliasesProxy>
      .remove(key: kotlin.Int) {
         _builder.removeUpstreamAliases(key)
       }
    /**
     * `map<uint32, .iscp2.v1.UpstreamInfo> upstream_aliases = 4 [json_name = "upstreamAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllUpstreamAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo, UpstreamAliasesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>) {
         _builder.putAllUpstreamAliases(map)
       }
    /**
     * `map<uint32, .iscp2.v1.UpstreamInfo> upstream_aliases = 4 [json_name = "upstreamAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearUpstreamAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.UpstreamInfo, UpstreamAliasesProxy>
      .clear() {
         _builder.clearUpstreamAliases()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DataIdAliasesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<uint32, .iscp2.v1.DataID> data_id_aliases = 5 [json_name = "dataIdAliases"];`
     */
     public val dataIdAliases: com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID, DataIdAliasesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getDataIdAliasesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getDataIdAliasesMap()
      )
    /**
     * `map<uint32, .iscp2.v1.DataID> data_id_aliases = 5 [json_name = "dataIdAliases"];`
     */
    @JvmName("putDataIdAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID, DataIdAliasesProxy>
      .put(key: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.DataID) {
         _builder.putDataIdAliases(key, value)
       }
    /**
     * `map<uint32, .iscp2.v1.DataID> data_id_aliases = 5 [json_name = "dataIdAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setDataIdAliases")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID, DataIdAliasesProxy>
      .set(key: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.DataID) {
         put(key, value)
       }
    /**
     * `map<uint32, .iscp2.v1.DataID> data_id_aliases = 5 [json_name = "dataIdAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeDataIdAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID, DataIdAliasesProxy>
      .remove(key: kotlin.Int) {
         _builder.removeDataIdAliases(key)
       }
    /**
     * `map<uint32, .iscp2.v1.DataID> data_id_aliases = 5 [json_name = "dataIdAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllDataIdAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID, DataIdAliasesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID>) {
         _builder.putAllDataIdAliases(map)
       }
    /**
     * `map<uint32, .iscp2.v1.DataID> data_id_aliases = 5 [json_name = "dataIdAliases"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearDataIdAliases")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, com.github.aptpod.proto.iscp2.v1.DataID, DataIdAliasesProxy>
      .clear() {
         _builder.clearDataIdAliases()
       }

    /**
     * `.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];`
     */
    public var extensionFields: com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields
      @JvmName("getExtensionFields")
      get() = _builder.getExtensionFields()
      @JvmName("setExtensionFields")
      set(value) {
        _builder.setExtensionFields(value)
      }
    /**
     * `.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];`
     */
    public fun clearExtensionFields() {
      _builder.clearExtensionFields()
    }
    /**
     * `.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];`
     * @return Whether the extensionFields field is set.
     */
    public fun hasExtensionFields(): kotlin.Boolean {
      return _builder.hasExtensionFields()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.copy(block: `com.github.aptpod.proto.iscp2.v1`.DownstreamChunkAckKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck =
  `com.github.aptpod.proto.iscp2.v1`.DownstreamChunkAckKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.github.aptpod.proto.iscp2.v1.DownstreamChunkAckOrBuilder.extensionFieldsOrNull: com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields?
  get() = if (hasExtensionFields()) getExtensionFields() else null

