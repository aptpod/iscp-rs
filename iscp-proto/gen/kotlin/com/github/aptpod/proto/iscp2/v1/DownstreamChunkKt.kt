// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: iscp2/v1/downstream.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.github.aptpod.proto.iscp2.v1;

@kotlin.jvm.JvmName("-initializedownstreamChunk")
public inline fun downstreamChunk(block: com.github.aptpod.proto.iscp2.v1.DownstreamChunkKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.DownstreamChunk =
  com.github.aptpod.proto.iscp2.v1.DownstreamChunkKt.Dsl._create(com.github.aptpod.proto.iscp2.v1.DownstreamChunk.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `iscp2.v1.DownstreamChunk`
 */
public object DownstreamChunkKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.github.aptpod.proto.iscp2.v1.DownstreamChunk.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.github.aptpod.proto.iscp2.v1.DownstreamChunk.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.github.aptpod.proto.iscp2.v1.DownstreamChunk = _builder.build()

    /**
     * `uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];`
     */
    public var streamIdAlias: kotlin.Int
      @JvmName("getStreamIdAlias")
      get() = _builder.getStreamIdAlias()
      @JvmName("setStreamIdAlias")
      set(value) {
        _builder.setStreamIdAlias(value)
      }
    /**
     * `uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];`
     */
    public fun clearStreamIdAlias() {
      _builder.clearStreamIdAlias()
    }

    /**
     * `.iscp2.v1.UpstreamInfo upstream_info = 2 [json_name = "upstreamInfo"];`
     */
    public var upstreamInfo: com.github.aptpod.proto.iscp2.v1.UpstreamInfo
      @JvmName("getUpstreamInfo")
      get() = _builder.getUpstreamInfo()
      @JvmName("setUpstreamInfo")
      set(value) {
        _builder.setUpstreamInfo(value)
      }
    /**
     * `.iscp2.v1.UpstreamInfo upstream_info = 2 [json_name = "upstreamInfo"];`
     */
    public fun clearUpstreamInfo() {
      _builder.clearUpstreamInfo()
    }
    /**
     * `.iscp2.v1.UpstreamInfo upstream_info = 2 [json_name = "upstreamInfo"];`
     * @return Whether the upstreamInfo field is set.
     */
    public fun hasUpstreamInfo(): kotlin.Boolean {
      return _builder.hasUpstreamInfo()
    }

    /**
     * `uint32 upstream_alias = 3 [json_name = "upstreamAlias"];`
     */
    public var upstreamAlias: kotlin.Int
      @JvmName("getUpstreamAlias")
      get() = _builder.getUpstreamAlias()
      @JvmName("setUpstreamAlias")
      set(value) {
        _builder.setUpstreamAlias(value)
      }
    /**
     * `uint32 upstream_alias = 3 [json_name = "upstreamAlias"];`
     */
    public fun clearUpstreamAlias() {
      _builder.clearUpstreamAlias()
    }
    /**
     * `uint32 upstream_alias = 3 [json_name = "upstreamAlias"];`
     * @return Whether the upstreamAlias field is set.
     */
    public fun hasUpstreamAlias(): kotlin.Boolean {
      return _builder.hasUpstreamAlias()
    }

    /**
     * `.iscp2.v1.StreamChunk stream_chunk = 4 [json_name = "streamChunk"];`
     */
    public var streamChunk: com.github.aptpod.proto.iscp2.v1.StreamChunk
      @JvmName("getStreamChunk")
      get() = _builder.getStreamChunk()
      @JvmName("setStreamChunk")
      set(value) {
        _builder.setStreamChunk(value)
      }
    /**
     * `.iscp2.v1.StreamChunk stream_chunk = 4 [json_name = "streamChunk"];`
     */
    public fun clearStreamChunk() {
      _builder.clearStreamChunk()
    }
    /**
     * `.iscp2.v1.StreamChunk stream_chunk = 4 [json_name = "streamChunk"];`
     * @return Whether the streamChunk field is set.
     */
    public fun hasStreamChunk(): kotlin.Boolean {
      return _builder.hasStreamChunk()
    }

    /**
     * `.iscp2.v1.extensions.DownstreamChunkExtensionFields extension_fields = 5 [json_name = "extensionFields"];`
     */
    public var extensionFields: com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkExtensionFields
      @JvmName("getExtensionFields")
      get() = _builder.getExtensionFields()
      @JvmName("setExtensionFields")
      set(value) {
        _builder.setExtensionFields(value)
      }
    /**
     * `.iscp2.v1.extensions.DownstreamChunkExtensionFields extension_fields = 5 [json_name = "extensionFields"];`
     */
    public fun clearExtensionFields() {
      _builder.clearExtensionFields()
    }
    /**
     * `.iscp2.v1.extensions.DownstreamChunkExtensionFields extension_fields = 5 [json_name = "extensionFields"];`
     * @return Whether the extensionFields field is set.
     */
    public fun hasExtensionFields(): kotlin.Boolean {
      return _builder.hasExtensionFields()
    }
    public val upstreamOrAliasCase: com.github.aptpod.proto.iscp2.v1.DownstreamChunk.UpstreamOrAliasCase
      @JvmName("getUpstreamOrAliasCase")
      get() = _builder.getUpstreamOrAliasCase()

    public fun clearUpstreamOrAlias() {
      _builder.clearUpstreamOrAlias()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.github.aptpod.proto.iscp2.v1.DownstreamChunk.copy(block: `com.github.aptpod.proto.iscp2.v1`.DownstreamChunkKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.DownstreamChunk =
  `com.github.aptpod.proto.iscp2.v1`.DownstreamChunkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.github.aptpod.proto.iscp2.v1.DownstreamChunkOrBuilder.upstreamInfoOrNull: com.github.aptpod.proto.iscp2.v1.UpstreamInfo?
  get() = if (hasUpstreamInfo()) getUpstreamInfo() else null

public val com.github.aptpod.proto.iscp2.v1.DownstreamChunkOrBuilder.streamChunkOrNull: com.github.aptpod.proto.iscp2.v1.StreamChunk?
  get() = if (hasStreamChunk()) getStreamChunk() else null

public val com.github.aptpod.proto.iscp2.v1.DownstreamChunkOrBuilder.extensionFieldsOrNull: com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkExtensionFields?
  get() = if (hasExtensionFields()) getExtensionFields() else null

