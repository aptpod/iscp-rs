// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: iscp2/v1/upstream.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.github.aptpod.proto.iscp2.v1;

@kotlin.jvm.JvmName("-initializeupstreamOpenRequest")
public inline fun upstreamOpenRequest(block: com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequestKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest =
  com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequestKt.Dsl._create(com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `iscp2.v1.UpstreamOpenRequest`
 */
public object UpstreamOpenRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest = _builder.build()

    /**
     * `uint32 request_id = 1 [json_name = "requestId"];`
     */
    public var requestId: kotlin.Int
      @JvmName("getRequestId")
      get() = _builder.getRequestId()
      @JvmName("setRequestId")
      set(value) {
        _builder.setRequestId(value)
      }
    /**
     * `uint32 request_id = 1 [json_name = "requestId"];`
     */
    public fun clearRequestId() {
      _builder.clearRequestId()
    }

    /**
     * `string session_id = 2 [json_name = "sessionId"];`
     */
    public var sessionId: kotlin.String
      @JvmName("getSessionId")
      get() = _builder.getSessionId()
      @JvmName("setSessionId")
      set(value) {
        _builder.setSessionId(value)
      }
    /**
     * `string session_id = 2 [json_name = "sessionId"];`
     */
    public fun clearSessionId() {
      _builder.clearSessionId()
    }

    /**
     * `uint32 ack_interval = 3 [json_name = "ackInterval"];`
     */
    public var ackInterval: kotlin.Int
      @JvmName("getAckInterval")
      get() = _builder.getAckInterval()
      @JvmName("setAckInterval")
      set(value) {
        _builder.setAckInterval(value)
      }
    /**
     * `uint32 ack_interval = 3 [json_name = "ackInterval"];`
     */
    public fun clearAckInterval() {
      _builder.clearAckInterval()
    }

    /**
     * `uint32 expiry_interval = 5 [json_name = "expiryInterval"];`
     */
    public var expiryInterval: kotlin.Int
      @JvmName("getExpiryInterval")
      get() = _builder.getExpiryInterval()
      @JvmName("setExpiryInterval")
      set(value) {
        _builder.setExpiryInterval(value)
      }
    /**
     * `uint32 expiry_interval = 5 [json_name = "expiryInterval"];`
     */
    public fun clearExpiryInterval() {
      _builder.clearExpiryInterval()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DataIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     */
     public val dataIds: com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDataIdsList()
      )
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     * @param value The dataIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDataIds")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>.add(value: com.github.aptpod.proto.iscp2.v1.DataID) {
      _builder.addDataIds(value)
    }
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     * @param value The dataIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDataIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>.plusAssign(value: com.github.aptpod.proto.iscp2.v1.DataID) {
      add(value)
    }
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     * @param values The dataIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDataIds")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>.addAll(values: kotlin.collections.Iterable<com.github.aptpod.proto.iscp2.v1.DataID>) {
      _builder.addAllDataIds(values)
    }
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     * @param values The dataIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDataIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>.plusAssign(values: kotlin.collections.Iterable<com.github.aptpod.proto.iscp2.v1.DataID>) {
      addAll(values)
    }
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     * @param index The index to set the value at.
     * @param value The dataIds to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDataIds")
    public operator fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>.set(index: kotlin.Int, value: com.github.aptpod.proto.iscp2.v1.DataID) {
      _builder.setDataIds(index, value)
    }
    /**
     * `repeated .iscp2.v1.DataID data_ids = 6 [json_name = "dataIds"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDataIds")
    public fun com.google.protobuf.kotlin.DslList<com.github.aptpod.proto.iscp2.v1.DataID, DataIdsProxy>.clear() {
      _builder.clearDataIds()
    }


    /**
     * `.iscp2.v1.QoS qos = 7 [json_name = "qos"];`
     */
    public var qos: com.github.aptpod.proto.iscp2.v1.QoS
      @JvmName("getQos")
      get() = _builder.getQos()
      @JvmName("setQos")
      set(value) {
        _builder.setQos(value)
      }
    public var qosValue: kotlin.Int
      @JvmName("getQosValue")
      get() = _builder.getQosValue()
      @JvmName("setQosValue")
      set(value) {
        _builder.setQosValue(value)
      }
    /**
     * `.iscp2.v1.QoS qos = 7 [json_name = "qos"];`
     */
    public fun clearQos() {
      _builder.clearQos()
    }

    /**
     * `.iscp2.v1.extensions.UpstreamOpenRequestExtensionFields extension_fields = 8 [json_name = "extensionFields"];`
     */
    public var extensionFields: com.github.aptpod.proto.iscp2.v1.extensions.UpstreamOpenRequestExtensionFields
      @JvmName("getExtensionFields")
      get() = _builder.getExtensionFields()
      @JvmName("setExtensionFields")
      set(value) {
        _builder.setExtensionFields(value)
      }
    /**
     * `.iscp2.v1.extensions.UpstreamOpenRequestExtensionFields extension_fields = 8 [json_name = "extensionFields"];`
     */
    public fun clearExtensionFields() {
      _builder.clearExtensionFields()
    }
    /**
     * `.iscp2.v1.extensions.UpstreamOpenRequestExtensionFields extension_fields = 8 [json_name = "extensionFields"];`
     * @return Whether the extensionFields field is set.
     */
    public fun hasExtensionFields(): kotlin.Boolean {
      return _builder.hasExtensionFields()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest.copy(block: `com.github.aptpod.proto.iscp2.v1`.UpstreamOpenRequestKt.Dsl.() -> kotlin.Unit): com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequest =
  `com.github.aptpod.proto.iscp2.v1`.UpstreamOpenRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.github.aptpod.proto.iscp2.v1.UpstreamOpenRequestOrBuilder.extensionFieldsOrNull: com.github.aptpod.proto.iscp2.v1.extensions.UpstreamOpenRequestExtensionFields?
  get() = if (hasExtensionFields()) getExtensionFields() else null

