// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/upstream.proto (package iscp2.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DataID, QoS, StreamChunk } from "./common_pb.js";
import { UpstreamChunkAckExtensionFields, UpstreamChunkExtensionFields, UpstreamChunkResultExtensionFields, UpstreamCloseRequestExtensionFields, UpstreamCloseResponseExtensionFields, UpstreamMetadataAckExtensionFields, UpstreamMetadataExtensionFields, UpstreamOpenRequestExtensionFields, UpstreamOpenResponseExtensionFields, UpstreamResumeRequestExtensionFields, UpstreamResumeResponseExtensionFields } from "./extensions/upstream_pb.js";
import { ResultCode } from "./result_code_pb.js";
import { BaseTime } from "./metadata_pb.js";

/**
 * @generated from message iscp2.v1.UpstreamOpenRequest
 */
export class UpstreamOpenRequest extends Message<UpstreamOpenRequest> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: uint32 ack_interval = 3;
   */
  ackInterval = 0;

  /**
   * @generated from field: uint32 expiry_interval = 5;
   */
  expiryInterval = 0;

  /**
   * @generated from field: repeated iscp2.v1.DataID data_ids = 6;
   */
  dataIds: DataID[] = [];

  /**
   * @generated from field: iscp2.v1.QoS qos = 7;
   */
  qos = QoS.UNRELIABLE;

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamOpenRequestExtensionFields extension_fields = 8;
   */
  extensionFields?: UpstreamOpenRequestExtensionFields;

  constructor(data?: PartialMessage<UpstreamOpenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamOpenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ack_interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "expiry_interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "data_ids", kind: "message", T: DataID, repeated: true },
    { no: 7, name: "qos", kind: "enum", T: proto3.getEnumType(QoS) },
    { no: 8, name: "extension_fields", kind: "message", T: UpstreamOpenRequestExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamOpenRequest {
    return new UpstreamOpenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamOpenRequest {
    return new UpstreamOpenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamOpenRequest {
    return new UpstreamOpenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamOpenRequest | PlainMessage<UpstreamOpenRequest> | undefined, b: UpstreamOpenRequest | PlainMessage<UpstreamOpenRequest> | undefined): boolean {
    return proto3.util.equals(UpstreamOpenRequest, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamOpenResponse
 */
export class UpstreamOpenResponse extends Message<UpstreamOpenResponse> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: bytes assigned_stream_id = 2;
   */
  assignedStreamId = new Uint8Array(0);

  /**
   * @generated from field: uint32 assigned_stream_id_alias = 3;
   */
  assignedStreamIdAlias = 0;

  /**
   * @generated from field: map<uint32, iscp2.v1.DataID> data_id_aliases = 4;
   */
  dataIdAliases: { [key: number]: DataID } = {};

  /**
   * @generated from field: sint64 server_time = 5;
   */
  serverTime = protoInt64.zero;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 6;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 7;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamOpenResponseExtensionFields extension_fields = 8;
   */
  extensionFields?: UpstreamOpenResponseExtensionFields;

  constructor(data?: PartialMessage<UpstreamOpenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamOpenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "assigned_stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "assigned_stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "data_id_aliases", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: DataID} },
    { no: 5, name: "server_time", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 6, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 7, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "extension_fields", kind: "message", T: UpstreamOpenResponseExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamOpenResponse {
    return new UpstreamOpenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamOpenResponse {
    return new UpstreamOpenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamOpenResponse {
    return new UpstreamOpenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamOpenResponse | PlainMessage<UpstreamOpenResponse> | undefined, b: UpstreamOpenResponse | PlainMessage<UpstreamOpenResponse> | undefined): boolean {
    return proto3.util.equals(UpstreamOpenResponse, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamResumeRequest
 */
export class UpstreamResumeRequest extends Message<UpstreamResumeRequest> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: bytes stream_id = 2;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamResumeRequestExtensionFields extension_fields = 3;
   */
  extensionFields?: UpstreamResumeRequestExtensionFields;

  constructor(data?: PartialMessage<UpstreamResumeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamResumeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "extension_fields", kind: "message", T: UpstreamResumeRequestExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamResumeRequest {
    return new UpstreamResumeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamResumeRequest {
    return new UpstreamResumeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamResumeRequest {
    return new UpstreamResumeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamResumeRequest | PlainMessage<UpstreamResumeRequest> | undefined, b: UpstreamResumeRequest | PlainMessage<UpstreamResumeRequest> | undefined): boolean {
    return proto3.util.equals(UpstreamResumeRequest, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamResumeResponse
 */
export class UpstreamResumeResponse extends Message<UpstreamResumeResponse> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: uint32 assigned_stream_id_alias = 2;
   */
  assignedStreamIdAlias = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 3;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 4;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamResumeResponseExtensionFields extension_fields = 5;
   */
  extensionFields?: UpstreamResumeResponseExtensionFields;

  constructor(data?: PartialMessage<UpstreamResumeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamResumeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "assigned_stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 4, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "extension_fields", kind: "message", T: UpstreamResumeResponseExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamResumeResponse {
    return new UpstreamResumeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamResumeResponse {
    return new UpstreamResumeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamResumeResponse {
    return new UpstreamResumeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamResumeResponse | PlainMessage<UpstreamResumeResponse> | undefined, b: UpstreamResumeResponse | PlainMessage<UpstreamResumeResponse> | undefined): boolean {
    return proto3.util.equals(UpstreamResumeResponse, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamCloseRequest
 */
export class UpstreamCloseRequest extends Message<UpstreamCloseRequest> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: bytes stream_id = 2;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: uint64 total_data_points = 3;
   */
  totalDataPoints = protoInt64.zero;

  /**
   * @generated from field: uint32 final_sequence_number = 4;
   */
  finalSequenceNumber = 0;

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamCloseRequestExtensionFields extension_fields = 5;
   */
  extensionFields?: UpstreamCloseRequestExtensionFields;

  constructor(data?: PartialMessage<UpstreamCloseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamCloseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "total_data_points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "final_sequence_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "extension_fields", kind: "message", T: UpstreamCloseRequestExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamCloseRequest {
    return new UpstreamCloseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamCloseRequest {
    return new UpstreamCloseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamCloseRequest {
    return new UpstreamCloseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamCloseRequest | PlainMessage<UpstreamCloseRequest> | undefined, b: UpstreamCloseRequest | PlainMessage<UpstreamCloseRequest> | undefined): boolean {
    return proto3.util.equals(UpstreamCloseRequest, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamCloseResponse
 */
export class UpstreamCloseResponse extends Message<UpstreamCloseResponse> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 2;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 3;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamCloseResponseExtensionFields extension_fields = 4;
   */
  extensionFields?: UpstreamCloseResponseExtensionFields;

  constructor(data?: PartialMessage<UpstreamCloseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamCloseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 3, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension_fields", kind: "message", T: UpstreamCloseResponseExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamCloseResponse {
    return new UpstreamCloseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamCloseResponse {
    return new UpstreamCloseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamCloseResponse {
    return new UpstreamCloseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamCloseResponse | PlainMessage<UpstreamCloseResponse> | undefined, b: UpstreamCloseResponse | PlainMessage<UpstreamCloseResponse> | undefined): boolean {
    return proto3.util.equals(UpstreamCloseResponse, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamChunk
 */
export class UpstreamChunk extends Message<UpstreamChunk> {
  /**
   * @generated from field: uint32 stream_id_alias = 1;
   */
  streamIdAlias = 0;

  /**
   * @generated from field: iscp2.v1.StreamChunk stream_chunk = 2;
   */
  streamChunk?: StreamChunk;

  /**
   * @generated from field: repeated iscp2.v1.DataID data_ids = 3;
   */
  dataIds: DataID[] = [];

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4;
   */
  extensionFields?: UpstreamChunkExtensionFields;

  constructor(data?: PartialMessage<UpstreamChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "stream_chunk", kind: "message", T: StreamChunk },
    { no: 3, name: "data_ids", kind: "message", T: DataID, repeated: true },
    { no: 4, name: "extension_fields", kind: "message", T: UpstreamChunkExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamChunk {
    return new UpstreamChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamChunk {
    return new UpstreamChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamChunk {
    return new UpstreamChunk().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamChunk | PlainMessage<UpstreamChunk> | undefined, b: UpstreamChunk | PlainMessage<UpstreamChunk> | undefined): boolean {
    return proto3.util.equals(UpstreamChunk, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamChunkAck
 */
export class UpstreamChunkAck extends Message<UpstreamChunkAck> {
  /**
   * @generated from field: uint32 stream_id_alias = 1;
   */
  streamIdAlias = 0;

  /**
   * @generated from field: repeated iscp2.v1.UpstreamChunkResult results = 2;
   */
  results: UpstreamChunkResult[] = [];

  /**
   * @generated from field: map<uint32, iscp2.v1.DataID> data_id_aliases = 3;
   */
  dataIdAliases: { [key: number]: DataID } = {};

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamChunkAckExtensionFields extension_fields = 4;
   */
  extensionFields?: UpstreamChunkAckExtensionFields;

  constructor(data?: PartialMessage<UpstreamChunkAck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamChunkAck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "results", kind: "message", T: UpstreamChunkResult, repeated: true },
    { no: 3, name: "data_id_aliases", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: DataID} },
    { no: 4, name: "extension_fields", kind: "message", T: UpstreamChunkAckExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamChunkAck {
    return new UpstreamChunkAck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamChunkAck {
    return new UpstreamChunkAck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamChunkAck {
    return new UpstreamChunkAck().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamChunkAck | PlainMessage<UpstreamChunkAck> | undefined, b: UpstreamChunkAck | PlainMessage<UpstreamChunkAck> | undefined): boolean {
    return proto3.util.equals(UpstreamChunkAck, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamMetadata
 */
export class UpstreamMetadata extends Message<UpstreamMetadata> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from oneof iscp2.v1.UpstreamMetadata.metadata
   */
  metadata: {
    /**
     * @generated from field: iscp2.v1.BaseTime base_time = 2;
     */
    value: BaseTime;
    case: "baseTime";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamMetadataExtensionFields extension_fields = 4;
   */
  extensionFields?: UpstreamMetadataExtensionFields;

  constructor(data?: PartialMessage<UpstreamMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "base_time", kind: "message", T: BaseTime, oneof: "metadata" },
    { no: 4, name: "extension_fields", kind: "message", T: UpstreamMetadataExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamMetadata {
    return new UpstreamMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamMetadata {
    return new UpstreamMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamMetadata {
    return new UpstreamMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamMetadata | PlainMessage<UpstreamMetadata> | undefined, b: UpstreamMetadata | PlainMessage<UpstreamMetadata> | undefined): boolean {
    return proto3.util.equals(UpstreamMetadata, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamMetadataAck
 */
export class UpstreamMetadataAck extends Message<UpstreamMetadataAck> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 2;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 3;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamMetadataAckExtensionFields extension_fields = 4;
   */
  extensionFields?: UpstreamMetadataAckExtensionFields;

  constructor(data?: PartialMessage<UpstreamMetadataAck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamMetadataAck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 3, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension_fields", kind: "message", T: UpstreamMetadataAckExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamMetadataAck {
    return new UpstreamMetadataAck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamMetadataAck {
    return new UpstreamMetadataAck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamMetadataAck {
    return new UpstreamMetadataAck().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamMetadataAck | PlainMessage<UpstreamMetadataAck> | undefined, b: UpstreamMetadataAck | PlainMessage<UpstreamMetadataAck> | undefined): boolean {
    return proto3.util.equals(UpstreamMetadataAck, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamChunkResult
 */
export class UpstreamChunkResult extends Message<UpstreamChunkResult> {
  /**
   * @generated from field: uint32 sequence_number = 1;
   */
  sequenceNumber = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 2;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 3;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.UpstreamChunkResultExtensionFields extension_fields = 4;
   */
  extensionFields?: UpstreamChunkResultExtensionFields;

  constructor(data?: PartialMessage<UpstreamChunkResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamChunkResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 3, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension_fields", kind: "message", T: UpstreamChunkResultExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamChunkResult {
    return new UpstreamChunkResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamChunkResult {
    return new UpstreamChunkResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamChunkResult {
    return new UpstreamChunkResult().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamChunkResult | PlainMessage<UpstreamChunkResult> | undefined, b: UpstreamChunkResult | PlainMessage<UpstreamChunkResult> | undefined): boolean {
    return proto3.util.equals(UpstreamChunkResult, a, b);
  }
}

