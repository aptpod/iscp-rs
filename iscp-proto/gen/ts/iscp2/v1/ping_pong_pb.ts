// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/ping_pong.proto (package iscp2.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PingExtensionFields, PongExtensionFields } from "./extensions/ping_pong_pb.js";

/**
 * @generated from message iscp2.v1.Ping
 */
export class Ping extends Message<Ping> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.extensions.PingExtensionFields extension_fields = 2;
   */
  extensionFields?: PingExtensionFields;

  constructor(data?: PartialMessage<Ping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.Ping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "extension_fields", kind: "message", T: PingExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ping {
    return new Ping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ping {
    return new Ping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ping {
    return new Ping().fromJsonString(jsonString, options);
  }

  static equals(a: Ping | PlainMessage<Ping> | undefined, b: Ping | PlainMessage<Ping> | undefined): boolean {
    return proto3.util.equals(Ping, a, b);
  }
}

/**
 * @generated from message iscp2.v1.Pong
 */
export class Pong extends Message<Pong> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.extensions.PongExtensionFields extension_fields = 2;
   */
  extensionFields?: PongExtensionFields;

  constructor(data?: PartialMessage<Pong>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.Pong";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "extension_fields", kind: "message", T: PongExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pong {
    return new Pong().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pong {
    return new Pong().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pong {
    return new Pong().fromJsonString(jsonString, options);
  }

  static equals(a: Pong | PlainMessage<Pong> | undefined, b: Pong | PlainMessage<Pong> | undefined): boolean {
    return proto3.util.equals(Pong, a, b);
  }
}

