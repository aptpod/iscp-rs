// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/message.proto (package iscp2.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";
import { ConnectRequest, ConnectResponse, Disconnect } from "./connection_pb.js";
import { UpstreamChunk, UpstreamChunkAck, UpstreamCloseRequest, UpstreamCloseResponse, UpstreamMetadata, UpstreamMetadataAck, UpstreamOpenRequest, UpstreamOpenResponse, UpstreamResumeRequest, UpstreamResumeResponse } from "./upstream_pb.js";
import { DownstreamChunk, DownstreamChunkAck, DownstreamChunkAckComplete, DownstreamCloseRequest, DownstreamCloseResponse, DownstreamMetadata, DownstreamMetadataAck, DownstreamOpenRequest, DownstreamOpenResponse, DownstreamResumeRequest, DownstreamResumeResponse } from "./downstream_pb.js";
import { Ping, Pong } from "./ping_pong_pb.js";
import { DownstreamCall, UpstreamCall, UpstreamCallAck } from "./e2e_call_pb.js";

/**
 * @generated from message iscp2.v1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from oneof iscp2.v1.Message.message
   */
  message: {
    /**
     * Connect
     *
     * @generated from field: iscp2.v1.ConnectRequest connect_request = 1;
     */
    value: ConnectRequest;
    case: "connectRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.ConnectResponse connect_response = 2;
     */
    value: ConnectResponse;
    case: "connectResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.Disconnect disconnect = 3;
     */
    value: Disconnect;
    case: "disconnect";
  } | {
    /**
     * Upstream
     *
     * @generated from field: iscp2.v1.UpstreamOpenRequest upstream_open_request = 64;
     */
    value: UpstreamOpenRequest;
    case: "upstreamOpenRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamOpenResponse upstream_open_response = 65;
     */
    value: UpstreamOpenResponse;
    case: "upstreamOpenResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamResumeRequest upstream_resume_request = 66;
     */
    value: UpstreamResumeRequest;
    case: "upstreamResumeRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamResumeResponse upstream_resume_response = 67;
     */
    value: UpstreamResumeResponse;
    case: "upstreamResumeResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamCloseRequest upstream_close_request = 68;
     */
    value: UpstreamCloseRequest;
    case: "upstreamCloseRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamCloseResponse upstream_close_response = 69;
     */
    value: UpstreamCloseResponse;
    case: "upstreamCloseResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamChunk upstream_chunk = 70;
     */
    value: UpstreamChunk;
    case: "upstreamChunk";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamChunkAck upstream_chunk_ack = 71;
     */
    value: UpstreamChunkAck;
    case: "upstreamChunkAck";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamMetadata upstream_metadata = 72;
     */
    value: UpstreamMetadata;
    case: "upstreamMetadata";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamMetadataAck upstream_metadata_ack = 73;
     */
    value: UpstreamMetadataAck;
    case: "upstreamMetadataAck";
  } | {
    /**
     * Downstream
     *
     * @generated from field: iscp2.v1.DownstreamOpenRequest downstream_open_request = 128;
     */
    value: DownstreamOpenRequest;
    case: "downstreamOpenRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamOpenResponse downstream_open_response = 129;
     */
    value: DownstreamOpenResponse;
    case: "downstreamOpenResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamResumeRequest downstream_resume_request = 130;
     */
    value: DownstreamResumeRequest;
    case: "downstreamResumeRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamResumeResponse downstream_resume_response = 131;
     */
    value: DownstreamResumeResponse;
    case: "downstreamResumeResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamCloseRequest downstream_close_request = 132;
     */
    value: DownstreamCloseRequest;
    case: "downstreamCloseRequest";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamCloseResponse downstream_close_response = 133;
     */
    value: DownstreamCloseResponse;
    case: "downstreamCloseResponse";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamChunk downstream_chunk = 134;
     */
    value: DownstreamChunk;
    case: "downstreamChunk";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamChunkAck downstream_chunk_ack = 135;
     */
    value: DownstreamChunkAck;
    case: "downstreamChunkAck";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamChunkAckComplete downstream_chunk_ack_complete = 136;
     */
    value: DownstreamChunkAckComplete;
    case: "downstreamChunkAckComplete";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamMetadata downstream_metadata = 137;
     */
    value: DownstreamMetadata;
    case: "downstreamMetadata";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamMetadataAck downstream_metadata_ack = 138;
     */
    value: DownstreamMetadataAck;
    case: "downstreamMetadataAck";
  } | {
    /**
     * Ping/Pong
     *
     * @generated from field: iscp2.v1.Ping ping = 192;
     */
    value: Ping;
    case: "ping";
  } | {
    /**
     * @generated from field: iscp2.v1.Pong pong = 193;
     */
    value: Pong;
    case: "pong";
  } | {
    /**
     * E2E Call
     *
     * @generated from field: iscp2.v1.UpstreamCall upstream_call = 256;
     */
    value: UpstreamCall;
    case: "upstreamCall";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamCallAck upstream_call_ack = 257;
     */
    value: UpstreamCallAck;
    case: "upstreamCallAck";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamCall downstream_call = 258;
     */
    value: DownstreamCall;
    case: "downstreamCall";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connect_request", kind: "message", T: ConnectRequest, oneof: "message" },
    { no: 2, name: "connect_response", kind: "message", T: ConnectResponse, oneof: "message" },
    { no: 3, name: "disconnect", kind: "message", T: Disconnect, oneof: "message" },
    { no: 64, name: "upstream_open_request", kind: "message", T: UpstreamOpenRequest, oneof: "message" },
    { no: 65, name: "upstream_open_response", kind: "message", T: UpstreamOpenResponse, oneof: "message" },
    { no: 66, name: "upstream_resume_request", kind: "message", T: UpstreamResumeRequest, oneof: "message" },
    { no: 67, name: "upstream_resume_response", kind: "message", T: UpstreamResumeResponse, oneof: "message" },
    { no: 68, name: "upstream_close_request", kind: "message", T: UpstreamCloseRequest, oneof: "message" },
    { no: 69, name: "upstream_close_response", kind: "message", T: UpstreamCloseResponse, oneof: "message" },
    { no: 70, name: "upstream_chunk", kind: "message", T: UpstreamChunk, oneof: "message" },
    { no: 71, name: "upstream_chunk_ack", kind: "message", T: UpstreamChunkAck, oneof: "message" },
    { no: 72, name: "upstream_metadata", kind: "message", T: UpstreamMetadata, oneof: "message" },
    { no: 73, name: "upstream_metadata_ack", kind: "message", T: UpstreamMetadataAck, oneof: "message" },
    { no: 128, name: "downstream_open_request", kind: "message", T: DownstreamOpenRequest, oneof: "message" },
    { no: 129, name: "downstream_open_response", kind: "message", T: DownstreamOpenResponse, oneof: "message" },
    { no: 130, name: "downstream_resume_request", kind: "message", T: DownstreamResumeRequest, oneof: "message" },
    { no: 131, name: "downstream_resume_response", kind: "message", T: DownstreamResumeResponse, oneof: "message" },
    { no: 132, name: "downstream_close_request", kind: "message", T: DownstreamCloseRequest, oneof: "message" },
    { no: 133, name: "downstream_close_response", kind: "message", T: DownstreamCloseResponse, oneof: "message" },
    { no: 134, name: "downstream_chunk", kind: "message", T: DownstreamChunk, oneof: "message" },
    { no: 135, name: "downstream_chunk_ack", kind: "message", T: DownstreamChunkAck, oneof: "message" },
    { no: 136, name: "downstream_chunk_ack_complete", kind: "message", T: DownstreamChunkAckComplete, oneof: "message" },
    { no: 137, name: "downstream_metadata", kind: "message", T: DownstreamMetadata, oneof: "message" },
    { no: 138, name: "downstream_metadata_ack", kind: "message", T: DownstreamMetadataAck, oneof: "message" },
    { no: 192, name: "ping", kind: "message", T: Ping, oneof: "message" },
    { no: 193, name: "pong", kind: "message", T: Pong, oneof: "message" },
    { no: 256, name: "upstream_call", kind: "message", T: UpstreamCall, oneof: "message" },
    { no: 257, name: "upstream_call_ack", kind: "message", T: UpstreamCallAck, oneof: "message" },
    { no: 258, name: "downstream_call", kind: "message", T: DownstreamCall, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

