// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/common.proto (package iscp2.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum iscp2.v1.QoS
 */
export enum QoS {
  /**
   * @generated from enum value: UNRELIABLE = 0;
   */
  UNRELIABLE = 0,

  /**
   * @generated from enum value: RELIABLE = 1;
   */
  RELIABLE = 1,

  /**
   * @generated from enum value: PARTIAL = 2;
   */
  PARTIAL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(QoS)
proto3.util.setEnumType(QoS, "iscp2.v1.QoS", [
  { no: 0, name: "UNRELIABLE" },
  { no: 1, name: "RELIABLE" },
  { no: 2, name: "PARTIAL" },
]);

/**
 * @generated from message iscp2.v1.StreamChunk
 */
export class StreamChunk extends Message<StreamChunk> {
  /**
   * @generated from field: uint32 sequence_number = 1;
   */
  sequenceNumber = 0;

  /**
   * @generated from field: repeated iscp2.v1.DataPointGroup data_point_groups = 2;
   */
  dataPointGroups: DataPointGroup[] = [];

  constructor(data?: PartialMessage<StreamChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.StreamChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data_point_groups", kind: "message", T: DataPointGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChunk {
    return new StreamChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChunk {
    return new StreamChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChunk {
    return new StreamChunk().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChunk | PlainMessage<StreamChunk> | undefined, b: StreamChunk | PlainMessage<StreamChunk> | undefined): boolean {
    return proto3.util.equals(StreamChunk, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DataPointGroup
 */
export class DataPointGroup extends Message<DataPointGroup> {
  /**
   * @generated from oneof iscp2.v1.DataPointGroup.data_id_or_alias
   */
  dataIdOrAlias: {
    /**
     * @generated from field: iscp2.v1.DataID data_id = 1;
     */
    value: DataID;
    case: "dataId";
  } | {
    /**
     * @generated from field: uint32 data_id_alias = 2;
     */
    value: number;
    case: "dataIdAlias";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated iscp2.v1.DataPoint data_points = 3;
   */
  dataPoints: DataPoint[] = [];

  constructor(data?: PartialMessage<DataPointGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DataPointGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_id", kind: "message", T: DataID, oneof: "data_id_or_alias" },
    { no: 2, name: "data_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "data_id_or_alias" },
    { no: 3, name: "data_points", kind: "message", T: DataPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPointGroup {
    return new DataPointGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPointGroup {
    return new DataPointGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPointGroup {
    return new DataPointGroup().fromJsonString(jsonString, options);
  }

  static equals(a: DataPointGroup | PlainMessage<DataPointGroup> | undefined, b: DataPointGroup | PlainMessage<DataPointGroup> | undefined): boolean {
    return proto3.util.equals(DataPointGroup, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DataPoint
 */
export class DataPoint extends Message<DataPoint> {
  /**
   * @generated from field: sint64 elapsed_time = 1;
   */
  elapsedTime = protoInt64.zero;

  /**
   * @generated from field: bytes payload = 2;
   */
  payload = new Uint8Array(0);

  constructor(data?: PartialMessage<DataPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DataPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "elapsed_time", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 2, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPoint {
    return new DataPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPoint {
    return new DataPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPoint {
    return new DataPoint().fromJsonString(jsonString, options);
  }

  static equals(a: DataPoint | PlainMessage<DataPoint> | undefined, b: DataPoint | PlainMessage<DataPoint> | undefined): boolean {
    return proto3.util.equals(DataPoint, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DataID
 */
export class DataID extends Message<DataID> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<DataID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DataID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataID {
    return new DataID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataID {
    return new DataID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataID {
    return new DataID().fromJsonString(jsonString, options);
  }

  static equals(a: DataID | PlainMessage<DataID> | undefined, b: DataID | PlainMessage<DataID> | undefined): boolean {
    return proto3.util.equals(DataID, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamFilter
 */
export class DownstreamFilter extends Message<DownstreamFilter> {
  /**
   * @generated from field: string source_node_id = 1;
   */
  sourceNodeId = "";

  /**
   * @generated from field: repeated iscp2.v1.DataFilter data_filters = 2;
   */
  dataFilters: DataFilter[] = [];

  constructor(data?: PartialMessage<DownstreamFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data_filters", kind: "message", T: DataFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamFilter {
    return new DownstreamFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamFilter {
    return new DownstreamFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamFilter {
    return new DownstreamFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamFilter | PlainMessage<DownstreamFilter> | undefined, b: DownstreamFilter | PlainMessage<DownstreamFilter> | undefined): boolean {
    return proto3.util.equals(DownstreamFilter, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DataFilter
 */
export class DataFilter extends Message<DataFilter> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<DataFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DataFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataFilter {
    return new DataFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataFilter {
    return new DataFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataFilter {
    return new DataFilter().fromJsonString(jsonString, options);
  }

  static equals(a: DataFilter | PlainMessage<DataFilter> | undefined, b: DataFilter | PlainMessage<DataFilter> | undefined): boolean {
    return proto3.util.equals(DataFilter, a, b);
  }
}

