// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/downstream.proto (package iscp2.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DataID, DownstreamFilter, QoS, StreamChunk } from "./common_pb.js";
import { DownstreamChunkAckCompleteExtensionFields, DownstreamChunkAckExtensionFields, DownstreamChunkExtensionFields, DownstreamChunkResultExtensionFields, DownstreamCloseRequestExtensionFields, DownstreamCloseResponseExtensionFields, DownstreamMetadataAckExtensionFields, DownstreamMetadataExtensionFields, DownstreamOpenRequestExtensionFields, DownstreamOpenResponseExtensionFields, DownstreamResumeRequestExtensionFields, DownstreamResumeResponseExtensionFields } from "./extensions/downstream_pb.js";
import { ResultCode } from "./result_code_pb.js";
import { BaseTime, DownstreamAbnormalClose, DownstreamNormalClose, DownstreamOpen, DownstreamResume, UpstreamAbnormalClose, UpstreamNormalClose, UpstreamOpen, UpstreamResume } from "./metadata_pb.js";

/**
 * @generated from message iscp2.v1.DownstreamOpenRequest
 */
export class DownstreamOpenRequest extends Message<DownstreamOpenRequest> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: uint32 desired_stream_id_alias = 2;
   */
  desiredStreamIdAlias = 0;

  /**
   * @generated from field: repeated iscp2.v1.DownstreamFilter downstream_filters = 3;
   */
  downstreamFilters: DownstreamFilter[] = [];

  /**
   * @generated from field: uint32 expiry_interval = 4;
   */
  expiryInterval = 0;

  /**
   * @generated from field: map<uint32, iscp2.v1.DataID> data_id_aliases = 5;
   */
  dataIdAliases: { [key: number]: DataID } = {};

  /**
   * @generated from field: iscp2.v1.QoS qos = 6;
   */
  qos = QoS.UNRELIABLE;

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamOpenRequestExtensionFields extension_fields = 7;
   */
  extensionFields?: DownstreamOpenRequestExtensionFields;

  /**
   * @generated from field: bool omit_empty_chunk = 8;
   */
  omitEmptyChunk = false;

  constructor(data?: PartialMessage<DownstreamOpenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamOpenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "desired_stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "downstream_filters", kind: "message", T: DownstreamFilter, repeated: true },
    { no: 4, name: "expiry_interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "data_id_aliases", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: DataID} },
    { no: 6, name: "qos", kind: "enum", T: proto3.getEnumType(QoS) },
    { no: 7, name: "extension_fields", kind: "message", T: DownstreamOpenRequestExtensionFields },
    { no: 8, name: "omit_empty_chunk", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamOpenRequest {
    return new DownstreamOpenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamOpenRequest {
    return new DownstreamOpenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamOpenRequest {
    return new DownstreamOpenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamOpenRequest | PlainMessage<DownstreamOpenRequest> | undefined, b: DownstreamOpenRequest | PlainMessage<DownstreamOpenRequest> | undefined): boolean {
    return proto3.util.equals(DownstreamOpenRequest, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamOpenResponse
 */
export class DownstreamOpenResponse extends Message<DownstreamOpenResponse> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: bytes assigned_stream_id = 2;
   */
  assignedStreamId = new Uint8Array(0);

  /**
   * @generated from field: sint64 server_time = 3;
   */
  serverTime = protoInt64.zero;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 4;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 5;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamOpenResponseExtensionFields extension_fields = 6;
   */
  extensionFields?: DownstreamOpenResponseExtensionFields;

  constructor(data?: PartialMessage<DownstreamOpenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamOpenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "assigned_stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "server_time", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 4, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 5, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "extension_fields", kind: "message", T: DownstreamOpenResponseExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamOpenResponse {
    return new DownstreamOpenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamOpenResponse {
    return new DownstreamOpenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamOpenResponse {
    return new DownstreamOpenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamOpenResponse | PlainMessage<DownstreamOpenResponse> | undefined, b: DownstreamOpenResponse | PlainMessage<DownstreamOpenResponse> | undefined): boolean {
    return proto3.util.equals(DownstreamOpenResponse, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamResumeRequest
 */
export class DownstreamResumeRequest extends Message<DownstreamResumeRequest> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: bytes stream_id = 2;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: uint32 desired_stream_id_alias = 3;
   */
  desiredStreamIdAlias = 0;

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamResumeRequestExtensionFields extension_fields = 4;
   */
  extensionFields?: DownstreamResumeRequestExtensionFields;

  constructor(data?: PartialMessage<DownstreamResumeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamResumeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "desired_stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "extension_fields", kind: "message", T: DownstreamResumeRequestExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamResumeRequest {
    return new DownstreamResumeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamResumeRequest {
    return new DownstreamResumeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamResumeRequest {
    return new DownstreamResumeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamResumeRequest | PlainMessage<DownstreamResumeRequest> | undefined, b: DownstreamResumeRequest | PlainMessage<DownstreamResumeRequest> | undefined): boolean {
    return proto3.util.equals(DownstreamResumeRequest, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamResumeResponse
 */
export class DownstreamResumeResponse extends Message<DownstreamResumeResponse> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 2;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 3;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamResumeResponseExtensionFields extension_fields = 4;
   */
  extensionFields?: DownstreamResumeResponseExtensionFields;

  constructor(data?: PartialMessage<DownstreamResumeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamResumeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 3, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension_fields", kind: "message", T: DownstreamResumeResponseExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamResumeResponse {
    return new DownstreamResumeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamResumeResponse {
    return new DownstreamResumeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamResumeResponse {
    return new DownstreamResumeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamResumeResponse | PlainMessage<DownstreamResumeResponse> | undefined, b: DownstreamResumeResponse | PlainMessage<DownstreamResumeResponse> | undefined): boolean {
    return proto3.util.equals(DownstreamResumeResponse, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamCloseRequest
 */
export class DownstreamCloseRequest extends Message<DownstreamCloseRequest> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: bytes stream_id = 2;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamCloseRequestExtensionFields extension_fields = 3;
   */
  extensionFields?: DownstreamCloseRequestExtensionFields;

  constructor(data?: PartialMessage<DownstreamCloseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamCloseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "extension_fields", kind: "message", T: DownstreamCloseRequestExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamCloseRequest {
    return new DownstreamCloseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamCloseRequest {
    return new DownstreamCloseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamCloseRequest {
    return new DownstreamCloseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamCloseRequest | PlainMessage<DownstreamCloseRequest> | undefined, b: DownstreamCloseRequest | PlainMessage<DownstreamCloseRequest> | undefined): boolean {
    return proto3.util.equals(DownstreamCloseRequest, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamCloseResponse
 */
export class DownstreamCloseResponse extends Message<DownstreamCloseResponse> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 2;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 3;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamCloseResponseExtensionFields extension_fields = 4;
   */
  extensionFields?: DownstreamCloseResponseExtensionFields;

  constructor(data?: PartialMessage<DownstreamCloseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamCloseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 3, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension_fields", kind: "message", T: DownstreamCloseResponseExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamCloseResponse {
    return new DownstreamCloseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamCloseResponse {
    return new DownstreamCloseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamCloseResponse {
    return new DownstreamCloseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamCloseResponse | PlainMessage<DownstreamCloseResponse> | undefined, b: DownstreamCloseResponse | PlainMessage<DownstreamCloseResponse> | undefined): boolean {
    return proto3.util.equals(DownstreamCloseResponse, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamChunk
 */
export class DownstreamChunk extends Message<DownstreamChunk> {
  /**
   * @generated from field: uint32 stream_id_alias = 1;
   */
  streamIdAlias = 0;

  /**
   * @generated from oneof iscp2.v1.DownstreamChunk.upstream_or_alias
   */
  upstreamOrAlias: {
    /**
     * @generated from field: iscp2.v1.UpstreamInfo upstream_info = 2;
     */
    value: UpstreamInfo;
    case: "upstreamInfo";
  } | {
    /**
     * @generated from field: uint32 upstream_alias = 3;
     */
    value: number;
    case: "upstreamAlias";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: iscp2.v1.StreamChunk stream_chunk = 4;
   */
  streamChunk?: StreamChunk;

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamChunkExtensionFields extension_fields = 5;
   */
  extensionFields?: DownstreamChunkExtensionFields;

  constructor(data?: PartialMessage<DownstreamChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "upstream_info", kind: "message", T: UpstreamInfo, oneof: "upstream_or_alias" },
    { no: 3, name: "upstream_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "upstream_or_alias" },
    { no: 4, name: "stream_chunk", kind: "message", T: StreamChunk },
    { no: 5, name: "extension_fields", kind: "message", T: DownstreamChunkExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunk {
    return new DownstreamChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunk {
    return new DownstreamChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunk {
    return new DownstreamChunk().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunk | PlainMessage<DownstreamChunk> | undefined, b: DownstreamChunk | PlainMessage<DownstreamChunk> | undefined): boolean {
    return proto3.util.equals(DownstreamChunk, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamChunkAck
 */
export class DownstreamChunkAck extends Message<DownstreamChunkAck> {
  /**
   * @generated from field: uint32 stream_id_alias = 1;
   */
  streamIdAlias = 0;

  /**
   * @generated from field: uint32 ack_id = 2;
   */
  ackId = 0;

  /**
   * @generated from field: repeated iscp2.v1.DownstreamChunkResult results = 3;
   */
  results: DownstreamChunkResult[] = [];

  /**
   * @generated from field: map<uint32, iscp2.v1.UpstreamInfo> upstream_aliases = 4;
   */
  upstreamAliases: { [key: number]: UpstreamInfo } = {};

  /**
   * @generated from field: map<uint32, iscp2.v1.DataID> data_id_aliases = 5;
   */
  dataIdAliases: { [key: number]: DataID } = {};

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6;
   */
  extensionFields?: DownstreamChunkAckExtensionFields;

  constructor(data?: PartialMessage<DownstreamChunkAck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamChunkAck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "ack_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "results", kind: "message", T: DownstreamChunkResult, repeated: true },
    { no: 4, name: "upstream_aliases", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: UpstreamInfo} },
    { no: 5, name: "data_id_aliases", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: DataID} },
    { no: 6, name: "extension_fields", kind: "message", T: DownstreamChunkAckExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkAck {
    return new DownstreamChunkAck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkAck {
    return new DownstreamChunkAck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkAck {
    return new DownstreamChunkAck().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkAck | PlainMessage<DownstreamChunkAck> | undefined, b: DownstreamChunkAck | PlainMessage<DownstreamChunkAck> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkAck, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamChunkAckComplete
 */
export class DownstreamChunkAckComplete extends Message<DownstreamChunkAckComplete> {
  /**
   * @generated from field: uint32 stream_id_alias = 1;
   */
  streamIdAlias = 0;

  /**
   * @generated from field: uint32 ack_id = 2;
   */
  ackId = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 3;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 4;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamChunkAckCompleteExtensionFields extension_fields = 5;
   */
  extensionFields?: DownstreamChunkAckCompleteExtensionFields;

  constructor(data?: PartialMessage<DownstreamChunkAckComplete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamChunkAckComplete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "ack_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 4, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "extension_fields", kind: "message", T: DownstreamChunkAckCompleteExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkAckComplete {
    return new DownstreamChunkAckComplete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkAckComplete {
    return new DownstreamChunkAckComplete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkAckComplete {
    return new DownstreamChunkAckComplete().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkAckComplete | PlainMessage<DownstreamChunkAckComplete> | undefined, b: DownstreamChunkAckComplete | PlainMessage<DownstreamChunkAckComplete> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkAckComplete, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamMetadata
 */
export class DownstreamMetadata extends Message<DownstreamMetadata> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: uint32 stream_id_alias = 13;
   */
  streamIdAlias = 0;

  /**
   * @generated from oneof iscp2.v1.DownstreamMetadata.metadata
   */
  metadata: {
    /**
     * @generated from field: iscp2.v1.BaseTime base_time = 2;
     */
    value: BaseTime;
    case: "baseTime";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamOpen upstream_open = 3;
     */
    value: UpstreamOpen;
    case: "upstreamOpen";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamAbnormalClose upstream_abnormal_close = 4;
     */
    value: UpstreamAbnormalClose;
    case: "upstreamAbnormalClose";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamResume upstream_resume = 5;
     */
    value: UpstreamResume;
    case: "upstreamResume";
  } | {
    /**
     * @generated from field: iscp2.v1.UpstreamNormalClose upstream_normal_close = 6;
     */
    value: UpstreamNormalClose;
    case: "upstreamNormalClose";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamOpen downstream_open = 7;
     */
    value: DownstreamOpen;
    case: "downstreamOpen";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamAbnormalClose downstream_abnormal_close = 8;
     */
    value: DownstreamAbnormalClose;
    case: "downstreamAbnormalClose";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamResume downstream_resume = 9;
     */
    value: DownstreamResume;
    case: "downstreamResume";
  } | {
    /**
     * @generated from field: iscp2.v1.DownstreamNormalClose downstream_normal_close = 10;
     */
    value: DownstreamNormalClose;
    case: "downstreamNormalClose";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string source_node_id = 11;
   */
  sourceNodeId = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamMetadataExtensionFields extension_fields = 12;
   */
  extensionFields?: DownstreamMetadataExtensionFields;

  constructor(data?: PartialMessage<DownstreamMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "stream_id_alias", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "base_time", kind: "message", T: BaseTime, oneof: "metadata" },
    { no: 3, name: "upstream_open", kind: "message", T: UpstreamOpen, oneof: "metadata" },
    { no: 4, name: "upstream_abnormal_close", kind: "message", T: UpstreamAbnormalClose, oneof: "metadata" },
    { no: 5, name: "upstream_resume", kind: "message", T: UpstreamResume, oneof: "metadata" },
    { no: 6, name: "upstream_normal_close", kind: "message", T: UpstreamNormalClose, oneof: "metadata" },
    { no: 7, name: "downstream_open", kind: "message", T: DownstreamOpen, oneof: "metadata" },
    { no: 8, name: "downstream_abnormal_close", kind: "message", T: DownstreamAbnormalClose, oneof: "metadata" },
    { no: 9, name: "downstream_resume", kind: "message", T: DownstreamResume, oneof: "metadata" },
    { no: 10, name: "downstream_normal_close", kind: "message", T: DownstreamNormalClose, oneof: "metadata" },
    { no: 11, name: "source_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "extension_fields", kind: "message", T: DownstreamMetadataExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamMetadata {
    return new DownstreamMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamMetadata {
    return new DownstreamMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamMetadata {
    return new DownstreamMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamMetadata | PlainMessage<DownstreamMetadata> | undefined, b: DownstreamMetadata | PlainMessage<DownstreamMetadata> | undefined): boolean {
    return proto3.util.equals(DownstreamMetadata, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamMetadataAck
 */
export class DownstreamMetadataAck extends Message<DownstreamMetadataAck> {
  /**
   * @generated from field: uint32 request_id = 1;
   */
  requestId = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 2;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 3;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamMetadataAckExtensionFields extension_fields = 4;
   */
  extensionFields?: DownstreamMetadataAckExtensionFields;

  constructor(data?: PartialMessage<DownstreamMetadataAck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamMetadataAck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 3, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "extension_fields", kind: "message", T: DownstreamMetadataAckExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamMetadataAck {
    return new DownstreamMetadataAck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamMetadataAck {
    return new DownstreamMetadataAck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamMetadataAck {
    return new DownstreamMetadataAck().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamMetadataAck | PlainMessage<DownstreamMetadataAck> | undefined, b: DownstreamMetadataAck | PlainMessage<DownstreamMetadataAck> | undefined): boolean {
    return proto3.util.equals(DownstreamMetadataAck, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamInfo
 */
export class UpstreamInfo extends Message<UpstreamInfo> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: bytes stream_id = 2;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: string source_node_id = 3;
   */
  sourceNodeId = "";

  constructor(data?: PartialMessage<UpstreamInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "source_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamInfo {
    return new UpstreamInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamInfo {
    return new UpstreamInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamInfo {
    return new UpstreamInfo().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamInfo | PlainMessage<UpstreamInfo> | undefined, b: UpstreamInfo | PlainMessage<UpstreamInfo> | undefined): boolean {
    return proto3.util.equals(UpstreamInfo, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamChunkResult
 */
export class DownstreamChunkResult extends Message<DownstreamChunkResult> {
  /**
   * @generated from field: bytes stream_id_of_upstream = 1;
   */
  streamIdOfUpstream = new Uint8Array(0);

  /**
   * @generated from field: uint32 sequence_number_in_upstream = 2;
   */
  sequenceNumberInUpstream = 0;

  /**
   * @generated from field: iscp2.v1.ResultCode result_code = 3;
   */
  resultCode = ResultCode.SUCCEEDED;

  /**
   * @generated from field: string result_string = 4;
   */
  resultString = "";

  /**
   * @generated from field: iscp2.v1.extensions.DownstreamChunkResultExtensionFields extension_fields = 5;
   */
  extensionFields?: DownstreamChunkResultExtensionFields;

  constructor(data?: PartialMessage<DownstreamChunkResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamChunkResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id_of_upstream", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "sequence_number_in_upstream", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "result_code", kind: "enum", T: proto3.getEnumType(ResultCode) },
    { no: 4, name: "result_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "extension_fields", kind: "message", T: DownstreamChunkResultExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkResult {
    return new DownstreamChunkResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkResult {
    return new DownstreamChunkResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkResult {
    return new DownstreamChunkResult().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkResult | PlainMessage<DownstreamChunkResult> | undefined, b: DownstreamChunkResult | PlainMessage<DownstreamChunkResult> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkResult, a, b);
  }
}

