// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/extensions/downstream.proto (package iscp2.v1.extensions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message iscp2.v1.extensions.DownstreamOpenRequestExtensionFields
 */
export class DownstreamOpenRequestExtensionFields extends Message<DownstreamOpenRequestExtensionFields> {
  constructor(data?: PartialMessage<DownstreamOpenRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamOpenRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamOpenRequestExtensionFields {
    return new DownstreamOpenRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamOpenRequestExtensionFields {
    return new DownstreamOpenRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamOpenRequestExtensionFields {
    return new DownstreamOpenRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamOpenRequestExtensionFields | PlainMessage<DownstreamOpenRequestExtensionFields> | undefined, b: DownstreamOpenRequestExtensionFields | PlainMessage<DownstreamOpenRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamOpenRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamOpenResponseExtensionFields
 */
export class DownstreamOpenResponseExtensionFields extends Message<DownstreamOpenResponseExtensionFields> {
  constructor(data?: PartialMessage<DownstreamOpenResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamOpenResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamOpenResponseExtensionFields {
    return new DownstreamOpenResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamOpenResponseExtensionFields {
    return new DownstreamOpenResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamOpenResponseExtensionFields {
    return new DownstreamOpenResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamOpenResponseExtensionFields | PlainMessage<DownstreamOpenResponseExtensionFields> | undefined, b: DownstreamOpenResponseExtensionFields | PlainMessage<DownstreamOpenResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamOpenResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamResumeRequestExtensionFields
 */
export class DownstreamResumeRequestExtensionFields extends Message<DownstreamResumeRequestExtensionFields> {
  constructor(data?: PartialMessage<DownstreamResumeRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamResumeRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamResumeRequestExtensionFields {
    return new DownstreamResumeRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamResumeRequestExtensionFields {
    return new DownstreamResumeRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamResumeRequestExtensionFields {
    return new DownstreamResumeRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamResumeRequestExtensionFields | PlainMessage<DownstreamResumeRequestExtensionFields> | undefined, b: DownstreamResumeRequestExtensionFields | PlainMessage<DownstreamResumeRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamResumeRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamResumeResponseExtensionFields
 */
export class DownstreamResumeResponseExtensionFields extends Message<DownstreamResumeResponseExtensionFields> {
  constructor(data?: PartialMessage<DownstreamResumeResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamResumeResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamResumeResponseExtensionFields {
    return new DownstreamResumeResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamResumeResponseExtensionFields {
    return new DownstreamResumeResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamResumeResponseExtensionFields {
    return new DownstreamResumeResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamResumeResponseExtensionFields | PlainMessage<DownstreamResumeResponseExtensionFields> | undefined, b: DownstreamResumeResponseExtensionFields | PlainMessage<DownstreamResumeResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamResumeResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamCloseRequestExtensionFields
 */
export class DownstreamCloseRequestExtensionFields extends Message<DownstreamCloseRequestExtensionFields> {
  constructor(data?: PartialMessage<DownstreamCloseRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamCloseRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamCloseRequestExtensionFields {
    return new DownstreamCloseRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamCloseRequestExtensionFields {
    return new DownstreamCloseRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamCloseRequestExtensionFields {
    return new DownstreamCloseRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamCloseRequestExtensionFields | PlainMessage<DownstreamCloseRequestExtensionFields> | undefined, b: DownstreamCloseRequestExtensionFields | PlainMessage<DownstreamCloseRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamCloseRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamCloseResponseExtensionFields
 */
export class DownstreamCloseResponseExtensionFields extends Message<DownstreamCloseResponseExtensionFields> {
  constructor(data?: PartialMessage<DownstreamCloseResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamCloseResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamCloseResponseExtensionFields {
    return new DownstreamCloseResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamCloseResponseExtensionFields {
    return new DownstreamCloseResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamCloseResponseExtensionFields {
    return new DownstreamCloseResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamCloseResponseExtensionFields | PlainMessage<DownstreamCloseResponseExtensionFields> | undefined, b: DownstreamCloseResponseExtensionFields | PlainMessage<DownstreamCloseResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamCloseResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamChunkExtensionFields
 */
export class DownstreamChunkExtensionFields extends Message<DownstreamChunkExtensionFields> {
  constructor(data?: PartialMessage<DownstreamChunkExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamChunkExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkExtensionFields {
    return new DownstreamChunkExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkExtensionFields {
    return new DownstreamChunkExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkExtensionFields {
    return new DownstreamChunkExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkExtensionFields | PlainMessage<DownstreamChunkExtensionFields> | undefined, b: DownstreamChunkExtensionFields | PlainMessage<DownstreamChunkExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamChunkAckExtensionFields
 */
export class DownstreamChunkAckExtensionFields extends Message<DownstreamChunkAckExtensionFields> {
  constructor(data?: PartialMessage<DownstreamChunkAckExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamChunkAckExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkAckExtensionFields {
    return new DownstreamChunkAckExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkAckExtensionFields {
    return new DownstreamChunkAckExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkAckExtensionFields {
    return new DownstreamChunkAckExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkAckExtensionFields | PlainMessage<DownstreamChunkAckExtensionFields> | undefined, b: DownstreamChunkAckExtensionFields | PlainMessage<DownstreamChunkAckExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkAckExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamChunkAckCompleteExtensionFields
 */
export class DownstreamChunkAckCompleteExtensionFields extends Message<DownstreamChunkAckCompleteExtensionFields> {
  constructor(data?: PartialMessage<DownstreamChunkAckCompleteExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamChunkAckCompleteExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkAckCompleteExtensionFields {
    return new DownstreamChunkAckCompleteExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkAckCompleteExtensionFields {
    return new DownstreamChunkAckCompleteExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkAckCompleteExtensionFields {
    return new DownstreamChunkAckCompleteExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkAckCompleteExtensionFields | PlainMessage<DownstreamChunkAckCompleteExtensionFields> | undefined, b: DownstreamChunkAckCompleteExtensionFields | PlainMessage<DownstreamChunkAckCompleteExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkAckCompleteExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamMetadataExtensionFields
 */
export class DownstreamMetadataExtensionFields extends Message<DownstreamMetadataExtensionFields> {
  constructor(data?: PartialMessage<DownstreamMetadataExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamMetadataExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamMetadataExtensionFields {
    return new DownstreamMetadataExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamMetadataExtensionFields {
    return new DownstreamMetadataExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamMetadataExtensionFields {
    return new DownstreamMetadataExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamMetadataExtensionFields | PlainMessage<DownstreamMetadataExtensionFields> | undefined, b: DownstreamMetadataExtensionFields | PlainMessage<DownstreamMetadataExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamMetadataExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamMetadataAckExtensionFields
 */
export class DownstreamMetadataAckExtensionFields extends Message<DownstreamMetadataAckExtensionFields> {
  constructor(data?: PartialMessage<DownstreamMetadataAckExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamMetadataAckExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamMetadataAckExtensionFields {
    return new DownstreamMetadataAckExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamMetadataAckExtensionFields {
    return new DownstreamMetadataAckExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamMetadataAckExtensionFields {
    return new DownstreamMetadataAckExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamMetadataAckExtensionFields | PlainMessage<DownstreamMetadataAckExtensionFields> | undefined, b: DownstreamMetadataAckExtensionFields | PlainMessage<DownstreamMetadataAckExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamMetadataAckExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamChunkResultExtensionFields
 */
export class DownstreamChunkResultExtensionFields extends Message<DownstreamChunkResultExtensionFields> {
  constructor(data?: PartialMessage<DownstreamChunkResultExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamChunkResultExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamChunkResultExtensionFields {
    return new DownstreamChunkResultExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamChunkResultExtensionFields {
    return new DownstreamChunkResultExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamChunkResultExtensionFields {
    return new DownstreamChunkResultExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamChunkResultExtensionFields | PlainMessage<DownstreamChunkResultExtensionFields> | undefined, b: DownstreamChunkResultExtensionFields | PlainMessage<DownstreamChunkResultExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamChunkResultExtensionFields, a, b);
  }
}

