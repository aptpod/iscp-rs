// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/extensions/connection.proto (package iscp2.v1.extensions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message iscp2.v1.extensions.ConnectRequestExtensionFields
 */
export class ConnectRequestExtensionFields extends Message<ConnectRequestExtensionFields> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: iscp2.v1.extensions.IntdashExtensionFields intdash = 1024;
   */
  intdash?: IntdashExtensionFields;

  constructor(data?: PartialMessage<ConnectRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.ConnectRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1024, name: "intdash", kind: "message", T: IntdashExtensionFields },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequestExtensionFields {
    return new ConnectRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequestExtensionFields {
    return new ConnectRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequestExtensionFields {
    return new ConnectRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequestExtensionFields | PlainMessage<ConnectRequestExtensionFields> | undefined, b: ConnectRequestExtensionFields | PlainMessage<ConnectRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(ConnectRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.IntdashExtensionFields
 */
export class IntdashExtensionFields extends Message<IntdashExtensionFields> {
  /**
   * @generated from field: string project_uuid = 1;
   */
  projectUuid = "";

  constructor(data?: PartialMessage<IntdashExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.IntdashExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntdashExtensionFields {
    return new IntdashExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntdashExtensionFields {
    return new IntdashExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntdashExtensionFields {
    return new IntdashExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: IntdashExtensionFields | PlainMessage<IntdashExtensionFields> | undefined, b: IntdashExtensionFields | PlainMessage<IntdashExtensionFields> | undefined): boolean {
    return proto3.util.equals(IntdashExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.ConnectResponseExtensionFields
 */
export class ConnectResponseExtensionFields extends Message<ConnectResponseExtensionFields> {
  constructor(data?: PartialMessage<ConnectResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.ConnectResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponseExtensionFields {
    return new ConnectResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponseExtensionFields {
    return new ConnectResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponseExtensionFields {
    return new ConnectResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectResponseExtensionFields | PlainMessage<ConnectResponseExtensionFields> | undefined, b: ConnectResponseExtensionFields | PlainMessage<ConnectResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(ConnectResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DisconnectExtensionFields
 */
export class DisconnectExtensionFields extends Message<DisconnectExtensionFields> {
  constructor(data?: PartialMessage<DisconnectExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DisconnectExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectExtensionFields {
    return new DisconnectExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectExtensionFields {
    return new DisconnectExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectExtensionFields {
    return new DisconnectExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DisconnectExtensionFields | PlainMessage<DisconnectExtensionFields> | undefined, b: DisconnectExtensionFields | PlainMessage<DisconnectExtensionFields> | undefined): boolean {
    return proto3.util.equals(DisconnectExtensionFields, a, b);
  }
}

