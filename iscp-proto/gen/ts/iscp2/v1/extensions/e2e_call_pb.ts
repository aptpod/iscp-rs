// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/extensions/e2e_call.proto (package iscp2.v1.extensions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message iscp2.v1.extensions.UpstreamCallExtensionFields
 */
export class UpstreamCallExtensionFields extends Message<UpstreamCallExtensionFields> {
  constructor(data?: PartialMessage<UpstreamCallExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamCallExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamCallExtensionFields {
    return new UpstreamCallExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamCallExtensionFields {
    return new UpstreamCallExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamCallExtensionFields {
    return new UpstreamCallExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamCallExtensionFields | PlainMessage<UpstreamCallExtensionFields> | undefined, b: UpstreamCallExtensionFields | PlainMessage<UpstreamCallExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamCallExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamCallAckExtensionFields
 */
export class UpstreamCallAckExtensionFields extends Message<UpstreamCallAckExtensionFields> {
  constructor(data?: PartialMessage<UpstreamCallAckExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamCallAckExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamCallAckExtensionFields {
    return new UpstreamCallAckExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamCallAckExtensionFields {
    return new UpstreamCallAckExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamCallAckExtensionFields {
    return new UpstreamCallAckExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamCallAckExtensionFields | PlainMessage<UpstreamCallAckExtensionFields> | undefined, b: UpstreamCallAckExtensionFields | PlainMessage<UpstreamCallAckExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamCallAckExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.DownstreamCallExtensionFields
 */
export class DownstreamCallExtensionFields extends Message<DownstreamCallExtensionFields> {
  constructor(data?: PartialMessage<DownstreamCallExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.DownstreamCallExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamCallExtensionFields {
    return new DownstreamCallExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamCallExtensionFields {
    return new DownstreamCallExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamCallExtensionFields {
    return new DownstreamCallExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamCallExtensionFields | PlainMessage<DownstreamCallExtensionFields> | undefined, b: DownstreamCallExtensionFields | PlainMessage<DownstreamCallExtensionFields> | undefined): boolean {
    return proto3.util.equals(DownstreamCallExtensionFields, a, b);
  }
}

