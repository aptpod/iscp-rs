// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/extensions/upstream.proto (package iscp2.v1.extensions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message iscp2.v1.extensions.UpstreamOpenRequestExtensionFields
 */
export class UpstreamOpenRequestExtensionFields extends Message<UpstreamOpenRequestExtensionFields> {
  /**
   * @generated from field: bool persist = 1;
   */
  persist = false;

  constructor(data?: PartialMessage<UpstreamOpenRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamOpenRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "persist", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamOpenRequestExtensionFields {
    return new UpstreamOpenRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamOpenRequestExtensionFields {
    return new UpstreamOpenRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamOpenRequestExtensionFields {
    return new UpstreamOpenRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamOpenRequestExtensionFields | PlainMessage<UpstreamOpenRequestExtensionFields> | undefined, b: UpstreamOpenRequestExtensionFields | PlainMessage<UpstreamOpenRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamOpenRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamOpenResponseExtensionFields
 */
export class UpstreamOpenResponseExtensionFields extends Message<UpstreamOpenResponseExtensionFields> {
  constructor(data?: PartialMessage<UpstreamOpenResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamOpenResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamOpenResponseExtensionFields {
    return new UpstreamOpenResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamOpenResponseExtensionFields {
    return new UpstreamOpenResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamOpenResponseExtensionFields {
    return new UpstreamOpenResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamOpenResponseExtensionFields | PlainMessage<UpstreamOpenResponseExtensionFields> | undefined, b: UpstreamOpenResponseExtensionFields | PlainMessage<UpstreamOpenResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamOpenResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamResumeRequestExtensionFields
 */
export class UpstreamResumeRequestExtensionFields extends Message<UpstreamResumeRequestExtensionFields> {
  constructor(data?: PartialMessage<UpstreamResumeRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamResumeRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamResumeRequestExtensionFields {
    return new UpstreamResumeRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamResumeRequestExtensionFields {
    return new UpstreamResumeRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamResumeRequestExtensionFields {
    return new UpstreamResumeRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamResumeRequestExtensionFields | PlainMessage<UpstreamResumeRequestExtensionFields> | undefined, b: UpstreamResumeRequestExtensionFields | PlainMessage<UpstreamResumeRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamResumeRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamResumeResponseExtensionFields
 */
export class UpstreamResumeResponseExtensionFields extends Message<UpstreamResumeResponseExtensionFields> {
  constructor(data?: PartialMessage<UpstreamResumeResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamResumeResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamResumeResponseExtensionFields {
    return new UpstreamResumeResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamResumeResponseExtensionFields {
    return new UpstreamResumeResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamResumeResponseExtensionFields {
    return new UpstreamResumeResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamResumeResponseExtensionFields | PlainMessage<UpstreamResumeResponseExtensionFields> | undefined, b: UpstreamResumeResponseExtensionFields | PlainMessage<UpstreamResumeResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamResumeResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamCloseRequestExtensionFields
 */
export class UpstreamCloseRequestExtensionFields extends Message<UpstreamCloseRequestExtensionFields> {
  /**
   * @generated from field: bool close_session = 1;
   */
  closeSession = false;

  constructor(data?: PartialMessage<UpstreamCloseRequestExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamCloseRequestExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "close_session", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamCloseRequestExtensionFields {
    return new UpstreamCloseRequestExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamCloseRequestExtensionFields {
    return new UpstreamCloseRequestExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamCloseRequestExtensionFields {
    return new UpstreamCloseRequestExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamCloseRequestExtensionFields | PlainMessage<UpstreamCloseRequestExtensionFields> | undefined, b: UpstreamCloseRequestExtensionFields | PlainMessage<UpstreamCloseRequestExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamCloseRequestExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamCloseResponseExtensionFields
 */
export class UpstreamCloseResponseExtensionFields extends Message<UpstreamCloseResponseExtensionFields> {
  constructor(data?: PartialMessage<UpstreamCloseResponseExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamCloseResponseExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamCloseResponseExtensionFields {
    return new UpstreamCloseResponseExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamCloseResponseExtensionFields {
    return new UpstreamCloseResponseExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamCloseResponseExtensionFields {
    return new UpstreamCloseResponseExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamCloseResponseExtensionFields | PlainMessage<UpstreamCloseResponseExtensionFields> | undefined, b: UpstreamCloseResponseExtensionFields | PlainMessage<UpstreamCloseResponseExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamCloseResponseExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamChunkExtensionFields
 */
export class UpstreamChunkExtensionFields extends Message<UpstreamChunkExtensionFields> {
  constructor(data?: PartialMessage<UpstreamChunkExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamChunkExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamChunkExtensionFields {
    return new UpstreamChunkExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamChunkExtensionFields {
    return new UpstreamChunkExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamChunkExtensionFields {
    return new UpstreamChunkExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamChunkExtensionFields | PlainMessage<UpstreamChunkExtensionFields> | undefined, b: UpstreamChunkExtensionFields | PlainMessage<UpstreamChunkExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamChunkExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamChunkAckExtensionFields
 */
export class UpstreamChunkAckExtensionFields extends Message<UpstreamChunkAckExtensionFields> {
  constructor(data?: PartialMessage<UpstreamChunkAckExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamChunkAckExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamChunkAckExtensionFields {
    return new UpstreamChunkAckExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamChunkAckExtensionFields {
    return new UpstreamChunkAckExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamChunkAckExtensionFields {
    return new UpstreamChunkAckExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamChunkAckExtensionFields | PlainMessage<UpstreamChunkAckExtensionFields> | undefined, b: UpstreamChunkAckExtensionFields | PlainMessage<UpstreamChunkAckExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamChunkAckExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamMetadataExtensionFields
 */
export class UpstreamMetadataExtensionFields extends Message<UpstreamMetadataExtensionFields> {
  /**
   * @generated from field: bool persist = 1;
   */
  persist = false;

  constructor(data?: PartialMessage<UpstreamMetadataExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamMetadataExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "persist", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamMetadataExtensionFields {
    return new UpstreamMetadataExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamMetadataExtensionFields {
    return new UpstreamMetadataExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamMetadataExtensionFields {
    return new UpstreamMetadataExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamMetadataExtensionFields | PlainMessage<UpstreamMetadataExtensionFields> | undefined, b: UpstreamMetadataExtensionFields | PlainMessage<UpstreamMetadataExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamMetadataExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamMetadataAckExtensionFields
 */
export class UpstreamMetadataAckExtensionFields extends Message<UpstreamMetadataAckExtensionFields> {
  constructor(data?: PartialMessage<UpstreamMetadataAckExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamMetadataAckExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamMetadataAckExtensionFields {
    return new UpstreamMetadataAckExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamMetadataAckExtensionFields {
    return new UpstreamMetadataAckExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamMetadataAckExtensionFields {
    return new UpstreamMetadataAckExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamMetadataAckExtensionFields | PlainMessage<UpstreamMetadataAckExtensionFields> | undefined, b: UpstreamMetadataAckExtensionFields | PlainMessage<UpstreamMetadataAckExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamMetadataAckExtensionFields, a, b);
  }
}

/**
 * @generated from message iscp2.v1.extensions.UpstreamChunkResultExtensionFields
 */
export class UpstreamChunkResultExtensionFields extends Message<UpstreamChunkResultExtensionFields> {
  constructor(data?: PartialMessage<UpstreamChunkResultExtensionFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.extensions.UpstreamChunkResultExtensionFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamChunkResultExtensionFields {
    return new UpstreamChunkResultExtensionFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamChunkResultExtensionFields {
    return new UpstreamChunkResultExtensionFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamChunkResultExtensionFields {
    return new UpstreamChunkResultExtensionFields().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamChunkResultExtensionFields | PlainMessage<UpstreamChunkResultExtensionFields> | undefined, b: UpstreamChunkResultExtensionFields | PlainMessage<UpstreamChunkResultExtensionFields> | undefined): boolean {
    return proto3.util.equals(UpstreamChunkResultExtensionFields, a, b);
  }
}

