// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file iscp2/v1/metadata.proto (package iscp2.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DownstreamFilter, QoS } from "./common_pb.js";

/**
 * @generated from message iscp2.v1.BaseTime
 */
export class BaseTime extends Message<BaseTime> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 priority = 3;
   */
  priority = 0;

  /**
   * @generated from field: uint64 elapsed_time = 4;
   */
  elapsedTime = protoInt64.zero;

  /**
   * @generated from field: sint64 base_time = 5;
   */
  baseTime = protoInt64.zero;

  constructor(data?: PartialMessage<BaseTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.BaseTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "elapsed_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "base_time", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BaseTime {
    return new BaseTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BaseTime {
    return new BaseTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BaseTime {
    return new BaseTime().fromJsonString(jsonString, options);
  }

  static equals(a: BaseTime | PlainMessage<BaseTime> | undefined, b: BaseTime | PlainMessage<BaseTime> | undefined): boolean {
    return proto3.util.equals(BaseTime, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamOpen
 */
export class UpstreamOpen extends Message<UpstreamOpen> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: iscp2.v1.QoS qos = 3;
   */
  qos = QoS.UNRELIABLE;

  constructor(data?: PartialMessage<UpstreamOpen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamOpen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "qos", kind: "enum", T: proto3.getEnumType(QoS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamOpen {
    return new UpstreamOpen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamOpen {
    return new UpstreamOpen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamOpen {
    return new UpstreamOpen().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamOpen | PlainMessage<UpstreamOpen> | undefined, b: UpstreamOpen | PlainMessage<UpstreamOpen> | undefined): boolean {
    return proto3.util.equals(UpstreamOpen, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamAbnormalClose
 */
export class UpstreamAbnormalClose extends Message<UpstreamAbnormalClose> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  constructor(data?: PartialMessage<UpstreamAbnormalClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamAbnormalClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamAbnormalClose {
    return new UpstreamAbnormalClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamAbnormalClose {
    return new UpstreamAbnormalClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamAbnormalClose {
    return new UpstreamAbnormalClose().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamAbnormalClose | PlainMessage<UpstreamAbnormalClose> | undefined, b: UpstreamAbnormalClose | PlainMessage<UpstreamAbnormalClose> | undefined): boolean {
    return proto3.util.equals(UpstreamAbnormalClose, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamResume
 */
export class UpstreamResume extends Message<UpstreamResume> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: iscp2.v1.QoS qos = 3;
   */
  qos = QoS.UNRELIABLE;

  constructor(data?: PartialMessage<UpstreamResume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamResume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "qos", kind: "enum", T: proto3.getEnumType(QoS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamResume {
    return new UpstreamResume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamResume {
    return new UpstreamResume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamResume {
    return new UpstreamResume().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamResume | PlainMessage<UpstreamResume> | undefined, b: UpstreamResume | PlainMessage<UpstreamResume> | undefined): boolean {
    return proto3.util.equals(UpstreamResume, a, b);
  }
}

/**
 * @generated from message iscp2.v1.UpstreamNormalClose
 */
export class UpstreamNormalClose extends Message<UpstreamNormalClose> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: uint64 total_data_points = 3;
   */
  totalDataPoints = protoInt64.zero;

  /**
   * @generated from field: uint32 final_sequence_number = 4;
   */
  finalSequenceNumber = 0;

  constructor(data?: PartialMessage<UpstreamNormalClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.UpstreamNormalClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_data_points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "final_sequence_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpstreamNormalClose {
    return new UpstreamNormalClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpstreamNormalClose {
    return new UpstreamNormalClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpstreamNormalClose {
    return new UpstreamNormalClose().fromJsonString(jsonString, options);
  }

  static equals(a: UpstreamNormalClose | PlainMessage<UpstreamNormalClose> | undefined, b: UpstreamNormalClose | PlainMessage<UpstreamNormalClose> | undefined): boolean {
    return proto3.util.equals(UpstreamNormalClose, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamOpen
 */
export class DownstreamOpen extends Message<DownstreamOpen> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: repeated iscp2.v1.DownstreamFilter downstream_filters = 2;
   */
  downstreamFilters: DownstreamFilter[] = [];

  /**
   * @generated from field: iscp2.v1.QoS qos = 3;
   */
  qos = QoS.UNRELIABLE;

  constructor(data?: PartialMessage<DownstreamOpen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamOpen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "downstream_filters", kind: "message", T: DownstreamFilter, repeated: true },
    { no: 3, name: "qos", kind: "enum", T: proto3.getEnumType(QoS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamOpen {
    return new DownstreamOpen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamOpen {
    return new DownstreamOpen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamOpen {
    return new DownstreamOpen().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamOpen | PlainMessage<DownstreamOpen> | undefined, b: DownstreamOpen | PlainMessage<DownstreamOpen> | undefined): boolean {
    return proto3.util.equals(DownstreamOpen, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamAbnormalClose
 */
export class DownstreamAbnormalClose extends Message<DownstreamAbnormalClose> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  constructor(data?: PartialMessage<DownstreamAbnormalClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamAbnormalClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamAbnormalClose {
    return new DownstreamAbnormalClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamAbnormalClose {
    return new DownstreamAbnormalClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamAbnormalClose {
    return new DownstreamAbnormalClose().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamAbnormalClose | PlainMessage<DownstreamAbnormalClose> | undefined, b: DownstreamAbnormalClose | PlainMessage<DownstreamAbnormalClose> | undefined): boolean {
    return proto3.util.equals(DownstreamAbnormalClose, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamResume
 */
export class DownstreamResume extends Message<DownstreamResume> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  /**
   * @generated from field: repeated iscp2.v1.DownstreamFilter downstream_filters = 2;
   */
  downstreamFilters: DownstreamFilter[] = [];

  /**
   * @generated from field: iscp2.v1.QoS qos = 3;
   */
  qos = QoS.UNRELIABLE;

  constructor(data?: PartialMessage<DownstreamResume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamResume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "downstream_filters", kind: "message", T: DownstreamFilter, repeated: true },
    { no: 3, name: "qos", kind: "enum", T: proto3.getEnumType(QoS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamResume {
    return new DownstreamResume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamResume {
    return new DownstreamResume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamResume {
    return new DownstreamResume().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamResume | PlainMessage<DownstreamResume> | undefined, b: DownstreamResume | PlainMessage<DownstreamResume> | undefined): boolean {
    return proto3.util.equals(DownstreamResume, a, b);
  }
}

/**
 * @generated from message iscp2.v1.DownstreamNormalClose
 */
export class DownstreamNormalClose extends Message<DownstreamNormalClose> {
  /**
   * @generated from field: bytes stream_id = 1;
   */
  streamId = new Uint8Array(0);

  constructor(data?: PartialMessage<DownstreamNormalClose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "iscp2.v1.DownstreamNormalClose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownstreamNormalClose {
    return new DownstreamNormalClose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownstreamNormalClose {
    return new DownstreamNormalClose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownstreamNormalClose {
    return new DownstreamNormalClose().fromJsonString(jsonString, options);
  }

  static equals(a: DownstreamNormalClose | PlainMessage<DownstreamNormalClose> | undefined, b: DownstreamNormalClose | PlainMessage<DownstreamNormalClose> | undefined): boolean {
    return proto3.util.equals(DownstreamNormalClose, a, b);
  }
}

