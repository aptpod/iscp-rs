// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: iscp2/v1/downstream.proto

package iscp2v1

import (
	extensions "github.com/aptpod/iscp-proto/gen/go/iscp2/v1/extensions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DownstreamOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DesiredStreamIdAlias uint32                                           `protobuf:"varint,2,opt,name=desired_stream_id_alias,json=desiredStreamIdAlias,proto3" json:"desired_stream_id_alias,omitempty"`
	DownstreamFilters    []*DownstreamFilter                              `protobuf:"bytes,3,rep,name=downstream_filters,json=downstreamFilters,proto3" json:"downstream_filters,omitempty"`
	ExpiryInterval       uint32                                           `protobuf:"varint,4,opt,name=expiry_interval,json=expiryInterval,proto3" json:"expiry_interval,omitempty"`
	DataIdAliases        map[uint32]*DataID                               `protobuf:"bytes,5,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Qos                  QoS                                              `protobuf:"varint,6,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	ExtensionFields      *extensions.DownstreamOpenRequestExtensionFields `protobuf:"bytes,7,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	OmitEmptyChunk       bool                                             `protobuf:"varint,8,opt,name=omit_empty_chunk,json=omitEmptyChunk,proto3" json:"omit_empty_chunk,omitempty"`
}

func (x *DownstreamOpenRequest) Reset() {
	*x = DownstreamOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamOpenRequest) ProtoMessage() {}

func (x *DownstreamOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamOpenRequest.ProtoReflect.Descriptor instead.
func (*DownstreamOpenRequest) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{0}
}

func (x *DownstreamOpenRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamOpenRequest) GetDesiredStreamIdAlias() uint32 {
	if x != nil {
		return x.DesiredStreamIdAlias
	}
	return 0
}

func (x *DownstreamOpenRequest) GetDownstreamFilters() []*DownstreamFilter {
	if x != nil {
		return x.DownstreamFilters
	}
	return nil
}

func (x *DownstreamOpenRequest) GetExpiryInterval() uint32 {
	if x != nil {
		return x.ExpiryInterval
	}
	return 0
}

func (x *DownstreamOpenRequest) GetDataIdAliases() map[uint32]*DataID {
	if x != nil {
		return x.DataIdAliases
	}
	return nil
}

func (x *DownstreamOpenRequest) GetQos() QoS {
	if x != nil {
		return x.Qos
	}
	return QoS_UNRELIABLE
}

func (x *DownstreamOpenRequest) GetExtensionFields() *extensions.DownstreamOpenRequestExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

func (x *DownstreamOpenRequest) GetOmitEmptyChunk() bool {
	if x != nil {
		return x.OmitEmptyChunk
	}
	return false
}

type DownstreamOpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        uint32                                            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AssignedStreamId []byte                                            `protobuf:"bytes,2,opt,name=assigned_stream_id,json=assignedStreamId,proto3" json:"assigned_stream_id,omitempty"`
	ServerTime       int64                                             `protobuf:"zigzag64,3,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ResultCode       ResultCode                                        `protobuf:"varint,4,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString     string                                            `protobuf:"bytes,5,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields  *extensions.DownstreamOpenResponseExtensionFields `protobuf:"bytes,6,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamOpenResponse) Reset() {
	*x = DownstreamOpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamOpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamOpenResponse) ProtoMessage() {}

func (x *DownstreamOpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamOpenResponse.ProtoReflect.Descriptor instead.
func (*DownstreamOpenResponse) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{1}
}

func (x *DownstreamOpenResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamOpenResponse) GetAssignedStreamId() []byte {
	if x != nil {
		return x.AssignedStreamId
	}
	return nil
}

func (x *DownstreamOpenResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *DownstreamOpenResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *DownstreamOpenResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *DownstreamOpenResponse) GetExtensionFields() *extensions.DownstreamOpenResponseExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            uint32                                             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId             []byte                                             `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	DesiredStreamIdAlias uint32                                             `protobuf:"varint,3,opt,name=desired_stream_id_alias,json=desiredStreamIdAlias,proto3" json:"desired_stream_id_alias,omitempty"`
	ExtensionFields      *extensions.DownstreamResumeRequestExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamResumeRequest) Reset() {
	*x = DownstreamResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamResumeRequest) ProtoMessage() {}

func (x *DownstreamResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamResumeRequest.ProtoReflect.Descriptor instead.
func (*DownstreamResumeRequest) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{2}
}

func (x *DownstreamResumeRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamResumeRequest) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *DownstreamResumeRequest) GetDesiredStreamIdAlias() uint32 {
	if x != nil {
		return x.DesiredStreamIdAlias
	}
	return 0
}

func (x *DownstreamResumeRequest) GetExtensionFields() *extensions.DownstreamResumeRequestExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                              `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode      ResultCode                                          `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                              `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.DownstreamResumeResponseExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamResumeResponse) Reset() {
	*x = DownstreamResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamResumeResponse) ProtoMessage() {}

func (x *DownstreamResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamResumeResponse.ProtoReflect.Descriptor instead.
func (*DownstreamResumeResponse) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{3}
}

func (x *DownstreamResumeResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamResumeResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *DownstreamResumeResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *DownstreamResumeResponse) GetExtensionFields() *extensions.DownstreamResumeResponseExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId        []byte                                            `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ExtensionFields *extensions.DownstreamCloseRequestExtensionFields `protobuf:"bytes,3,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamCloseRequest) Reset() {
	*x = DownstreamCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamCloseRequest) ProtoMessage() {}

func (x *DownstreamCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamCloseRequest.ProtoReflect.Descriptor instead.
func (*DownstreamCloseRequest) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{4}
}

func (x *DownstreamCloseRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamCloseRequest) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *DownstreamCloseRequest) GetExtensionFields() *extensions.DownstreamCloseRequestExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode      ResultCode                                         `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                             `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.DownstreamCloseResponseExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamCloseResponse) Reset() {
	*x = DownstreamCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamCloseResponse) ProtoMessage() {}

func (x *DownstreamCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamCloseResponse.ProtoReflect.Descriptor instead.
func (*DownstreamCloseResponse) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{5}
}

func (x *DownstreamCloseResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamCloseResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *DownstreamCloseResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *DownstreamCloseResponse) GetExtensionFields() *extensions.DownstreamCloseResponseExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdAlias uint32 `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	// Types that are assignable to UpstreamOrAlias:
	//
	//	*DownstreamChunk_UpstreamInfo
	//	*DownstreamChunk_UpstreamAlias
	UpstreamOrAlias isDownstreamChunk_UpstreamOrAlias          `protobuf_oneof:"upstream_or_alias"`
	StreamChunk     *StreamChunk                               `protobuf:"bytes,4,opt,name=stream_chunk,json=streamChunk,proto3" json:"stream_chunk,omitempty"`
	ExtensionFields *extensions.DownstreamChunkExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamChunk) Reset() {
	*x = DownstreamChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamChunk) ProtoMessage() {}

func (x *DownstreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamChunk.ProtoReflect.Descriptor instead.
func (*DownstreamChunk) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{6}
}

func (x *DownstreamChunk) GetStreamIdAlias() uint32 {
	if x != nil {
		return x.StreamIdAlias
	}
	return 0
}

func (m *DownstreamChunk) GetUpstreamOrAlias() isDownstreamChunk_UpstreamOrAlias {
	if m != nil {
		return m.UpstreamOrAlias
	}
	return nil
}

func (x *DownstreamChunk) GetUpstreamInfo() *UpstreamInfo {
	if x, ok := x.GetUpstreamOrAlias().(*DownstreamChunk_UpstreamInfo); ok {
		return x.UpstreamInfo
	}
	return nil
}

func (x *DownstreamChunk) GetUpstreamAlias() uint32 {
	if x, ok := x.GetUpstreamOrAlias().(*DownstreamChunk_UpstreamAlias); ok {
		return x.UpstreamAlias
	}
	return 0
}

func (x *DownstreamChunk) GetStreamChunk() *StreamChunk {
	if x != nil {
		return x.StreamChunk
	}
	return nil
}

func (x *DownstreamChunk) GetExtensionFields() *extensions.DownstreamChunkExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type isDownstreamChunk_UpstreamOrAlias interface {
	isDownstreamChunk_UpstreamOrAlias()
}

type DownstreamChunk_UpstreamInfo struct {
	UpstreamInfo *UpstreamInfo `protobuf:"bytes,2,opt,name=upstream_info,json=upstreamInfo,proto3,oneof"`
}

type DownstreamChunk_UpstreamAlias struct {
	UpstreamAlias uint32 `protobuf:"varint,3,opt,name=upstream_alias,json=upstreamAlias,proto3,oneof"`
}

func (*DownstreamChunk_UpstreamInfo) isDownstreamChunk_UpstreamOrAlias() {}

func (*DownstreamChunk_UpstreamAlias) isDownstreamChunk_UpstreamOrAlias() {}

type DownstreamChunkAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdAlias   uint32                                        `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	AckId           uint32                                        `protobuf:"varint,2,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	Results         []*DownstreamChunkResult                      `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	UpstreamAliases map[uint32]*UpstreamInfo                      `protobuf:"bytes,4,rep,name=upstream_aliases,json=upstreamAliases,proto3" json:"upstream_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataIdAliases   map[uint32]*DataID                            `protobuf:"bytes,5,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtensionFields *extensions.DownstreamChunkAckExtensionFields `protobuf:"bytes,6,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamChunkAck) Reset() {
	*x = DownstreamChunkAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamChunkAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamChunkAck) ProtoMessage() {}

func (x *DownstreamChunkAck) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamChunkAck.ProtoReflect.Descriptor instead.
func (*DownstreamChunkAck) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{7}
}

func (x *DownstreamChunkAck) GetStreamIdAlias() uint32 {
	if x != nil {
		return x.StreamIdAlias
	}
	return 0
}

func (x *DownstreamChunkAck) GetAckId() uint32 {
	if x != nil {
		return x.AckId
	}
	return 0
}

func (x *DownstreamChunkAck) GetResults() []*DownstreamChunkResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DownstreamChunkAck) GetUpstreamAliases() map[uint32]*UpstreamInfo {
	if x != nil {
		return x.UpstreamAliases
	}
	return nil
}

func (x *DownstreamChunkAck) GetDataIdAliases() map[uint32]*DataID {
	if x != nil {
		return x.DataIdAliases
	}
	return nil
}

func (x *DownstreamChunkAck) GetExtensionFields() *extensions.DownstreamChunkAckExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamChunkAckComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdAlias   uint32                                                `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	AckId           uint32                                                `protobuf:"varint,2,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	ResultCode      ResultCode                                            `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                                `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.DownstreamChunkAckCompleteExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamChunkAckComplete) Reset() {
	*x = DownstreamChunkAckComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamChunkAckComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamChunkAckComplete) ProtoMessage() {}

func (x *DownstreamChunkAckComplete) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamChunkAckComplete.ProtoReflect.Descriptor instead.
func (*DownstreamChunkAckComplete) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{8}
}

func (x *DownstreamChunkAckComplete) GetStreamIdAlias() uint32 {
	if x != nil {
		return x.StreamIdAlias
	}
	return 0
}

func (x *DownstreamChunkAckComplete) GetAckId() uint32 {
	if x != nil {
		return x.AckId
	}
	return 0
}

func (x *DownstreamChunkAckComplete) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *DownstreamChunkAckComplete) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *DownstreamChunkAckComplete) GetExtensionFields() *extensions.DownstreamChunkAckCompleteExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type DownstreamMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamIdAlias uint32 `protobuf:"varint,13,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	// Types that are assignable to Metadata:
	//
	//	*DownstreamMetadata_BaseTime
	//	*DownstreamMetadata_UpstreamOpen
	//	*DownstreamMetadata_UpstreamAbnormalClose
	//	*DownstreamMetadata_UpstreamResume
	//	*DownstreamMetadata_UpstreamNormalClose
	//	*DownstreamMetadata_DownstreamOpen
	//	*DownstreamMetadata_DownstreamAbnormalClose
	//	*DownstreamMetadata_DownstreamResume
	//	*DownstreamMetadata_DownstreamNormalClose
	Metadata        isDownstreamMetadata_Metadata                 `protobuf_oneof:"metadata"`
	SourceNodeId    string                                        `protobuf:"bytes,11,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	ExtensionFields *extensions.DownstreamMetadataExtensionFields `protobuf:"bytes,12,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamMetadata) Reset() {
	*x = DownstreamMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamMetadata) ProtoMessage() {}

func (x *DownstreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamMetadata.ProtoReflect.Descriptor instead.
func (*DownstreamMetadata) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{9}
}

func (x *DownstreamMetadata) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamMetadata) GetStreamIdAlias() uint32 {
	if x != nil {
		return x.StreamIdAlias
	}
	return 0
}

func (m *DownstreamMetadata) GetMetadata() isDownstreamMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *DownstreamMetadata) GetBaseTime() *BaseTime {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_BaseTime); ok {
		return x.BaseTime
	}
	return nil
}

func (x *DownstreamMetadata) GetUpstreamOpen() *UpstreamOpen {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_UpstreamOpen); ok {
		return x.UpstreamOpen
	}
	return nil
}

func (x *DownstreamMetadata) GetUpstreamAbnormalClose() *UpstreamAbnormalClose {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_UpstreamAbnormalClose); ok {
		return x.UpstreamAbnormalClose
	}
	return nil
}

func (x *DownstreamMetadata) GetUpstreamResume() *UpstreamResume {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_UpstreamResume); ok {
		return x.UpstreamResume
	}
	return nil
}

func (x *DownstreamMetadata) GetUpstreamNormalClose() *UpstreamNormalClose {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_UpstreamNormalClose); ok {
		return x.UpstreamNormalClose
	}
	return nil
}

func (x *DownstreamMetadata) GetDownstreamOpen() *DownstreamOpen {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_DownstreamOpen); ok {
		return x.DownstreamOpen
	}
	return nil
}

func (x *DownstreamMetadata) GetDownstreamAbnormalClose() *DownstreamAbnormalClose {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_DownstreamAbnormalClose); ok {
		return x.DownstreamAbnormalClose
	}
	return nil
}

func (x *DownstreamMetadata) GetDownstreamResume() *DownstreamResume {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_DownstreamResume); ok {
		return x.DownstreamResume
	}
	return nil
}

func (x *DownstreamMetadata) GetDownstreamNormalClose() *DownstreamNormalClose {
	if x, ok := x.GetMetadata().(*DownstreamMetadata_DownstreamNormalClose); ok {
		return x.DownstreamNormalClose
	}
	return nil
}

func (x *DownstreamMetadata) GetSourceNodeId() string {
	if x != nil {
		return x.SourceNodeId
	}
	return ""
}

func (x *DownstreamMetadata) GetExtensionFields() *extensions.DownstreamMetadataExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type isDownstreamMetadata_Metadata interface {
	isDownstreamMetadata_Metadata()
}

type DownstreamMetadata_BaseTime struct {
	BaseTime *BaseTime `protobuf:"bytes,2,opt,name=base_time,json=baseTime,proto3,oneof"`
}

type DownstreamMetadata_UpstreamOpen struct {
	UpstreamOpen *UpstreamOpen `protobuf:"bytes,3,opt,name=upstream_open,json=upstreamOpen,proto3,oneof"`
}

type DownstreamMetadata_UpstreamAbnormalClose struct {
	UpstreamAbnormalClose *UpstreamAbnormalClose `protobuf:"bytes,4,opt,name=upstream_abnormal_close,json=upstreamAbnormalClose,proto3,oneof"`
}

type DownstreamMetadata_UpstreamResume struct {
	UpstreamResume *UpstreamResume `protobuf:"bytes,5,opt,name=upstream_resume,json=upstreamResume,proto3,oneof"`
}

type DownstreamMetadata_UpstreamNormalClose struct {
	UpstreamNormalClose *UpstreamNormalClose `protobuf:"bytes,6,opt,name=upstream_normal_close,json=upstreamNormalClose,proto3,oneof"`
}

type DownstreamMetadata_DownstreamOpen struct {
	DownstreamOpen *DownstreamOpen `protobuf:"bytes,7,opt,name=downstream_open,json=downstreamOpen,proto3,oneof"`
}

type DownstreamMetadata_DownstreamAbnormalClose struct {
	DownstreamAbnormalClose *DownstreamAbnormalClose `protobuf:"bytes,8,opt,name=downstream_abnormal_close,json=downstreamAbnormalClose,proto3,oneof"`
}

type DownstreamMetadata_DownstreamResume struct {
	DownstreamResume *DownstreamResume `protobuf:"bytes,9,opt,name=downstream_resume,json=downstreamResume,proto3,oneof"`
}

type DownstreamMetadata_DownstreamNormalClose struct {
	DownstreamNormalClose *DownstreamNormalClose `protobuf:"bytes,10,opt,name=downstream_normal_close,json=downstreamNormalClose,proto3,oneof"`
}

func (*DownstreamMetadata_BaseTime) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_UpstreamOpen) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_UpstreamAbnormalClose) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_UpstreamResume) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_UpstreamNormalClose) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_DownstreamOpen) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_DownstreamAbnormalClose) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_DownstreamResume) isDownstreamMetadata_Metadata() {}

func (*DownstreamMetadata_DownstreamNormalClose) isDownstreamMetadata_Metadata() {}

type DownstreamMetadataAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode      ResultCode                                       `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                           `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.DownstreamMetadataAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamMetadataAck) Reset() {
	*x = DownstreamMetadataAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamMetadataAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamMetadataAck) ProtoMessage() {}

func (x *DownstreamMetadataAck) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamMetadataAck.ProtoReflect.Descriptor instead.
func (*DownstreamMetadataAck) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{10}
}

func (x *DownstreamMetadataAck) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DownstreamMetadataAck) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *DownstreamMetadataAck) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *DownstreamMetadataAck) GetExtensionFields() *extensions.DownstreamMetadataAckExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId    string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	StreamId     []byte `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SourceNodeId string `protobuf:"bytes,3,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
}

func (x *UpstreamInfo) Reset() {
	*x = UpstreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamInfo) ProtoMessage() {}

func (x *UpstreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamInfo.ProtoReflect.Descriptor instead.
func (*UpstreamInfo) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{11}
}

func (x *UpstreamInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpstreamInfo) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpstreamInfo) GetSourceNodeId() string {
	if x != nil {
		return x.SourceNodeId
	}
	return ""
}

type DownstreamChunkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdOfUpstream       []byte                                           `protobuf:"bytes,1,opt,name=stream_id_of_upstream,json=streamIdOfUpstream,proto3" json:"stream_id_of_upstream,omitempty"`
	SequenceNumberInUpstream uint32                                           `protobuf:"varint,2,opt,name=sequence_number_in_upstream,json=sequenceNumberInUpstream,proto3" json:"sequence_number_in_upstream,omitempty"`
	ResultCode               ResultCode                                       `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString             string                                           `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields          *extensions.DownstreamChunkResultExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *DownstreamChunkResult) Reset() {
	*x = DownstreamChunkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_downstream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamChunkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamChunkResult) ProtoMessage() {}

func (x *DownstreamChunkResult) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_downstream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamChunkResult.ProtoReflect.Descriptor instead.
func (*DownstreamChunkResult) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_downstream_proto_rawDescGZIP(), []int{12}
}

func (x *DownstreamChunkResult) GetStreamIdOfUpstream() []byte {
	if x != nil {
		return x.StreamIdOfUpstream
	}
	return nil
}

func (x *DownstreamChunkResult) GetSequenceNumberInUpstream() uint32 {
	if x != nil {
		return x.SequenceNumberInUpstream
	}
	return 0
}

func (x *DownstreamChunkResult) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *DownstreamChunkResult) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *DownstreamChunkResult) GetExtensionFields() *extensions.DownstreamChunkResultExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

var File_iscp2_v1_downstream_proto protoreflect.FileDescriptor

var file_iscp2_v1_downstream_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x04, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x11, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x6d, 0x69, 0x74, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x52, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x02, 0x0a,
	0x16, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x65, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x17, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x66, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0xfe, 0x01, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0xbb, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd0, 0x02,
	0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x5e, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x22, 0xd8, 0x04, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x10, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x14, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x1a,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0xa3, 0x07, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x59, 0x0a, 0x17, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x5f, 0x0a, 0x19, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x70, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0xcb, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4f, 0x66, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x42, 0xaa, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x61, 0x70, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x69, 0x73, 0x63,
	0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x73, 0x63, 0x70, 0x32, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x49, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x08, 0x49, 0x73, 0x63, 0x70, 0x32, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x49, 0x73,
	0x63, 0x70, 0x32, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x09, 0x49, 0x73, 0x63, 0x70, 0x32, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iscp2_v1_downstream_proto_rawDescOnce sync.Once
	file_iscp2_v1_downstream_proto_rawDescData = file_iscp2_v1_downstream_proto_rawDesc
)

func file_iscp2_v1_downstream_proto_rawDescGZIP() []byte {
	file_iscp2_v1_downstream_proto_rawDescOnce.Do(func() {
		file_iscp2_v1_downstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_iscp2_v1_downstream_proto_rawDescData)
	})
	return file_iscp2_v1_downstream_proto_rawDescData
}

var file_iscp2_v1_downstream_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_iscp2_v1_downstream_proto_goTypes = []interface{}{
	(*DownstreamOpenRequest)(nil),      // 0: iscp2.v1.DownstreamOpenRequest
	(*DownstreamOpenResponse)(nil),     // 1: iscp2.v1.DownstreamOpenResponse
	(*DownstreamResumeRequest)(nil),    // 2: iscp2.v1.DownstreamResumeRequest
	(*DownstreamResumeResponse)(nil),   // 3: iscp2.v1.DownstreamResumeResponse
	(*DownstreamCloseRequest)(nil),     // 4: iscp2.v1.DownstreamCloseRequest
	(*DownstreamCloseResponse)(nil),    // 5: iscp2.v1.DownstreamCloseResponse
	(*DownstreamChunk)(nil),            // 6: iscp2.v1.DownstreamChunk
	(*DownstreamChunkAck)(nil),         // 7: iscp2.v1.DownstreamChunkAck
	(*DownstreamChunkAckComplete)(nil), // 8: iscp2.v1.DownstreamChunkAckComplete
	(*DownstreamMetadata)(nil),         // 9: iscp2.v1.DownstreamMetadata
	(*DownstreamMetadataAck)(nil),      // 10: iscp2.v1.DownstreamMetadataAck
	(*UpstreamInfo)(nil),               // 11: iscp2.v1.UpstreamInfo
	(*DownstreamChunkResult)(nil),      // 12: iscp2.v1.DownstreamChunkResult
	nil,                                // 13: iscp2.v1.DownstreamOpenRequest.DataIdAliasesEntry
	nil,                                // 14: iscp2.v1.DownstreamChunkAck.UpstreamAliasesEntry
	nil,                                // 15: iscp2.v1.DownstreamChunkAck.DataIdAliasesEntry
	(*DownstreamFilter)(nil),           // 16: iscp2.v1.DownstreamFilter
	(QoS)(0),                           // 17: iscp2.v1.QoS
	(*extensions.DownstreamOpenRequestExtensionFields)(nil), // 18: iscp2.v1.extensions.DownstreamOpenRequestExtensionFields
	(ResultCode)(0), // 19: iscp2.v1.ResultCode
	(*extensions.DownstreamOpenResponseExtensionFields)(nil),   // 20: iscp2.v1.extensions.DownstreamOpenResponseExtensionFields
	(*extensions.DownstreamResumeRequestExtensionFields)(nil),  // 21: iscp2.v1.extensions.DownstreamResumeRequestExtensionFields
	(*extensions.DownstreamResumeResponseExtensionFields)(nil), // 22: iscp2.v1.extensions.DownstreamResumeResponseExtensionFields
	(*extensions.DownstreamCloseRequestExtensionFields)(nil),   // 23: iscp2.v1.extensions.DownstreamCloseRequestExtensionFields
	(*extensions.DownstreamCloseResponseExtensionFields)(nil),  // 24: iscp2.v1.extensions.DownstreamCloseResponseExtensionFields
	(*StreamChunk)(nil), // 25: iscp2.v1.StreamChunk
	(*extensions.DownstreamChunkExtensionFields)(nil),            // 26: iscp2.v1.extensions.DownstreamChunkExtensionFields
	(*extensions.DownstreamChunkAckExtensionFields)(nil),         // 27: iscp2.v1.extensions.DownstreamChunkAckExtensionFields
	(*extensions.DownstreamChunkAckCompleteExtensionFields)(nil), // 28: iscp2.v1.extensions.DownstreamChunkAckCompleteExtensionFields
	(*BaseTime)(nil),                                        // 29: iscp2.v1.BaseTime
	(*UpstreamOpen)(nil),                                    // 30: iscp2.v1.UpstreamOpen
	(*UpstreamAbnormalClose)(nil),                           // 31: iscp2.v1.UpstreamAbnormalClose
	(*UpstreamResume)(nil),                                  // 32: iscp2.v1.UpstreamResume
	(*UpstreamNormalClose)(nil),                             // 33: iscp2.v1.UpstreamNormalClose
	(*DownstreamOpen)(nil),                                  // 34: iscp2.v1.DownstreamOpen
	(*DownstreamAbnormalClose)(nil),                         // 35: iscp2.v1.DownstreamAbnormalClose
	(*DownstreamResume)(nil),                                // 36: iscp2.v1.DownstreamResume
	(*DownstreamNormalClose)(nil),                           // 37: iscp2.v1.DownstreamNormalClose
	(*extensions.DownstreamMetadataExtensionFields)(nil),    // 38: iscp2.v1.extensions.DownstreamMetadataExtensionFields
	(*extensions.DownstreamMetadataAckExtensionFields)(nil), // 39: iscp2.v1.extensions.DownstreamMetadataAckExtensionFields
	(*extensions.DownstreamChunkResultExtensionFields)(nil), // 40: iscp2.v1.extensions.DownstreamChunkResultExtensionFields
	(*DataID)(nil),                                          // 41: iscp2.v1.DataID
}
var file_iscp2_v1_downstream_proto_depIdxs = []int32{
	16, // 0: iscp2.v1.DownstreamOpenRequest.downstream_filters:type_name -> iscp2.v1.DownstreamFilter
	13, // 1: iscp2.v1.DownstreamOpenRequest.data_id_aliases:type_name -> iscp2.v1.DownstreamOpenRequest.DataIdAliasesEntry
	17, // 2: iscp2.v1.DownstreamOpenRequest.qos:type_name -> iscp2.v1.QoS
	18, // 3: iscp2.v1.DownstreamOpenRequest.extension_fields:type_name -> iscp2.v1.extensions.DownstreamOpenRequestExtensionFields
	19, // 4: iscp2.v1.DownstreamOpenResponse.result_code:type_name -> iscp2.v1.ResultCode
	20, // 5: iscp2.v1.DownstreamOpenResponse.extension_fields:type_name -> iscp2.v1.extensions.DownstreamOpenResponseExtensionFields
	21, // 6: iscp2.v1.DownstreamResumeRequest.extension_fields:type_name -> iscp2.v1.extensions.DownstreamResumeRequestExtensionFields
	19, // 7: iscp2.v1.DownstreamResumeResponse.result_code:type_name -> iscp2.v1.ResultCode
	22, // 8: iscp2.v1.DownstreamResumeResponse.extension_fields:type_name -> iscp2.v1.extensions.DownstreamResumeResponseExtensionFields
	23, // 9: iscp2.v1.DownstreamCloseRequest.extension_fields:type_name -> iscp2.v1.extensions.DownstreamCloseRequestExtensionFields
	19, // 10: iscp2.v1.DownstreamCloseResponse.result_code:type_name -> iscp2.v1.ResultCode
	24, // 11: iscp2.v1.DownstreamCloseResponse.extension_fields:type_name -> iscp2.v1.extensions.DownstreamCloseResponseExtensionFields
	11, // 12: iscp2.v1.DownstreamChunk.upstream_info:type_name -> iscp2.v1.UpstreamInfo
	25, // 13: iscp2.v1.DownstreamChunk.stream_chunk:type_name -> iscp2.v1.StreamChunk
	26, // 14: iscp2.v1.DownstreamChunk.extension_fields:type_name -> iscp2.v1.extensions.DownstreamChunkExtensionFields
	12, // 15: iscp2.v1.DownstreamChunkAck.results:type_name -> iscp2.v1.DownstreamChunkResult
	14, // 16: iscp2.v1.DownstreamChunkAck.upstream_aliases:type_name -> iscp2.v1.DownstreamChunkAck.UpstreamAliasesEntry
	15, // 17: iscp2.v1.DownstreamChunkAck.data_id_aliases:type_name -> iscp2.v1.DownstreamChunkAck.DataIdAliasesEntry
	27, // 18: iscp2.v1.DownstreamChunkAck.extension_fields:type_name -> iscp2.v1.extensions.DownstreamChunkAckExtensionFields
	19, // 19: iscp2.v1.DownstreamChunkAckComplete.result_code:type_name -> iscp2.v1.ResultCode
	28, // 20: iscp2.v1.DownstreamChunkAckComplete.extension_fields:type_name -> iscp2.v1.extensions.DownstreamChunkAckCompleteExtensionFields
	29, // 21: iscp2.v1.DownstreamMetadata.base_time:type_name -> iscp2.v1.BaseTime
	30, // 22: iscp2.v1.DownstreamMetadata.upstream_open:type_name -> iscp2.v1.UpstreamOpen
	31, // 23: iscp2.v1.DownstreamMetadata.upstream_abnormal_close:type_name -> iscp2.v1.UpstreamAbnormalClose
	32, // 24: iscp2.v1.DownstreamMetadata.upstream_resume:type_name -> iscp2.v1.UpstreamResume
	33, // 25: iscp2.v1.DownstreamMetadata.upstream_normal_close:type_name -> iscp2.v1.UpstreamNormalClose
	34, // 26: iscp2.v1.DownstreamMetadata.downstream_open:type_name -> iscp2.v1.DownstreamOpen
	35, // 27: iscp2.v1.DownstreamMetadata.downstream_abnormal_close:type_name -> iscp2.v1.DownstreamAbnormalClose
	36, // 28: iscp2.v1.DownstreamMetadata.downstream_resume:type_name -> iscp2.v1.DownstreamResume
	37, // 29: iscp2.v1.DownstreamMetadata.downstream_normal_close:type_name -> iscp2.v1.DownstreamNormalClose
	38, // 30: iscp2.v1.DownstreamMetadata.extension_fields:type_name -> iscp2.v1.extensions.DownstreamMetadataExtensionFields
	19, // 31: iscp2.v1.DownstreamMetadataAck.result_code:type_name -> iscp2.v1.ResultCode
	39, // 32: iscp2.v1.DownstreamMetadataAck.extension_fields:type_name -> iscp2.v1.extensions.DownstreamMetadataAckExtensionFields
	19, // 33: iscp2.v1.DownstreamChunkResult.result_code:type_name -> iscp2.v1.ResultCode
	40, // 34: iscp2.v1.DownstreamChunkResult.extension_fields:type_name -> iscp2.v1.extensions.DownstreamChunkResultExtensionFields
	41, // 35: iscp2.v1.DownstreamOpenRequest.DataIdAliasesEntry.value:type_name -> iscp2.v1.DataID
	11, // 36: iscp2.v1.DownstreamChunkAck.UpstreamAliasesEntry.value:type_name -> iscp2.v1.UpstreamInfo
	41, // 37: iscp2.v1.DownstreamChunkAck.DataIdAliasesEntry.value:type_name -> iscp2.v1.DataID
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_iscp2_v1_downstream_proto_init() }
func file_iscp2_v1_downstream_proto_init() {
	if File_iscp2_v1_downstream_proto != nil {
		return
	}
	file_iscp2_v1_common_proto_init()
	file_iscp2_v1_metadata_proto_init()
	file_iscp2_v1_result_code_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iscp2_v1_downstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamOpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamChunkAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamChunkAckComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamMetadataAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_downstream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamChunkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iscp2_v1_downstream_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DownstreamChunk_UpstreamInfo)(nil),
		(*DownstreamChunk_UpstreamAlias)(nil),
	}
	file_iscp2_v1_downstream_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*DownstreamMetadata_BaseTime)(nil),
		(*DownstreamMetadata_UpstreamOpen)(nil),
		(*DownstreamMetadata_UpstreamAbnormalClose)(nil),
		(*DownstreamMetadata_UpstreamResume)(nil),
		(*DownstreamMetadata_UpstreamNormalClose)(nil),
		(*DownstreamMetadata_DownstreamOpen)(nil),
		(*DownstreamMetadata_DownstreamAbnormalClose)(nil),
		(*DownstreamMetadata_DownstreamResume)(nil),
		(*DownstreamMetadata_DownstreamNormalClose)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iscp2_v1_downstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iscp2_v1_downstream_proto_goTypes,
		DependencyIndexes: file_iscp2_v1_downstream_proto_depIdxs,
		MessageInfos:      file_iscp2_v1_downstream_proto_msgTypes,
	}.Build()
	File_iscp2_v1_downstream_proto = out.File
	file_iscp2_v1_downstream_proto_rawDesc = nil
	file_iscp2_v1_downstream_proto_goTypes = nil
	file_iscp2_v1_downstream_proto_depIdxs = nil
}
