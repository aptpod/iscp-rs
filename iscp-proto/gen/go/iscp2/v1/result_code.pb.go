// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: iscp2/v1/result_code.proto

package iscp2v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResultCode int32

const (
	ResultCode_SUCCEEDED                   ResultCode = 0
	ResultCode_NORMAL_CLOSURE              ResultCode = 0
	ResultCode_INCOMPATIBLE_VERSION        ResultCode = 1
	ResultCode_MAXIMUM_DATA_ID_ALIAS       ResultCode = 2
	ResultCode_MAXIMUM_UPSTREAM_ALIAS      ResultCode = 3
	ResultCode_UNSPECIFIED_ERROR           ResultCode = 64
	ResultCode_NO_NODE_ID                  ResultCode = 65
	ResultCode_AUTH_FAILED                 ResultCode = 66
	ResultCode_CONNECT_TIMEOUT             ResultCode = 67
	ResultCode_MALFORMED_MESSAGE           ResultCode = 68
	ResultCode_PROTOCOL_ERROR              ResultCode = 69
	ResultCode_ACK_TIMEOUT                 ResultCode = 70
	ResultCode_INVALID_PAYLOAD             ResultCode = 71
	ResultCode_INVALID_DATA_ID             ResultCode = 72
	ResultCode_INVALID_DATA_ID_ALIAS       ResultCode = 73
	ResultCode_INVALID_DATA_FILTER         ResultCode = 74
	ResultCode_STREAM_NOT_FOUND            ResultCode = 75
	ResultCode_RESUME_REQUEST_CONFLICT     ResultCode = 76
	ResultCode_PROCESS_FAILED              ResultCode = 77
	ResultCode_DESIRED_QOS_NOT_SUPPORTED   ResultCode = 78
	ResultCode_PING_TIMEOUT                ResultCode = 79
	ResultCode_TOO_LARGE_MESSAGE_SIZE      ResultCode = 80
	ResultCode_TOO_MANY_DATA_ID_ALIASES    ResultCode = 81
	ResultCode_TOO_MANY_STREAMS            ResultCode = 82
	ResultCode_TOO_LONG_ACK_INTERVAL       ResultCode = 83
	ResultCode_TOO_MANY_DOWNSTREAM_FILTERS ResultCode = 84
	ResultCode_TOO_MANY_DATA_FILTERS       ResultCode = 85
	ResultCode_TOO_LONG_EXPIRY_INTERVAL    ResultCode = 86
	ResultCode_TOO_LONG_PING_TIMEOUT       ResultCode = 87
	ResultCode_TOO_SHORT_PING_INTERVAL     ResultCode = 88
	ResultCode_TOO_SHORT_PING_TIMEOUT      ResultCode = 89
	ResultCode_RATE_LIMIT_REACHED          ResultCode = 90
	ResultCode_NODE_ID_MISMATCH            ResultCode = 128
	ResultCode_SESSION_NOT_FOUND           ResultCode = 129
	ResultCode_SESSION_ALREADY_CLOSED      ResultCode = 130
	ResultCode_SESSION_CANNOT_CLOSED       ResultCode = 131
)

// Enum value maps for ResultCode.
var (
	ResultCode_name = map[int32]string{
		0: "SUCCEEDED",
		// Duplicate value: 0: "NORMAL_CLOSURE",
		1:   "INCOMPATIBLE_VERSION",
		2:   "MAXIMUM_DATA_ID_ALIAS",
		3:   "MAXIMUM_UPSTREAM_ALIAS",
		64:  "UNSPECIFIED_ERROR",
		65:  "NO_NODE_ID",
		66:  "AUTH_FAILED",
		67:  "CONNECT_TIMEOUT",
		68:  "MALFORMED_MESSAGE",
		69:  "PROTOCOL_ERROR",
		70:  "ACK_TIMEOUT",
		71:  "INVALID_PAYLOAD",
		72:  "INVALID_DATA_ID",
		73:  "INVALID_DATA_ID_ALIAS",
		74:  "INVALID_DATA_FILTER",
		75:  "STREAM_NOT_FOUND",
		76:  "RESUME_REQUEST_CONFLICT",
		77:  "PROCESS_FAILED",
		78:  "DESIRED_QOS_NOT_SUPPORTED",
		79:  "PING_TIMEOUT",
		80:  "TOO_LARGE_MESSAGE_SIZE",
		81:  "TOO_MANY_DATA_ID_ALIASES",
		82:  "TOO_MANY_STREAMS",
		83:  "TOO_LONG_ACK_INTERVAL",
		84:  "TOO_MANY_DOWNSTREAM_FILTERS",
		85:  "TOO_MANY_DATA_FILTERS",
		86:  "TOO_LONG_EXPIRY_INTERVAL",
		87:  "TOO_LONG_PING_TIMEOUT",
		88:  "TOO_SHORT_PING_INTERVAL",
		89:  "TOO_SHORT_PING_TIMEOUT",
		90:  "RATE_LIMIT_REACHED",
		128: "NODE_ID_MISMATCH",
		129: "SESSION_NOT_FOUND",
		130: "SESSION_ALREADY_CLOSED",
		131: "SESSION_CANNOT_CLOSED",
	}
	ResultCode_value = map[string]int32{
		"SUCCEEDED":                   0,
		"NORMAL_CLOSURE":              0,
		"INCOMPATIBLE_VERSION":        1,
		"MAXIMUM_DATA_ID_ALIAS":       2,
		"MAXIMUM_UPSTREAM_ALIAS":      3,
		"UNSPECIFIED_ERROR":           64,
		"NO_NODE_ID":                  65,
		"AUTH_FAILED":                 66,
		"CONNECT_TIMEOUT":             67,
		"MALFORMED_MESSAGE":           68,
		"PROTOCOL_ERROR":              69,
		"ACK_TIMEOUT":                 70,
		"INVALID_PAYLOAD":             71,
		"INVALID_DATA_ID":             72,
		"INVALID_DATA_ID_ALIAS":       73,
		"INVALID_DATA_FILTER":         74,
		"STREAM_NOT_FOUND":            75,
		"RESUME_REQUEST_CONFLICT":     76,
		"PROCESS_FAILED":              77,
		"DESIRED_QOS_NOT_SUPPORTED":   78,
		"PING_TIMEOUT":                79,
		"TOO_LARGE_MESSAGE_SIZE":      80,
		"TOO_MANY_DATA_ID_ALIASES":    81,
		"TOO_MANY_STREAMS":            82,
		"TOO_LONG_ACK_INTERVAL":       83,
		"TOO_MANY_DOWNSTREAM_FILTERS": 84,
		"TOO_MANY_DATA_FILTERS":       85,
		"TOO_LONG_EXPIRY_INTERVAL":    86,
		"TOO_LONG_PING_TIMEOUT":       87,
		"TOO_SHORT_PING_INTERVAL":     88,
		"TOO_SHORT_PING_TIMEOUT":      89,
		"RATE_LIMIT_REACHED":          90,
		"NODE_ID_MISMATCH":            128,
		"SESSION_NOT_FOUND":           129,
		"SESSION_ALREADY_CLOSED":      130,
		"SESSION_CANNOT_CLOSED":       131,
	}
)

func (x ResultCode) Enum() *ResultCode {
	p := new(ResultCode)
	*p = x
	return p
}

func (x ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_iscp2_v1_result_code_proto_enumTypes[0].Descriptor()
}

func (ResultCode) Type() protoreflect.EnumType {
	return &file_iscp2_v1_result_code_proto_enumTypes[0]
}

func (x ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode.Descriptor instead.
func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_iscp2_v1_result_code_proto_rawDescGZIP(), []int{0}
}

var File_iscp2_v1_result_code_proto protoreflect.FileDescriptor

var file_iscp2_v1_result_code_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2a, 0xfc, 0x06, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x55, 0x50, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x40,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x41,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x42, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x43, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x44, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x47, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x44, 0x10, 0x48, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x49, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x4a,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x4b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43,
	0x54, 0x10, 0x4c, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x4d, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x53, 0x49, 0x52,
	0x45, 0x44, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x4e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x4f, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x50, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x45, 0x53,
	0x10, 0x51, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x10, 0x53, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x53, 0x10, 0x54, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x53, 0x10, 0x55, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x56, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x57, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x4f, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x10, 0x58, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x59, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x5a, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x80, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x81, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x82, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x83,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0xaa, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x70, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x74, 0x70, 0x6f, 0x64,
	0x2f, 0x69, 0x73, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x73, 0x63, 0x70,
	0x32, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x49, 0x73, 0x63, 0x70,
	0x32, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x49, 0x73, 0x63, 0x70, 0x32, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x14, 0x49, 0x73, 0x63, 0x70, 0x32, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x49, 0x73, 0x63, 0x70, 0x32, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iscp2_v1_result_code_proto_rawDescOnce sync.Once
	file_iscp2_v1_result_code_proto_rawDescData = file_iscp2_v1_result_code_proto_rawDesc
)

func file_iscp2_v1_result_code_proto_rawDescGZIP() []byte {
	file_iscp2_v1_result_code_proto_rawDescOnce.Do(func() {
		file_iscp2_v1_result_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_iscp2_v1_result_code_proto_rawDescData)
	})
	return file_iscp2_v1_result_code_proto_rawDescData
}

var file_iscp2_v1_result_code_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_iscp2_v1_result_code_proto_goTypes = []interface{}{
	(ResultCode)(0), // 0: iscp2.v1.ResultCode
}
var file_iscp2_v1_result_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_iscp2_v1_result_code_proto_init() }
func file_iscp2_v1_result_code_proto_init() {
	if File_iscp2_v1_result_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iscp2_v1_result_code_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iscp2_v1_result_code_proto_goTypes,
		DependencyIndexes: file_iscp2_v1_result_code_proto_depIdxs,
		EnumInfos:         file_iscp2_v1_result_code_proto_enumTypes,
	}.Build()
	File_iscp2_v1_result_code_proto = out.File
	file_iscp2_v1_result_code_proto_rawDesc = nil
	file_iscp2_v1_result_code_proto_goTypes = nil
	file_iscp2_v1_result_code_proto_depIdxs = nil
}
