// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: iscp2/v1/upstream.proto

package iscp2v1

import (
	extensions "github.com/aptpod/iscp-proto/gen/go/iscp2/v1/extensions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpstreamOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                         `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SessionId       string                                         `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AckInterval     uint32                                         `protobuf:"varint,3,opt,name=ack_interval,json=ackInterval,proto3" json:"ack_interval,omitempty"`
	ExpiryInterval  uint32                                         `protobuf:"varint,5,opt,name=expiry_interval,json=expiryInterval,proto3" json:"expiry_interval,omitempty"`
	DataIds         []*DataID                                      `protobuf:"bytes,6,rep,name=data_ids,json=dataIds,proto3" json:"data_ids,omitempty"`
	Qos             QoS                                            `protobuf:"varint,7,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	ExtensionFields *extensions.UpstreamOpenRequestExtensionFields `protobuf:"bytes,8,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamOpenRequest) Reset() {
	*x = UpstreamOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamOpenRequest) ProtoMessage() {}

func (x *UpstreamOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamOpenRequest.ProtoReflect.Descriptor instead.
func (*UpstreamOpenRequest) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{0}
}

func (x *UpstreamOpenRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamOpenRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpstreamOpenRequest) GetAckInterval() uint32 {
	if x != nil {
		return x.AckInterval
	}
	return 0
}

func (x *UpstreamOpenRequest) GetExpiryInterval() uint32 {
	if x != nil {
		return x.ExpiryInterval
	}
	return 0
}

func (x *UpstreamOpenRequest) GetDataIds() []*DataID {
	if x != nil {
		return x.DataIds
	}
	return nil
}

func (x *UpstreamOpenRequest) GetQos() QoS {
	if x != nil {
		return x.Qos
	}
	return QoS_UNRELIABLE
}

func (x *UpstreamOpenRequest) GetExtensionFields() *extensions.UpstreamOpenRequestExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamOpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId             uint32                                          `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AssignedStreamId      []byte                                          `protobuf:"bytes,2,opt,name=assigned_stream_id,json=assignedStreamId,proto3" json:"assigned_stream_id,omitempty"`
	AssignedStreamIdAlias uint32                                          `protobuf:"varint,3,opt,name=assigned_stream_id_alias,json=assignedStreamIdAlias,proto3" json:"assigned_stream_id_alias,omitempty"`
	DataIdAliases         map[uint32]*DataID                              `protobuf:"bytes,4,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServerTime            int64                                           `protobuf:"zigzag64,5,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ResultCode            ResultCode                                      `protobuf:"varint,6,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString          string                                          `protobuf:"bytes,7,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields       *extensions.UpstreamOpenResponseExtensionFields `protobuf:"bytes,8,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamOpenResponse) Reset() {
	*x = UpstreamOpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamOpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamOpenResponse) ProtoMessage() {}

func (x *UpstreamOpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamOpenResponse.ProtoReflect.Descriptor instead.
func (*UpstreamOpenResponse) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{1}
}

func (x *UpstreamOpenResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamOpenResponse) GetAssignedStreamId() []byte {
	if x != nil {
		return x.AssignedStreamId
	}
	return nil
}

func (x *UpstreamOpenResponse) GetAssignedStreamIdAlias() uint32 {
	if x != nil {
		return x.AssignedStreamIdAlias
	}
	return 0
}

func (x *UpstreamOpenResponse) GetDataIdAliases() map[uint32]*DataID {
	if x != nil {
		return x.DataIdAliases
	}
	return nil
}

func (x *UpstreamOpenResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *UpstreamOpenResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *UpstreamOpenResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *UpstreamOpenResponse) GetExtensionFields() *extensions.UpstreamOpenResponseExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId        []byte                                           `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ExtensionFields *extensions.UpstreamResumeRequestExtensionFields `protobuf:"bytes,3,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamResumeRequest) Reset() {
	*x = UpstreamResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamResumeRequest) ProtoMessage() {}

func (x *UpstreamResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamResumeRequest.ProtoReflect.Descriptor instead.
func (*UpstreamResumeRequest) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{2}
}

func (x *UpstreamResumeRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamResumeRequest) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpstreamResumeRequest) GetExtensionFields() *extensions.UpstreamResumeRequestExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId             uint32                                            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AssignedStreamIdAlias uint32                                            `protobuf:"varint,2,opt,name=assigned_stream_id_alias,json=assignedStreamIdAlias,proto3" json:"assigned_stream_id_alias,omitempty"`
	ResultCode            ResultCode                                        `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString          string                                            `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields       *extensions.UpstreamResumeResponseExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamResumeResponse) Reset() {
	*x = UpstreamResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamResumeResponse) ProtoMessage() {}

func (x *UpstreamResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamResumeResponse.ProtoReflect.Descriptor instead.
func (*UpstreamResumeResponse) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{3}
}

func (x *UpstreamResumeResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamResumeResponse) GetAssignedStreamIdAlias() uint32 {
	if x != nil {
		return x.AssignedStreamIdAlias
	}
	return 0
}

func (x *UpstreamResumeResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *UpstreamResumeResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *UpstreamResumeResponse) GetExtensionFields() *extensions.UpstreamResumeResponseExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           uint32                                          `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId            []byte                                          `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	TotalDataPoints     uint64                                          `protobuf:"varint,3,opt,name=total_data_points,json=totalDataPoints,proto3" json:"total_data_points,omitempty"`
	FinalSequenceNumber uint32                                          `protobuf:"varint,4,opt,name=final_sequence_number,json=finalSequenceNumber,proto3" json:"final_sequence_number,omitempty"`
	ExtensionFields     *extensions.UpstreamCloseRequestExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamCloseRequest) Reset() {
	*x = UpstreamCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamCloseRequest) ProtoMessage() {}

func (x *UpstreamCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamCloseRequest.ProtoReflect.Descriptor instead.
func (*UpstreamCloseRequest) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{4}
}

func (x *UpstreamCloseRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamCloseRequest) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpstreamCloseRequest) GetTotalDataPoints() uint64 {
	if x != nil {
		return x.TotalDataPoints
	}
	return 0
}

func (x *UpstreamCloseRequest) GetFinalSequenceNumber() uint32 {
	if x != nil {
		return x.FinalSequenceNumber
	}
	return 0
}

func (x *UpstreamCloseRequest) GetExtensionFields() *extensions.UpstreamCloseRequestExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode      ResultCode                                       `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                           `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.UpstreamCloseResponseExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamCloseResponse) Reset() {
	*x = UpstreamCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamCloseResponse) ProtoMessage() {}

func (x *UpstreamCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamCloseResponse.ProtoReflect.Descriptor instead.
func (*UpstreamCloseResponse) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{5}
}

func (x *UpstreamCloseResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamCloseResponse) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *UpstreamCloseResponse) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *UpstreamCloseResponse) GetExtensionFields() *extensions.UpstreamCloseResponseExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdAlias   uint32                                   `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	StreamChunk     *StreamChunk                             `protobuf:"bytes,2,opt,name=stream_chunk,json=streamChunk,proto3" json:"stream_chunk,omitempty"`
	DataIds         []*DataID                                `protobuf:"bytes,3,rep,name=data_ids,json=dataIds,proto3" json:"data_ids,omitempty"`
	ExtensionFields *extensions.UpstreamChunkExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamChunk) Reset() {
	*x = UpstreamChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamChunk) ProtoMessage() {}

func (x *UpstreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamChunk.ProtoReflect.Descriptor instead.
func (*UpstreamChunk) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{6}
}

func (x *UpstreamChunk) GetStreamIdAlias() uint32 {
	if x != nil {
		return x.StreamIdAlias
	}
	return 0
}

func (x *UpstreamChunk) GetStreamChunk() *StreamChunk {
	if x != nil {
		return x.StreamChunk
	}
	return nil
}

func (x *UpstreamChunk) GetDataIds() []*DataID {
	if x != nil {
		return x.DataIds
	}
	return nil
}

func (x *UpstreamChunk) GetExtensionFields() *extensions.UpstreamChunkExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamChunkAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamIdAlias   uint32                                      `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	Results         []*UpstreamChunkResult                      `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	DataIdAliases   map[uint32]*DataID                          `protobuf:"bytes,3,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtensionFields *extensions.UpstreamChunkAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamChunkAck) Reset() {
	*x = UpstreamChunkAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamChunkAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamChunkAck) ProtoMessage() {}

func (x *UpstreamChunkAck) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamChunkAck.ProtoReflect.Descriptor instead.
func (*UpstreamChunkAck) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{7}
}

func (x *UpstreamChunkAck) GetStreamIdAlias() uint32 {
	if x != nil {
		return x.StreamIdAlias
	}
	return 0
}

func (x *UpstreamChunkAck) GetResults() []*UpstreamChunkResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpstreamChunkAck) GetDataIdAliases() map[uint32]*DataID {
	if x != nil {
		return x.DataIdAliases
	}
	return nil
}

func (x *UpstreamChunkAck) GetExtensionFields() *extensions.UpstreamChunkAckExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are assignable to Metadata:
	//
	//	*UpstreamMetadata_BaseTime
	Metadata        isUpstreamMetadata_Metadata                 `protobuf_oneof:"metadata"`
	ExtensionFields *extensions.UpstreamMetadataExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamMetadata) Reset() {
	*x = UpstreamMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamMetadata) ProtoMessage() {}

func (x *UpstreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamMetadata.ProtoReflect.Descriptor instead.
func (*UpstreamMetadata) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{8}
}

func (x *UpstreamMetadata) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *UpstreamMetadata) GetMetadata() isUpstreamMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *UpstreamMetadata) GetBaseTime() *BaseTime {
	if x, ok := x.GetMetadata().(*UpstreamMetadata_BaseTime); ok {
		return x.BaseTime
	}
	return nil
}

func (x *UpstreamMetadata) GetExtensionFields() *extensions.UpstreamMetadataExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type isUpstreamMetadata_Metadata interface {
	isUpstreamMetadata_Metadata()
}

type UpstreamMetadata_BaseTime struct {
	BaseTime *BaseTime `protobuf:"bytes,2,opt,name=base_time,json=baseTime,proto3,oneof"`
}

func (*UpstreamMetadata_BaseTime) isUpstreamMetadata_Metadata() {}

type UpstreamMetadataAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       uint32                                         `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode      ResultCode                                     `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                         `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.UpstreamMetadataAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamMetadataAck) Reset() {
	*x = UpstreamMetadataAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamMetadataAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamMetadataAck) ProtoMessage() {}

func (x *UpstreamMetadataAck) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamMetadataAck.ProtoReflect.Descriptor instead.
func (*UpstreamMetadataAck) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{9}
}

func (x *UpstreamMetadataAck) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UpstreamMetadataAck) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *UpstreamMetadataAck) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *UpstreamMetadataAck) GetExtensionFields() *extensions.UpstreamMetadataAckExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

type UpstreamChunkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber  uint32                                         `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ResultCode      ResultCode                                     `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString    string                                         `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields *extensions.UpstreamChunkResultExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
}

func (x *UpstreamChunkResult) Reset() {
	*x = UpstreamChunkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_upstream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamChunkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamChunkResult) ProtoMessage() {}

func (x *UpstreamChunkResult) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_upstream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamChunkResult.ProtoReflect.Descriptor instead.
func (*UpstreamChunkResult) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_upstream_proto_rawDescGZIP(), []int{10}
}

func (x *UpstreamChunkResult) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *UpstreamChunkResult) GetResultCode() ResultCode {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (x *UpstreamChunkResult) GetResultString() string {
	if x != nil {
		return x.ResultString
	}
	return ""
}

func (x *UpstreamChunkResult) GetExtensionFields() *extensions.UpstreamChunkResultExtensionFields {
	if x != nil {
		return x.ExtensionFields
	}
	return nil
}

var File_iscp2_v1_upstream_proto protoreflect.FileDescriptor

var file_iscp2_v1_upstream_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x73, 0x63, 0x70, 0x32,
	0x2e, 0x76, 0x31, 0x1a, 0x15, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x69, 0x73, 0x63, 0x70,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x03,
	0x71, 0x6f, 0x73, 0x12, 0x62, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xad, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x63,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x52, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x64, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x65, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69,
	0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x63,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x12,
	0x5c, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x73, 0x63, 0x70,
	0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xff, 0x02,
	0x0a, 0x10, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41,
	0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x52, 0x0a, 0x12, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd1, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0xa8, 0x01, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x70, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31,
	0x42, 0x0d, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x74, 0x70, 0x6f, 0x64, 0x2f, 0x69, 0x73, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x3b,
	0x69, 0x73, 0x63, 0x70, 0x32, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x08,
	0x49, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x49, 0x73, 0x63, 0x70, 0x32,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x49, 0x73, 0x63, 0x70, 0x32, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x49, 0x73, 0x63,
	0x70, 0x32, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iscp2_v1_upstream_proto_rawDescOnce sync.Once
	file_iscp2_v1_upstream_proto_rawDescData = file_iscp2_v1_upstream_proto_rawDesc
)

func file_iscp2_v1_upstream_proto_rawDescGZIP() []byte {
	file_iscp2_v1_upstream_proto_rawDescOnce.Do(func() {
		file_iscp2_v1_upstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_iscp2_v1_upstream_proto_rawDescData)
	})
	return file_iscp2_v1_upstream_proto_rawDescData
}

var file_iscp2_v1_upstream_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_iscp2_v1_upstream_proto_goTypes = []interface{}{
	(*UpstreamOpenRequest)(nil),    // 0: iscp2.v1.UpstreamOpenRequest
	(*UpstreamOpenResponse)(nil),   // 1: iscp2.v1.UpstreamOpenResponse
	(*UpstreamResumeRequest)(nil),  // 2: iscp2.v1.UpstreamResumeRequest
	(*UpstreamResumeResponse)(nil), // 3: iscp2.v1.UpstreamResumeResponse
	(*UpstreamCloseRequest)(nil),   // 4: iscp2.v1.UpstreamCloseRequest
	(*UpstreamCloseResponse)(nil),  // 5: iscp2.v1.UpstreamCloseResponse
	(*UpstreamChunk)(nil),          // 6: iscp2.v1.UpstreamChunk
	(*UpstreamChunkAck)(nil),       // 7: iscp2.v1.UpstreamChunkAck
	(*UpstreamMetadata)(nil),       // 8: iscp2.v1.UpstreamMetadata
	(*UpstreamMetadataAck)(nil),    // 9: iscp2.v1.UpstreamMetadataAck
	(*UpstreamChunkResult)(nil),    // 10: iscp2.v1.UpstreamChunkResult
	nil,                            // 11: iscp2.v1.UpstreamOpenResponse.DataIdAliasesEntry
	nil,                            // 12: iscp2.v1.UpstreamChunkAck.DataIdAliasesEntry
	(*DataID)(nil),                 // 13: iscp2.v1.DataID
	(QoS)(0),                       // 14: iscp2.v1.QoS
	(*extensions.UpstreamOpenRequestExtensionFields)(nil), // 15: iscp2.v1.extensions.UpstreamOpenRequestExtensionFields
	(ResultCode)(0), // 16: iscp2.v1.ResultCode
	(*extensions.UpstreamOpenResponseExtensionFields)(nil),   // 17: iscp2.v1.extensions.UpstreamOpenResponseExtensionFields
	(*extensions.UpstreamResumeRequestExtensionFields)(nil),  // 18: iscp2.v1.extensions.UpstreamResumeRequestExtensionFields
	(*extensions.UpstreamResumeResponseExtensionFields)(nil), // 19: iscp2.v1.extensions.UpstreamResumeResponseExtensionFields
	(*extensions.UpstreamCloseRequestExtensionFields)(nil),   // 20: iscp2.v1.extensions.UpstreamCloseRequestExtensionFields
	(*extensions.UpstreamCloseResponseExtensionFields)(nil),  // 21: iscp2.v1.extensions.UpstreamCloseResponseExtensionFields
	(*StreamChunk)(nil),                                   // 22: iscp2.v1.StreamChunk
	(*extensions.UpstreamChunkExtensionFields)(nil),       // 23: iscp2.v1.extensions.UpstreamChunkExtensionFields
	(*extensions.UpstreamChunkAckExtensionFields)(nil),    // 24: iscp2.v1.extensions.UpstreamChunkAckExtensionFields
	(*BaseTime)(nil),                                      // 25: iscp2.v1.BaseTime
	(*extensions.UpstreamMetadataExtensionFields)(nil),    // 26: iscp2.v1.extensions.UpstreamMetadataExtensionFields
	(*extensions.UpstreamMetadataAckExtensionFields)(nil), // 27: iscp2.v1.extensions.UpstreamMetadataAckExtensionFields
	(*extensions.UpstreamChunkResultExtensionFields)(nil), // 28: iscp2.v1.extensions.UpstreamChunkResultExtensionFields
}
var file_iscp2_v1_upstream_proto_depIdxs = []int32{
	13, // 0: iscp2.v1.UpstreamOpenRequest.data_ids:type_name -> iscp2.v1.DataID
	14, // 1: iscp2.v1.UpstreamOpenRequest.qos:type_name -> iscp2.v1.QoS
	15, // 2: iscp2.v1.UpstreamOpenRequest.extension_fields:type_name -> iscp2.v1.extensions.UpstreamOpenRequestExtensionFields
	11, // 3: iscp2.v1.UpstreamOpenResponse.data_id_aliases:type_name -> iscp2.v1.UpstreamOpenResponse.DataIdAliasesEntry
	16, // 4: iscp2.v1.UpstreamOpenResponse.result_code:type_name -> iscp2.v1.ResultCode
	17, // 5: iscp2.v1.UpstreamOpenResponse.extension_fields:type_name -> iscp2.v1.extensions.UpstreamOpenResponseExtensionFields
	18, // 6: iscp2.v1.UpstreamResumeRequest.extension_fields:type_name -> iscp2.v1.extensions.UpstreamResumeRequestExtensionFields
	16, // 7: iscp2.v1.UpstreamResumeResponse.result_code:type_name -> iscp2.v1.ResultCode
	19, // 8: iscp2.v1.UpstreamResumeResponse.extension_fields:type_name -> iscp2.v1.extensions.UpstreamResumeResponseExtensionFields
	20, // 9: iscp2.v1.UpstreamCloseRequest.extension_fields:type_name -> iscp2.v1.extensions.UpstreamCloseRequestExtensionFields
	16, // 10: iscp2.v1.UpstreamCloseResponse.result_code:type_name -> iscp2.v1.ResultCode
	21, // 11: iscp2.v1.UpstreamCloseResponse.extension_fields:type_name -> iscp2.v1.extensions.UpstreamCloseResponseExtensionFields
	22, // 12: iscp2.v1.UpstreamChunk.stream_chunk:type_name -> iscp2.v1.StreamChunk
	13, // 13: iscp2.v1.UpstreamChunk.data_ids:type_name -> iscp2.v1.DataID
	23, // 14: iscp2.v1.UpstreamChunk.extension_fields:type_name -> iscp2.v1.extensions.UpstreamChunkExtensionFields
	10, // 15: iscp2.v1.UpstreamChunkAck.results:type_name -> iscp2.v1.UpstreamChunkResult
	12, // 16: iscp2.v1.UpstreamChunkAck.data_id_aliases:type_name -> iscp2.v1.UpstreamChunkAck.DataIdAliasesEntry
	24, // 17: iscp2.v1.UpstreamChunkAck.extension_fields:type_name -> iscp2.v1.extensions.UpstreamChunkAckExtensionFields
	25, // 18: iscp2.v1.UpstreamMetadata.base_time:type_name -> iscp2.v1.BaseTime
	26, // 19: iscp2.v1.UpstreamMetadata.extension_fields:type_name -> iscp2.v1.extensions.UpstreamMetadataExtensionFields
	16, // 20: iscp2.v1.UpstreamMetadataAck.result_code:type_name -> iscp2.v1.ResultCode
	27, // 21: iscp2.v1.UpstreamMetadataAck.extension_fields:type_name -> iscp2.v1.extensions.UpstreamMetadataAckExtensionFields
	16, // 22: iscp2.v1.UpstreamChunkResult.result_code:type_name -> iscp2.v1.ResultCode
	28, // 23: iscp2.v1.UpstreamChunkResult.extension_fields:type_name -> iscp2.v1.extensions.UpstreamChunkResultExtensionFields
	13, // 24: iscp2.v1.UpstreamOpenResponse.DataIdAliasesEntry.value:type_name -> iscp2.v1.DataID
	13, // 25: iscp2.v1.UpstreamChunkAck.DataIdAliasesEntry.value:type_name -> iscp2.v1.DataID
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_iscp2_v1_upstream_proto_init() }
func file_iscp2_v1_upstream_proto_init() {
	if File_iscp2_v1_upstream_proto != nil {
		return
	}
	file_iscp2_v1_common_proto_init()
	file_iscp2_v1_metadata_proto_init()
	file_iscp2_v1_result_code_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iscp2_v1_upstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamOpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamChunkAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamMetadataAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iscp2_v1_upstream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamChunkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iscp2_v1_upstream_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UpstreamMetadata_BaseTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iscp2_v1_upstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iscp2_v1_upstream_proto_goTypes,
		DependencyIndexes: file_iscp2_v1_upstream_proto_depIdxs,
		MessageInfos:      file_iscp2_v1_upstream_proto_msgTypes,
	}.Build()
	File_iscp2_v1_upstream_proto = out.File
	file_iscp2_v1_upstream_proto_rawDesc = nil
	file_iscp2_v1_upstream_proto_goTypes = nil
	file_iscp2_v1_upstream_proto_depIdxs = nil
}
