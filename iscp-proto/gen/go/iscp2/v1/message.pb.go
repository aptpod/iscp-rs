// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: iscp2/v1/message.proto

package iscp2v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*Message_ConnectRequest
	//	*Message_ConnectResponse
	//	*Message_Disconnect
	//	*Message_UpstreamOpenRequest
	//	*Message_UpstreamOpenResponse
	//	*Message_UpstreamResumeRequest
	//	*Message_UpstreamResumeResponse
	//	*Message_UpstreamCloseRequest
	//	*Message_UpstreamCloseResponse
	//	*Message_UpstreamChunk
	//	*Message_UpstreamChunkAck
	//	*Message_UpstreamMetadata
	//	*Message_UpstreamMetadataAck
	//	*Message_DownstreamOpenRequest
	//	*Message_DownstreamOpenResponse
	//	*Message_DownstreamResumeRequest
	//	*Message_DownstreamResumeResponse
	//	*Message_DownstreamCloseRequest
	//	*Message_DownstreamCloseResponse
	//	*Message_DownstreamChunk
	//	*Message_DownstreamChunkAck
	//	*Message_DownstreamChunkAckComplete
	//	*Message_DownstreamMetadata
	//	*Message_DownstreamMetadataAck
	//	*Message_Ping
	//	*Message_Pong
	//	*Message_UpstreamCall
	//	*Message_UpstreamCallAck
	//	*Message_DownstreamCall
	Message isMessage_Message `protobuf_oneof:"message"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iscp2_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_iscp2_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_iscp2_v1_message_proto_rawDescGZIP(), []int{0}
}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Message) GetConnectRequest() *ConnectRequest {
	if x, ok := x.GetMessage().(*Message_ConnectRequest); ok {
		return x.ConnectRequest
	}
	return nil
}

func (x *Message) GetConnectResponse() *ConnectResponse {
	if x, ok := x.GetMessage().(*Message_ConnectResponse); ok {
		return x.ConnectResponse
	}
	return nil
}

func (x *Message) GetDisconnect() *Disconnect {
	if x, ok := x.GetMessage().(*Message_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (x *Message) GetUpstreamOpenRequest() *UpstreamOpenRequest {
	if x, ok := x.GetMessage().(*Message_UpstreamOpenRequest); ok {
		return x.UpstreamOpenRequest
	}
	return nil
}

func (x *Message) GetUpstreamOpenResponse() *UpstreamOpenResponse {
	if x, ok := x.GetMessage().(*Message_UpstreamOpenResponse); ok {
		return x.UpstreamOpenResponse
	}
	return nil
}

func (x *Message) GetUpstreamResumeRequest() *UpstreamResumeRequest {
	if x, ok := x.GetMessage().(*Message_UpstreamResumeRequest); ok {
		return x.UpstreamResumeRequest
	}
	return nil
}

func (x *Message) GetUpstreamResumeResponse() *UpstreamResumeResponse {
	if x, ok := x.GetMessage().(*Message_UpstreamResumeResponse); ok {
		return x.UpstreamResumeResponse
	}
	return nil
}

func (x *Message) GetUpstreamCloseRequest() *UpstreamCloseRequest {
	if x, ok := x.GetMessage().(*Message_UpstreamCloseRequest); ok {
		return x.UpstreamCloseRequest
	}
	return nil
}

func (x *Message) GetUpstreamCloseResponse() *UpstreamCloseResponse {
	if x, ok := x.GetMessage().(*Message_UpstreamCloseResponse); ok {
		return x.UpstreamCloseResponse
	}
	return nil
}

func (x *Message) GetUpstreamChunk() *UpstreamChunk {
	if x, ok := x.GetMessage().(*Message_UpstreamChunk); ok {
		return x.UpstreamChunk
	}
	return nil
}

func (x *Message) GetUpstreamChunkAck() *UpstreamChunkAck {
	if x, ok := x.GetMessage().(*Message_UpstreamChunkAck); ok {
		return x.UpstreamChunkAck
	}
	return nil
}

func (x *Message) GetUpstreamMetadata() *UpstreamMetadata {
	if x, ok := x.GetMessage().(*Message_UpstreamMetadata); ok {
		return x.UpstreamMetadata
	}
	return nil
}

func (x *Message) GetUpstreamMetadataAck() *UpstreamMetadataAck {
	if x, ok := x.GetMessage().(*Message_UpstreamMetadataAck); ok {
		return x.UpstreamMetadataAck
	}
	return nil
}

func (x *Message) GetDownstreamOpenRequest() *DownstreamOpenRequest {
	if x, ok := x.GetMessage().(*Message_DownstreamOpenRequest); ok {
		return x.DownstreamOpenRequest
	}
	return nil
}

func (x *Message) GetDownstreamOpenResponse() *DownstreamOpenResponse {
	if x, ok := x.GetMessage().(*Message_DownstreamOpenResponse); ok {
		return x.DownstreamOpenResponse
	}
	return nil
}

func (x *Message) GetDownstreamResumeRequest() *DownstreamResumeRequest {
	if x, ok := x.GetMessage().(*Message_DownstreamResumeRequest); ok {
		return x.DownstreamResumeRequest
	}
	return nil
}

func (x *Message) GetDownstreamResumeResponse() *DownstreamResumeResponse {
	if x, ok := x.GetMessage().(*Message_DownstreamResumeResponse); ok {
		return x.DownstreamResumeResponse
	}
	return nil
}

func (x *Message) GetDownstreamCloseRequest() *DownstreamCloseRequest {
	if x, ok := x.GetMessage().(*Message_DownstreamCloseRequest); ok {
		return x.DownstreamCloseRequest
	}
	return nil
}

func (x *Message) GetDownstreamCloseResponse() *DownstreamCloseResponse {
	if x, ok := x.GetMessage().(*Message_DownstreamCloseResponse); ok {
		return x.DownstreamCloseResponse
	}
	return nil
}

func (x *Message) GetDownstreamChunk() *DownstreamChunk {
	if x, ok := x.GetMessage().(*Message_DownstreamChunk); ok {
		return x.DownstreamChunk
	}
	return nil
}

func (x *Message) GetDownstreamChunkAck() *DownstreamChunkAck {
	if x, ok := x.GetMessage().(*Message_DownstreamChunkAck); ok {
		return x.DownstreamChunkAck
	}
	return nil
}

func (x *Message) GetDownstreamChunkAckComplete() *DownstreamChunkAckComplete {
	if x, ok := x.GetMessage().(*Message_DownstreamChunkAckComplete); ok {
		return x.DownstreamChunkAckComplete
	}
	return nil
}

func (x *Message) GetDownstreamMetadata() *DownstreamMetadata {
	if x, ok := x.GetMessage().(*Message_DownstreamMetadata); ok {
		return x.DownstreamMetadata
	}
	return nil
}

func (x *Message) GetDownstreamMetadataAck() *DownstreamMetadataAck {
	if x, ok := x.GetMessage().(*Message_DownstreamMetadataAck); ok {
		return x.DownstreamMetadataAck
	}
	return nil
}

func (x *Message) GetPing() *Ping {
	if x, ok := x.GetMessage().(*Message_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Message) GetPong() *Pong {
	if x, ok := x.GetMessage().(*Message_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *Message) GetUpstreamCall() *UpstreamCall {
	if x, ok := x.GetMessage().(*Message_UpstreamCall); ok {
		return x.UpstreamCall
	}
	return nil
}

func (x *Message) GetUpstreamCallAck() *UpstreamCallAck {
	if x, ok := x.GetMessage().(*Message_UpstreamCallAck); ok {
		return x.UpstreamCallAck
	}
	return nil
}

func (x *Message) GetDownstreamCall() *DownstreamCall {
	if x, ok := x.GetMessage().(*Message_DownstreamCall); ok {
		return x.DownstreamCall
	}
	return nil
}

type isMessage_Message interface {
	isMessage_Message()
}

type Message_ConnectRequest struct {
	// Connect
	ConnectRequest *ConnectRequest `protobuf:"bytes,1,opt,name=connect_request,json=connectRequest,proto3,oneof"`
}

type Message_ConnectResponse struct {
	ConnectResponse *ConnectResponse `protobuf:"bytes,2,opt,name=connect_response,json=connectResponse,proto3,oneof"`
}

type Message_Disconnect struct {
	Disconnect *Disconnect `protobuf:"bytes,3,opt,name=disconnect,proto3,oneof"`
}

type Message_UpstreamOpenRequest struct {
	// Upstream
	UpstreamOpenRequest *UpstreamOpenRequest `protobuf:"bytes,64,opt,name=upstream_open_request,json=upstreamOpenRequest,proto3,oneof"`
}

type Message_UpstreamOpenResponse struct {
	UpstreamOpenResponse *UpstreamOpenResponse `protobuf:"bytes,65,opt,name=upstream_open_response,json=upstreamOpenResponse,proto3,oneof"`
}

type Message_UpstreamResumeRequest struct {
	UpstreamResumeRequest *UpstreamResumeRequest `protobuf:"bytes,66,opt,name=upstream_resume_request,json=upstreamResumeRequest,proto3,oneof"`
}

type Message_UpstreamResumeResponse struct {
	UpstreamResumeResponse *UpstreamResumeResponse `protobuf:"bytes,67,opt,name=upstream_resume_response,json=upstreamResumeResponse,proto3,oneof"`
}

type Message_UpstreamCloseRequest struct {
	UpstreamCloseRequest *UpstreamCloseRequest `protobuf:"bytes,68,opt,name=upstream_close_request,json=upstreamCloseRequest,proto3,oneof"`
}

type Message_UpstreamCloseResponse struct {
	UpstreamCloseResponse *UpstreamCloseResponse `protobuf:"bytes,69,opt,name=upstream_close_response,json=upstreamCloseResponse,proto3,oneof"`
}

type Message_UpstreamChunk struct {
	UpstreamChunk *UpstreamChunk `protobuf:"bytes,70,opt,name=upstream_chunk,json=upstreamChunk,proto3,oneof"`
}

type Message_UpstreamChunkAck struct {
	UpstreamChunkAck *UpstreamChunkAck `protobuf:"bytes,71,opt,name=upstream_chunk_ack,json=upstreamChunkAck,proto3,oneof"`
}

type Message_UpstreamMetadata struct {
	UpstreamMetadata *UpstreamMetadata `protobuf:"bytes,72,opt,name=upstream_metadata,json=upstreamMetadata,proto3,oneof"`
}

type Message_UpstreamMetadataAck struct {
	UpstreamMetadataAck *UpstreamMetadataAck `protobuf:"bytes,73,opt,name=upstream_metadata_ack,json=upstreamMetadataAck,proto3,oneof"`
}

type Message_DownstreamOpenRequest struct {
	// Downstream
	DownstreamOpenRequest *DownstreamOpenRequest `protobuf:"bytes,128,opt,name=downstream_open_request,json=downstreamOpenRequest,proto3,oneof"`
}

type Message_DownstreamOpenResponse struct {
	DownstreamOpenResponse *DownstreamOpenResponse `protobuf:"bytes,129,opt,name=downstream_open_response,json=downstreamOpenResponse,proto3,oneof"`
}

type Message_DownstreamResumeRequest struct {
	DownstreamResumeRequest *DownstreamResumeRequest `protobuf:"bytes,130,opt,name=downstream_resume_request,json=downstreamResumeRequest,proto3,oneof"`
}

type Message_DownstreamResumeResponse struct {
	DownstreamResumeResponse *DownstreamResumeResponse `protobuf:"bytes,131,opt,name=downstream_resume_response,json=downstreamResumeResponse,proto3,oneof"`
}

type Message_DownstreamCloseRequest struct {
	DownstreamCloseRequest *DownstreamCloseRequest `protobuf:"bytes,132,opt,name=downstream_close_request,json=downstreamCloseRequest,proto3,oneof"`
}

type Message_DownstreamCloseResponse struct {
	DownstreamCloseResponse *DownstreamCloseResponse `protobuf:"bytes,133,opt,name=downstream_close_response,json=downstreamCloseResponse,proto3,oneof"`
}

type Message_DownstreamChunk struct {
	DownstreamChunk *DownstreamChunk `protobuf:"bytes,134,opt,name=downstream_chunk,json=downstreamChunk,proto3,oneof"`
}

type Message_DownstreamChunkAck struct {
	DownstreamChunkAck *DownstreamChunkAck `protobuf:"bytes,135,opt,name=downstream_chunk_ack,json=downstreamChunkAck,proto3,oneof"`
}

type Message_DownstreamChunkAckComplete struct {
	DownstreamChunkAckComplete *DownstreamChunkAckComplete `protobuf:"bytes,136,opt,name=downstream_chunk_ack_complete,json=downstreamChunkAckComplete,proto3,oneof"`
}

type Message_DownstreamMetadata struct {
	DownstreamMetadata *DownstreamMetadata `protobuf:"bytes,137,opt,name=downstream_metadata,json=downstreamMetadata,proto3,oneof"`
}

type Message_DownstreamMetadataAck struct {
	DownstreamMetadataAck *DownstreamMetadataAck `protobuf:"bytes,138,opt,name=downstream_metadata_ack,json=downstreamMetadataAck,proto3,oneof"`
}

type Message_Ping struct {
	// Ping/Pong
	Ping *Ping `protobuf:"bytes,192,opt,name=ping,proto3,oneof"`
}

type Message_Pong struct {
	Pong *Pong `protobuf:"bytes,193,opt,name=pong,proto3,oneof"`
}

type Message_UpstreamCall struct {
	// E2E Call
	UpstreamCall *UpstreamCall `protobuf:"bytes,256,opt,name=upstream_call,json=upstreamCall,proto3,oneof"`
}

type Message_UpstreamCallAck struct {
	UpstreamCallAck *UpstreamCallAck `protobuf:"bytes,257,opt,name=upstream_call_ack,json=upstreamCallAck,proto3,oneof"`
}

type Message_DownstreamCall struct {
	DownstreamCall *DownstreamCall `protobuf:"bytes,258,opt,name=downstream_call,json=downstreamCall,proto3,oneof"`
}

func (*Message_ConnectRequest) isMessage_Message() {}

func (*Message_ConnectResponse) isMessage_Message() {}

func (*Message_Disconnect) isMessage_Message() {}

func (*Message_UpstreamOpenRequest) isMessage_Message() {}

func (*Message_UpstreamOpenResponse) isMessage_Message() {}

func (*Message_UpstreamResumeRequest) isMessage_Message() {}

func (*Message_UpstreamResumeResponse) isMessage_Message() {}

func (*Message_UpstreamCloseRequest) isMessage_Message() {}

func (*Message_UpstreamCloseResponse) isMessage_Message() {}

func (*Message_UpstreamChunk) isMessage_Message() {}

func (*Message_UpstreamChunkAck) isMessage_Message() {}

func (*Message_UpstreamMetadata) isMessage_Message() {}

func (*Message_UpstreamMetadataAck) isMessage_Message() {}

func (*Message_DownstreamOpenRequest) isMessage_Message() {}

func (*Message_DownstreamOpenResponse) isMessage_Message() {}

func (*Message_DownstreamResumeRequest) isMessage_Message() {}

func (*Message_DownstreamResumeResponse) isMessage_Message() {}

func (*Message_DownstreamCloseRequest) isMessage_Message() {}

func (*Message_DownstreamCloseResponse) isMessage_Message() {}

func (*Message_DownstreamChunk) isMessage_Message() {}

func (*Message_DownstreamChunkAck) isMessage_Message() {}

func (*Message_DownstreamChunkAckComplete) isMessage_Message() {}

func (*Message_DownstreamMetadata) isMessage_Message() {}

func (*Message_DownstreamMetadataAck) isMessage_Message() {}

func (*Message_Ping) isMessage_Message() {}

func (*Message_Pong) isMessage_Message() {}

func (*Message_UpstreamCall) isMessage_Message() {}

func (*Message_UpstreamCallAck) isMessage_Message() {}

func (*Message_DownstreamCall) isMessage_Message() {}

var File_iscp2_v1_message_proto protoreflect.FileDescriptor

var file_iscp2_v1_message_proto_rawDesc = []byte{
	0x0a, 0x16, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69,
	0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x32, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x12, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x63, 0x70,
	0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a,
	0x18, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x4a, 0x0a, 0x12, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69,
	0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x11,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x15, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x6b,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x17,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1a, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x18, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a,
	0x19, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x63,
	0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x51, 0x0a, 0x14, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x6b,
	0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x12, 0x6a, 0x0a, 0x1d, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x17, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x63, 0x6b, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x15,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0xc0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73,
	0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x44, 0x0a,
	0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0xa7,
	0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x70,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x73, 0x63, 0x70, 0x32,
	0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x70, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x69, 0x73, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x73, 0x63, 0x70, 0x32, 0x2f, 0x76,
	0x31, 0x3b, 0x69, 0x73, 0x63, 0x70, 0x32, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa,
	0x02, 0x08, 0x49, 0x73, 0x63, 0x70, 0x32, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x49, 0x73, 0x63,
	0x70, 0x32, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x49, 0x73, 0x63, 0x70, 0x32, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x49,
	0x73, 0x63, 0x70, 0x32, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iscp2_v1_message_proto_rawDescOnce sync.Once
	file_iscp2_v1_message_proto_rawDescData = file_iscp2_v1_message_proto_rawDesc
)

func file_iscp2_v1_message_proto_rawDescGZIP() []byte {
	file_iscp2_v1_message_proto_rawDescOnce.Do(func() {
		file_iscp2_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_iscp2_v1_message_proto_rawDescData)
	})
	return file_iscp2_v1_message_proto_rawDescData
}

var file_iscp2_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_iscp2_v1_message_proto_goTypes = []interface{}{
	(*Message)(nil),                    // 0: iscp2.v1.Message
	(*ConnectRequest)(nil),             // 1: iscp2.v1.ConnectRequest
	(*ConnectResponse)(nil),            // 2: iscp2.v1.ConnectResponse
	(*Disconnect)(nil),                 // 3: iscp2.v1.Disconnect
	(*UpstreamOpenRequest)(nil),        // 4: iscp2.v1.UpstreamOpenRequest
	(*UpstreamOpenResponse)(nil),       // 5: iscp2.v1.UpstreamOpenResponse
	(*UpstreamResumeRequest)(nil),      // 6: iscp2.v1.UpstreamResumeRequest
	(*UpstreamResumeResponse)(nil),     // 7: iscp2.v1.UpstreamResumeResponse
	(*UpstreamCloseRequest)(nil),       // 8: iscp2.v1.UpstreamCloseRequest
	(*UpstreamCloseResponse)(nil),      // 9: iscp2.v1.UpstreamCloseResponse
	(*UpstreamChunk)(nil),              // 10: iscp2.v1.UpstreamChunk
	(*UpstreamChunkAck)(nil),           // 11: iscp2.v1.UpstreamChunkAck
	(*UpstreamMetadata)(nil),           // 12: iscp2.v1.UpstreamMetadata
	(*UpstreamMetadataAck)(nil),        // 13: iscp2.v1.UpstreamMetadataAck
	(*DownstreamOpenRequest)(nil),      // 14: iscp2.v1.DownstreamOpenRequest
	(*DownstreamOpenResponse)(nil),     // 15: iscp2.v1.DownstreamOpenResponse
	(*DownstreamResumeRequest)(nil),    // 16: iscp2.v1.DownstreamResumeRequest
	(*DownstreamResumeResponse)(nil),   // 17: iscp2.v1.DownstreamResumeResponse
	(*DownstreamCloseRequest)(nil),     // 18: iscp2.v1.DownstreamCloseRequest
	(*DownstreamCloseResponse)(nil),    // 19: iscp2.v1.DownstreamCloseResponse
	(*DownstreamChunk)(nil),            // 20: iscp2.v1.DownstreamChunk
	(*DownstreamChunkAck)(nil),         // 21: iscp2.v1.DownstreamChunkAck
	(*DownstreamChunkAckComplete)(nil), // 22: iscp2.v1.DownstreamChunkAckComplete
	(*DownstreamMetadata)(nil),         // 23: iscp2.v1.DownstreamMetadata
	(*DownstreamMetadataAck)(nil),      // 24: iscp2.v1.DownstreamMetadataAck
	(*Ping)(nil),                       // 25: iscp2.v1.Ping
	(*Pong)(nil),                       // 26: iscp2.v1.Pong
	(*UpstreamCall)(nil),               // 27: iscp2.v1.UpstreamCall
	(*UpstreamCallAck)(nil),            // 28: iscp2.v1.UpstreamCallAck
	(*DownstreamCall)(nil),             // 29: iscp2.v1.DownstreamCall
}
var file_iscp2_v1_message_proto_depIdxs = []int32{
	1,  // 0: iscp2.v1.Message.connect_request:type_name -> iscp2.v1.ConnectRequest
	2,  // 1: iscp2.v1.Message.connect_response:type_name -> iscp2.v1.ConnectResponse
	3,  // 2: iscp2.v1.Message.disconnect:type_name -> iscp2.v1.Disconnect
	4,  // 3: iscp2.v1.Message.upstream_open_request:type_name -> iscp2.v1.UpstreamOpenRequest
	5,  // 4: iscp2.v1.Message.upstream_open_response:type_name -> iscp2.v1.UpstreamOpenResponse
	6,  // 5: iscp2.v1.Message.upstream_resume_request:type_name -> iscp2.v1.UpstreamResumeRequest
	7,  // 6: iscp2.v1.Message.upstream_resume_response:type_name -> iscp2.v1.UpstreamResumeResponse
	8,  // 7: iscp2.v1.Message.upstream_close_request:type_name -> iscp2.v1.UpstreamCloseRequest
	9,  // 8: iscp2.v1.Message.upstream_close_response:type_name -> iscp2.v1.UpstreamCloseResponse
	10, // 9: iscp2.v1.Message.upstream_chunk:type_name -> iscp2.v1.UpstreamChunk
	11, // 10: iscp2.v1.Message.upstream_chunk_ack:type_name -> iscp2.v1.UpstreamChunkAck
	12, // 11: iscp2.v1.Message.upstream_metadata:type_name -> iscp2.v1.UpstreamMetadata
	13, // 12: iscp2.v1.Message.upstream_metadata_ack:type_name -> iscp2.v1.UpstreamMetadataAck
	14, // 13: iscp2.v1.Message.downstream_open_request:type_name -> iscp2.v1.DownstreamOpenRequest
	15, // 14: iscp2.v1.Message.downstream_open_response:type_name -> iscp2.v1.DownstreamOpenResponse
	16, // 15: iscp2.v1.Message.downstream_resume_request:type_name -> iscp2.v1.DownstreamResumeRequest
	17, // 16: iscp2.v1.Message.downstream_resume_response:type_name -> iscp2.v1.DownstreamResumeResponse
	18, // 17: iscp2.v1.Message.downstream_close_request:type_name -> iscp2.v1.DownstreamCloseRequest
	19, // 18: iscp2.v1.Message.downstream_close_response:type_name -> iscp2.v1.DownstreamCloseResponse
	20, // 19: iscp2.v1.Message.downstream_chunk:type_name -> iscp2.v1.DownstreamChunk
	21, // 20: iscp2.v1.Message.downstream_chunk_ack:type_name -> iscp2.v1.DownstreamChunkAck
	22, // 21: iscp2.v1.Message.downstream_chunk_ack_complete:type_name -> iscp2.v1.DownstreamChunkAckComplete
	23, // 22: iscp2.v1.Message.downstream_metadata:type_name -> iscp2.v1.DownstreamMetadata
	24, // 23: iscp2.v1.Message.downstream_metadata_ack:type_name -> iscp2.v1.DownstreamMetadataAck
	25, // 24: iscp2.v1.Message.ping:type_name -> iscp2.v1.Ping
	26, // 25: iscp2.v1.Message.pong:type_name -> iscp2.v1.Pong
	27, // 26: iscp2.v1.Message.upstream_call:type_name -> iscp2.v1.UpstreamCall
	28, // 27: iscp2.v1.Message.upstream_call_ack:type_name -> iscp2.v1.UpstreamCallAck
	29, // 28: iscp2.v1.Message.downstream_call:type_name -> iscp2.v1.DownstreamCall
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_iscp2_v1_message_proto_init() }
func file_iscp2_v1_message_proto_init() {
	if File_iscp2_v1_message_proto != nil {
		return
	}
	file_iscp2_v1_connection_proto_init()
	file_iscp2_v1_downstream_proto_init()
	file_iscp2_v1_e2e_call_proto_init()
	file_iscp2_v1_ping_pong_proto_init()
	file_iscp2_v1_upstream_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iscp2_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_iscp2_v1_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_ConnectRequest)(nil),
		(*Message_ConnectResponse)(nil),
		(*Message_Disconnect)(nil),
		(*Message_UpstreamOpenRequest)(nil),
		(*Message_UpstreamOpenResponse)(nil),
		(*Message_UpstreamResumeRequest)(nil),
		(*Message_UpstreamResumeResponse)(nil),
		(*Message_UpstreamCloseRequest)(nil),
		(*Message_UpstreamCloseResponse)(nil),
		(*Message_UpstreamChunk)(nil),
		(*Message_UpstreamChunkAck)(nil),
		(*Message_UpstreamMetadata)(nil),
		(*Message_UpstreamMetadataAck)(nil),
		(*Message_DownstreamOpenRequest)(nil),
		(*Message_DownstreamOpenResponse)(nil),
		(*Message_DownstreamResumeRequest)(nil),
		(*Message_DownstreamResumeResponse)(nil),
		(*Message_DownstreamCloseRequest)(nil),
		(*Message_DownstreamCloseResponse)(nil),
		(*Message_DownstreamChunk)(nil),
		(*Message_DownstreamChunkAck)(nil),
		(*Message_DownstreamChunkAckComplete)(nil),
		(*Message_DownstreamMetadata)(nil),
		(*Message_DownstreamMetadataAck)(nil),
		(*Message_Ping)(nil),
		(*Message_Pong)(nil),
		(*Message_UpstreamCall)(nil),
		(*Message_UpstreamCallAck)(nil),
		(*Message_DownstreamCall)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iscp2_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iscp2_v1_message_proto_goTypes,
		DependencyIndexes: file_iscp2_v1_message_proto_depIdxs,
		MessageInfos:      file_iscp2_v1_message_proto_msgTypes,
	}.Build()
	File_iscp2_v1_message_proto = out.File
	file_iscp2_v1_message_proto_rawDesc = nil
	file_iscp2_v1_message_proto_goTypes = nil
	file_iscp2_v1_message_proto_depIdxs = nil
}
