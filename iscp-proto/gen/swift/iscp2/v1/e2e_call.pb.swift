// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: iscp2/v1/e2e_call.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Iscp2_V1_UpstreamCall {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var callID: String = String()

  var requestCallID: String = String()

  var destinationNodeID: String = String()

  var name: String = String()

  var type: String = String()

  var payload: Data = Data()

  var extensionFields: Iscp2_V1_Extensions_UpstreamCallExtensionFields {
    get {return _extensionFields ?? Iscp2_V1_Extensions_UpstreamCallExtensionFields()}
    set {_extensionFields = newValue}
  }
  /// Returns true if `extensionFields` has been explicitly set.
  var hasExtensionFields: Bool {return self._extensionFields != nil}
  /// Clears the value of `extensionFields`. Subsequent reads from it will return its default value.
  mutating func clearExtensionFields() {self._extensionFields = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _extensionFields: Iscp2_V1_Extensions_UpstreamCallExtensionFields? = nil
}

struct Iscp2_V1_UpstreamCallAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var callID: String = String()

  var resultCode: Iscp2_V1_ResultCode = .succeeded

  var resultString: String = String()

  var extensionFields: Iscp2_V1_Extensions_UpstreamCallAckExtensionFields {
    get {return _extensionFields ?? Iscp2_V1_Extensions_UpstreamCallAckExtensionFields()}
    set {_extensionFields = newValue}
  }
  /// Returns true if `extensionFields` has been explicitly set.
  var hasExtensionFields: Bool {return self._extensionFields != nil}
  /// Clears the value of `extensionFields`. Subsequent reads from it will return its default value.
  mutating func clearExtensionFields() {self._extensionFields = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _extensionFields: Iscp2_V1_Extensions_UpstreamCallAckExtensionFields? = nil
}

struct Iscp2_V1_DownstreamCall {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var callID: String = String()

  var requestCallID: String = String()

  var sourceNodeID: String = String()

  var name: String = String()

  var type: String = String()

  var payload: Data = Data()

  var extensionFields: Iscp2_V1_Extensions_DownstreamCallExtensionFields {
    get {return _extensionFields ?? Iscp2_V1_Extensions_DownstreamCallExtensionFields()}
    set {_extensionFields = newValue}
  }
  /// Returns true if `extensionFields` has been explicitly set.
  var hasExtensionFields: Bool {return self._extensionFields != nil}
  /// Clears the value of `extensionFields`. Subsequent reads from it will return its default value.
  mutating func clearExtensionFields() {self._extensionFields = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _extensionFields: Iscp2_V1_Extensions_DownstreamCallExtensionFields? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Iscp2_V1_UpstreamCall: @unchecked Sendable {}
extension Iscp2_V1_UpstreamCallAck: @unchecked Sendable {}
extension Iscp2_V1_DownstreamCall: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "iscp2.v1"

extension Iscp2_V1_UpstreamCall: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpstreamCall"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "call_id"),
    2: .standard(proto: "request_call_id"),
    3: .standard(proto: "destination_node_id"),
    4: .same(proto: "name"),
    5: .same(proto: "type"),
    6: .same(proto: "payload"),
    7: .standard(proto: "extension_fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.callID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requestCallID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destinationNodeID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._extensionFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.callID.isEmpty {
      try visitor.visitSingularStringField(value: self.callID, fieldNumber: 1)
    }
    if !self.requestCallID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestCallID, fieldNumber: 2)
    }
    if !self.destinationNodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationNodeID, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 6)
    }
    try { if let v = self._extensionFields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Iscp2_V1_UpstreamCall, rhs: Iscp2_V1_UpstreamCall) -> Bool {
    if lhs.callID != rhs.callID {return false}
    if lhs.requestCallID != rhs.requestCallID {return false}
    if lhs.destinationNodeID != rhs.destinationNodeID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs._extensionFields != rhs._extensionFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iscp2_V1_UpstreamCallAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpstreamCallAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "call_id"),
    2: .standard(proto: "result_code"),
    3: .standard(proto: "result_string"),
    4: .standard(proto: "extension_fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.callID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.resultCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.resultString) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._extensionFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.callID.isEmpty {
      try visitor.visitSingularStringField(value: self.callID, fieldNumber: 1)
    }
    if self.resultCode != .succeeded {
      try visitor.visitSingularEnumField(value: self.resultCode, fieldNumber: 2)
    }
    if !self.resultString.isEmpty {
      try visitor.visitSingularStringField(value: self.resultString, fieldNumber: 3)
    }
    try { if let v = self._extensionFields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Iscp2_V1_UpstreamCallAck, rhs: Iscp2_V1_UpstreamCallAck) -> Bool {
    if lhs.callID != rhs.callID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.resultString != rhs.resultString {return false}
    if lhs._extensionFields != rhs._extensionFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Iscp2_V1_DownstreamCall: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownstreamCall"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "call_id"),
    2: .standard(proto: "request_call_id"),
    3: .standard(proto: "source_node_id"),
    4: .same(proto: "name"),
    5: .same(proto: "type"),
    6: .same(proto: "payload"),
    7: .standard(proto: "extension_fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.callID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requestCallID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceNodeID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._extensionFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.callID.isEmpty {
      try visitor.visitSingularStringField(value: self.callID, fieldNumber: 1)
    }
    if !self.requestCallID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestCallID, fieldNumber: 2)
    }
    if !self.sourceNodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceNodeID, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 6)
    }
    try { if let v = self._extensionFields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Iscp2_V1_DownstreamCall, rhs: Iscp2_V1_DownstreamCall) -> Bool {
    if lhs.callID != rhs.callID {return false}
    if lhs.requestCallID != rhs.requestCallID {return false}
    if lhs.sourceNodeID != rhs.sourceNodeID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs._extensionFields != rhs._extensionFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
