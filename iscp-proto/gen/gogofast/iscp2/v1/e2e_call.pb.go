// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscp2/v1/e2e_call.proto

package iscp2v1

import (
	fmt "fmt"
	extensions "github.com/aptpod/iscp-proto/gen/gogofast/iscp2/v1/extensions"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpstreamCall struct {
	CallId               string                                  `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	RequestCallId        string                                  `protobuf:"bytes,2,opt,name=request_call_id,json=requestCallId,proto3" json:"request_call_id,omitempty"`
	DestinationNodeId    string                                  `protobuf:"bytes,3,opt,name=destination_node_id,json=destinationNodeId,proto3" json:"destination_node_id,omitempty"`
	Name                 string                                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                                  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Payload              []byte                                  `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	ExtensionFields      *extensions.UpstreamCallExtensionFields `protobuf:"bytes,7,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *UpstreamCall) Reset()         { *m = UpstreamCall{} }
func (m *UpstreamCall) String() string { return proto.CompactTextString(m) }
func (*UpstreamCall) ProtoMessage()    {}
func (*UpstreamCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d4d229d65edf3, []int{0}
}
func (m *UpstreamCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCall.Merge(m, src)
}
func (m *UpstreamCall) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCall) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCall.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCall proto.InternalMessageInfo

func (m *UpstreamCall) GetCallId() string {
	if m != nil {
		return m.CallId
	}
	return ""
}

func (m *UpstreamCall) GetRequestCallId() string {
	if m != nil {
		return m.RequestCallId
	}
	return ""
}

func (m *UpstreamCall) GetDestinationNodeId() string {
	if m != nil {
		return m.DestinationNodeId
	}
	return ""
}

func (m *UpstreamCall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpstreamCall) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpstreamCall) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpstreamCall) GetExtensionFields() *extensions.UpstreamCallExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamCallAck struct {
	CallId               string                                     `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	ResultCode           ResultCode                                 `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                     `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.UpstreamCallAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *UpstreamCallAck) Reset()         { *m = UpstreamCallAck{} }
func (m *UpstreamCallAck) String() string { return proto.CompactTextString(m) }
func (*UpstreamCallAck) ProtoMessage()    {}
func (*UpstreamCallAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d4d229d65edf3, []int{1}
}
func (m *UpstreamCallAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCallAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamCallAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamCallAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCallAck.Merge(m, src)
}
func (m *UpstreamCallAck) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCallAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCallAck.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCallAck proto.InternalMessageInfo

func (m *UpstreamCallAck) GetCallId() string {
	if m != nil {
		return m.CallId
	}
	return ""
}

func (m *UpstreamCallAck) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *UpstreamCallAck) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *UpstreamCallAck) GetExtensionFields() *extensions.UpstreamCallAckExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type DownstreamCall struct {
	CallId               string                                    `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	RequestCallId        string                                    `protobuf:"bytes,2,opt,name=request_call_id,json=requestCallId,proto3" json:"request_call_id,omitempty"`
	SourceNodeId         string                                    `protobuf:"bytes,3,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	Name                 string                                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                                    `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Payload              []byte                                    `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	ExtensionFields      *extensions.DownstreamCallExtensionFields `protobuf:"bytes,7,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *DownstreamCall) Reset()         { *m = DownstreamCall{} }
func (m *DownstreamCall) String() string { return proto.CompactTextString(m) }
func (*DownstreamCall) ProtoMessage()    {}
func (*DownstreamCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_a57d4d229d65edf3, []int{2}
}
func (m *DownstreamCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamCall.Merge(m, src)
}
func (m *DownstreamCall) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamCall) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamCall.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamCall proto.InternalMessageInfo

func (m *DownstreamCall) GetCallId() string {
	if m != nil {
		return m.CallId
	}
	return ""
}

func (m *DownstreamCall) GetRequestCallId() string {
	if m != nil {
		return m.RequestCallId
	}
	return ""
}

func (m *DownstreamCall) GetSourceNodeId() string {
	if m != nil {
		return m.SourceNodeId
	}
	return ""
}

func (m *DownstreamCall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DownstreamCall) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DownstreamCall) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DownstreamCall) GetExtensionFields() *extensions.DownstreamCallExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

func init() {
	proto.RegisterType((*UpstreamCall)(nil), "iscp2.v1.UpstreamCall")
	proto.RegisterType((*UpstreamCallAck)(nil), "iscp2.v1.UpstreamCallAck")
	proto.RegisterType((*DownstreamCall)(nil), "iscp2.v1.DownstreamCall")
}

func init() { proto.RegisterFile("iscp2/v1/e2e_call.proto", fileDescriptor_a57d4d229d65edf3) }

var fileDescriptor_a57d4d229d65edf3 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0xba, 0x21, 0x69, 0xb7, 0x6e, 0x02, 0x4b, 0xa5, 0x5a, 0x39, 0x44, 0x51, 0x40, 0x28,
	0x17, 0x6c, 0xec, 0x8a, 0x4b, 0x38, 0x35, 0xa1, 0xa0, 0x1c, 0x40, 0x51, 0x10, 0x51, 0x05, 0x05,
	0x6b, 0xeb, 0x9d, 0x1a, 0xab, 0xce, 0xae, 0xf1, 0x6e, 0x02, 0xfd, 0x13, 0x4e, 0x1c, 0x90, 0xb8,
	0xf0, 0x25, 0x88, 0x13, 0x9f, 0x80, 0x72, 0xe0, 0xc0, 0x57, 0x20, 0xaf, 0xe3, 0x24, 0xad, 0x5a,
	0xe5, 0xd2, 0xdb, 0xdb, 0x37, 0x6f, 0xc6, 0x7e, 0x4f, 0x33, 0x78, 0x2f, 0x92, 0x41, 0xe2, 0x39,
	0x53, 0xd7, 0x01, 0x0f, 0xfc, 0x80, 0xc6, 0xb1, 0x9d, 0xa4, 0x42, 0x09, 0xb2, 0xa9, 0x0b, 0xf6,
	0xd4, 0xad, 0xb7, 0x96, 0x92, 0xcf, 0x0a, 0xb8, 0x8c, 0x04, 0x97, 0x97, 0xd4, 0xf5, 0xfa, 0x42,
	0x93, 0x82, 0x9c, 0xc4, 0xca, 0x0f, 0x04, 0x83, 0xbc, 0xd6, 0xfa, 0x6a, 0x60, 0xf3, 0x75, 0x22,
	0x55, 0x0a, 0x74, 0xdc, 0xa3, 0x71, 0x4c, 0xf6, 0x70, 0x25, 0x6b, 0xf5, 0x23, 0x66, 0xa1, 0x26,
	0x6a, 0x6f, 0x0d, 0xcb, 0xd9, 0xb3, 0xcf, 0xc8, 0x03, 0x5c, 0x4b, 0xe1, 0xe3, 0x04, 0xa4, 0xf2,
	0x0b, 0x81, 0xa1, 0x05, 0x3b, 0x73, 0xba, 0x97, 0xeb, 0x6c, 0x7c, 0x97, 0x81, 0x54, 0x11, 0xa7,
	0x2a, 0x12, 0xdc, 0xe7, 0x82, 0x41, 0xa6, 0xdd, 0xd0, 0xda, 0x3b, 0x2b, 0xa5, 0x97, 0x82, 0x41,
	0x9f, 0x11, 0x82, 0x4b, 0x9c, 0x8e, 0xc1, 0x2a, 0x69, 0x81, 0xc6, 0x19, 0xa7, 0xce, 0x13, 0xb0,
	0x6e, 0xe5, 0x5c, 0x86, 0x89, 0x85, 0x2b, 0x09, 0x3d, 0x8f, 0x05, 0x65, 0x56, 0xb9, 0x89, 0xda,
	0xe6, 0xb0, 0x78, 0x92, 0xb7, 0xf8, 0xf6, 0xc2, 0xbc, 0x7f, 0x1a, 0x41, 0xcc, 0xa4, 0x55, 0x69,
	0xa2, 0xf6, 0xb6, 0xf7, 0xc8, 0x2e, 0x82, 0xb2, 0x97, 0xf1, 0xd8, 0xab, 0x7e, 0x0f, 0x0b, 0xfa,
	0x99, 0xee, 0x1b, 0xd6, 0xe0, 0x22, 0xd1, 0xfa, 0x8b, 0x70, 0x6d, 0xb5, 0xe1, 0x20, 0x38, 0xbb,
	0x3e, 0xa3, 0xc7, 0x78, 0x7b, 0x25, 0x62, 0x9d, 0x4f, 0xd5, 0xdb, 0x5d, 0xfe, 0xc4, 0x50, 0x17,
	0x7b, 0x82, 0xc1, 0x10, 0xa7, 0x0b, 0x4c, 0xee, 0xe1, 0x9d, 0x79, 0x9b, 0x54, 0x69, 0xc4, 0xc3,
	0x79, 0x58, 0x66, 0x4e, 0xbe, 0xd2, 0x1c, 0x79, 0x7f, 0x85, 0xcb, 0x92, 0x76, 0xb9, 0xbf, 0xd6,
	0xe5, 0x41, 0x70, 0xb6, 0xd6, 0xe8, 0x17, 0x03, 0x57, 0x9f, 0x8a, 0x4f, 0xfc, 0x26, 0x77, 0xe1,
	0x3e, 0xae, 0x4a, 0x31, 0x49, 0x03, 0xb8, 0xb4, 0x06, 0x66, 0xce, 0xde, 0xd8, 0x06, 0xbc, 0xbb,
	0x76, 0x03, 0xbc, 0x2b, 0xb3, 0xb9, 0xe8, 0x73, 0x5d, 0x34, 0xdd, 0xef, 0xe8, 0xe7, 0xac, 0x81,
	0x7e, 0xcf, 0x1a, 0xe8, 0xcf, 0xac, 0x81, 0xb0, 0x19, 0x88, 0xf1, 0x62, 0x6c, 0xd7, 0x3c, 0xf4,
	0x20, 0x9b, 0x32, 0xc8, 0xee, 0x69, 0x80, 0xde, 0x74, 0xc2, 0x48, 0x7d, 0x98, 0x9c, 0xd8, 0x81,
	0x18, 0x3b, 0x34, 0x51, 0x89, 0x60, 0x4e, 0xa6, 0x7d, 0xa8, 0xef, 0xcd, 0x09, 0x81, 0x3b, 0xa1,
	0x08, 0xc5, 0x29, 0x95, 0xca, 0x29, 0xee, 0xf2, 0x89, 0x06, 0x53, 0xf7, 0x9b, 0xb1, 0xd1, 0x3f,
	0x3a, 0xfa, 0x61, 0x6c, 0xf6, 0xf5, 0xf0, 0x91, 0xfb, 0x6b, 0x0e, 0x8f, 0x47, 0xee, 0xcc, 0xd8,
	0x2d, 0xe0, 0xf1, 0xf3, 0x41, 0xf7, 0x05, 0x28, 0xca, 0xa8, 0xa2, 0xff, 0x8c, 0x2d, 0x4d, 0x77,
	0x3a, 0x23, 0xf7, 0xa4, 0xac, 0xbf, 0xb1, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x54, 0x69, 0x4d,
	0x2b, 0x38, 0x04, 0x00, 0x00,
}

func (m *UpstreamCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2ECall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestinationNodeId) > 0 {
		i -= len(m.DestinationNodeId)
		copy(dAtA[i:], m.DestinationNodeId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.DestinationNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestCallId) > 0 {
		i -= len(m.RequestCallId)
		copy(dAtA[i:], m.RequestCallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.RequestCallId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallId) > 0 {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamCallAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCallAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCallAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2ECall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintE2ECall(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallId) > 0 {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2ECall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceNodeId) > 0 {
		i -= len(m.SourceNodeId)
		copy(dAtA[i:], m.SourceNodeId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.SourceNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestCallId) > 0 {
		i -= len(m.RequestCallId)
		copy(dAtA[i:], m.RequestCallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.RequestCallId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallId) > 0 {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintE2ECall(dAtA []byte, offset int, v uint64) int {
	offset -= sovE2ECall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpstreamCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.RequestCallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.DestinationNodeId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamCallAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ResultCode != 0 {
		n += 1 + sovE2ECall(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.RequestCallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.SourceNodeId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovE2ECall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozE2ECall(x uint64) (n int) {
	return sovE2ECall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpstreamCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestCallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamCallExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2ECall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthE2ECall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamCallAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCallAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCallAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamCallAckExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2ECall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthE2ECall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestCallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamCallExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2ECall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthE2ECall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipE2ECall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthE2ECall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupE2ECall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthE2ECall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthE2ECall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowE2ECall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupE2ECall = fmt.Errorf("proto: unexpected end of group")
)
