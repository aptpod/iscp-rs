// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscp2/v1/result_code.proto

package iscp2v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_SUCCEEDED                   ResultCode = 0
	ResultCode_NORMAL_CLOSURE              ResultCode = 0
	ResultCode_INCOMPATIBLE_VERSION        ResultCode = 1
	ResultCode_MAXIMUM_DATA_ID_ALIAS       ResultCode = 2
	ResultCode_MAXIMUM_UPSTREAM_ALIAS      ResultCode = 3
	ResultCode_UNSPECIFIED_ERROR           ResultCode = 64
	ResultCode_NO_NODE_ID                  ResultCode = 65
	ResultCode_AUTH_FAILED                 ResultCode = 66
	ResultCode_CONNECT_TIMEOUT             ResultCode = 67
	ResultCode_MALFORMED_MESSAGE           ResultCode = 68
	ResultCode_PROTOCOL_ERROR              ResultCode = 69
	ResultCode_ACK_TIMEOUT                 ResultCode = 70
	ResultCode_INVALID_PAYLOAD             ResultCode = 71
	ResultCode_INVALID_DATA_ID             ResultCode = 72
	ResultCode_INVALID_DATA_ID_ALIAS       ResultCode = 73
	ResultCode_INVALID_DATA_FILTER         ResultCode = 74
	ResultCode_STREAM_NOT_FOUND            ResultCode = 75
	ResultCode_RESUME_REQUEST_CONFLICT     ResultCode = 76
	ResultCode_PROCESS_FAILED              ResultCode = 77
	ResultCode_DESIRED_QOS_NOT_SUPPORTED   ResultCode = 78
	ResultCode_PING_TIMEOUT                ResultCode = 79
	ResultCode_TOO_LARGE_MESSAGE_SIZE      ResultCode = 80
	ResultCode_TOO_MANY_DATA_ID_ALIASES    ResultCode = 81
	ResultCode_TOO_MANY_STREAMS            ResultCode = 82
	ResultCode_TOO_LONG_ACK_INTERVAL       ResultCode = 83
	ResultCode_TOO_MANY_DOWNSTREAM_FILTERS ResultCode = 84
	ResultCode_TOO_MANY_DATA_FILTERS       ResultCode = 85
	ResultCode_TOO_LONG_EXPIRY_INTERVAL    ResultCode = 86
	ResultCode_TOO_LONG_PING_TIMEOUT       ResultCode = 87
	ResultCode_TOO_SHORT_PING_INTERVAL     ResultCode = 88
	ResultCode_TOO_SHORT_PING_TIMEOUT      ResultCode = 89
	ResultCode_RATE_LIMIT_REACHED          ResultCode = 90
	ResultCode_NODE_ID_MISMATCH            ResultCode = 128
	ResultCode_SESSION_NOT_FOUND           ResultCode = 129
	ResultCode_SESSION_ALREADY_CLOSED      ResultCode = 130
	ResultCode_SESSION_CANNOT_CLOSED       ResultCode = 131
)

var ResultCode_name = map[int32]string{
	0: "SUCCEEDED",
	// Duplicate value: 0: "NORMAL_CLOSURE",
	1:   "INCOMPATIBLE_VERSION",
	2:   "MAXIMUM_DATA_ID_ALIAS",
	3:   "MAXIMUM_UPSTREAM_ALIAS",
	64:  "UNSPECIFIED_ERROR",
	65:  "NO_NODE_ID",
	66:  "AUTH_FAILED",
	67:  "CONNECT_TIMEOUT",
	68:  "MALFORMED_MESSAGE",
	69:  "PROTOCOL_ERROR",
	70:  "ACK_TIMEOUT",
	71:  "INVALID_PAYLOAD",
	72:  "INVALID_DATA_ID",
	73:  "INVALID_DATA_ID_ALIAS",
	74:  "INVALID_DATA_FILTER",
	75:  "STREAM_NOT_FOUND",
	76:  "RESUME_REQUEST_CONFLICT",
	77:  "PROCESS_FAILED",
	78:  "DESIRED_QOS_NOT_SUPPORTED",
	79:  "PING_TIMEOUT",
	80:  "TOO_LARGE_MESSAGE_SIZE",
	81:  "TOO_MANY_DATA_ID_ALIASES",
	82:  "TOO_MANY_STREAMS",
	83:  "TOO_LONG_ACK_INTERVAL",
	84:  "TOO_MANY_DOWNSTREAM_FILTERS",
	85:  "TOO_MANY_DATA_FILTERS",
	86:  "TOO_LONG_EXPIRY_INTERVAL",
	87:  "TOO_LONG_PING_TIMEOUT",
	88:  "TOO_SHORT_PING_INTERVAL",
	89:  "TOO_SHORT_PING_TIMEOUT",
	90:  "RATE_LIMIT_REACHED",
	128: "NODE_ID_MISMATCH",
	129: "SESSION_NOT_FOUND",
	130: "SESSION_ALREADY_CLOSED",
	131: "SESSION_CANNOT_CLOSED",
}

var ResultCode_value = map[string]int32{
	"SUCCEEDED":                   0,
	"NORMAL_CLOSURE":              0,
	"INCOMPATIBLE_VERSION":        1,
	"MAXIMUM_DATA_ID_ALIAS":       2,
	"MAXIMUM_UPSTREAM_ALIAS":      3,
	"UNSPECIFIED_ERROR":           64,
	"NO_NODE_ID":                  65,
	"AUTH_FAILED":                 66,
	"CONNECT_TIMEOUT":             67,
	"MALFORMED_MESSAGE":           68,
	"PROTOCOL_ERROR":              69,
	"ACK_TIMEOUT":                 70,
	"INVALID_PAYLOAD":             71,
	"INVALID_DATA_ID":             72,
	"INVALID_DATA_ID_ALIAS":       73,
	"INVALID_DATA_FILTER":         74,
	"STREAM_NOT_FOUND":            75,
	"RESUME_REQUEST_CONFLICT":     76,
	"PROCESS_FAILED":              77,
	"DESIRED_QOS_NOT_SUPPORTED":   78,
	"PING_TIMEOUT":                79,
	"TOO_LARGE_MESSAGE_SIZE":      80,
	"TOO_MANY_DATA_ID_ALIASES":    81,
	"TOO_MANY_STREAMS":            82,
	"TOO_LONG_ACK_INTERVAL":       83,
	"TOO_MANY_DOWNSTREAM_FILTERS": 84,
	"TOO_MANY_DATA_FILTERS":       85,
	"TOO_LONG_EXPIRY_INTERVAL":    86,
	"TOO_LONG_PING_TIMEOUT":       87,
	"TOO_SHORT_PING_INTERVAL":     88,
	"TOO_SHORT_PING_TIMEOUT":      89,
	"RATE_LIMIT_REACHED":          90,
	"NODE_ID_MISMATCH":            128,
	"SESSION_NOT_FOUND":           129,
	"SESSION_ALREADY_CLOSED":      130,
	"SESSION_CANNOT_CLOSED":       131,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0c1c16ba3165446, []int{0}
}

func init() {
	proto.RegisterEnum("iscp2.v1.ResultCode", ResultCode_name, ResultCode_value)
}

func init() { proto.RegisterFile("iscp2/v1/result_code.proto", fileDescriptor_d0c1c16ba3165446) }

var fileDescriptor_d0c1c16ba3165446 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0x4d, 0x4f, 0x33, 0x37,
	0x10, 0xc7, 0x9f, 0xcd, 0x23, 0x21, 0x70, 0x29, 0x18, 0x43, 0x02, 0x84, 0x96, 0xde, 0x2b, 0x35,
	0x51, 0xda, 0x1b, 0xbd, 0xd4, 0xb1, 0x27, 0x89, 0x8b, 0x5f, 0x16, 0xdb, 0x1b, 0x12, 0x84, 0x64,
	0x85, 0x24, 0x4d, 0x91, 0x4a, 0x37, 0x82, 0xc0, 0xb9, 0x2f, 0xdf, 0xa4, 0xa7, 0xaa, 0x9f, 0xa4,
	0xea, 0xa9, 0x1f, 0xa1, 0xca, 0xb1, 0x9f, 0xa1, 0x87, 0x6a, 0x97, 0xdd, 0x84, 0x3c, 0xb7, 0xd1,
	0xfc, 0x76, 0xfe, 0x33, 0xff, 0x59, 0x0f, 0xaa, 0xdf, 0x3f, 0x8d, 0xe7, 0x5f, 0x36, 0x5f, 0x5a,
	0xcd, 0xc7, 0xe9, 0xd3, 0xf3, 0x0f, 0x8b, 0x30, 0x4e, 0x27, 0xd3, 0xc6, 0xfc, 0x31, 0x5d, 0xa4,
	0x64, 0x3b, 0x67, 0x8d, 0x97, 0xd6, 0xe7, 0xff, 0x6d, 0x21, 0x64, 0x73, 0xce, 0xd2, 0xc9, 0x94,
	0x7c, 0x8c, 0x76, 0x5c, 0xc2, 0x18, 0x00, 0x07, 0x8e, 0xdf, 0x11, 0x82, 0xf6, 0xb4, 0xb1, 0x8a,
	0xca, 0xc0, 0xa4, 0x71, 0x89, 0x05, 0xfc, 0x8e, 0x9c, 0xa0, 0x23, 0xa1, 0x99, 0x51, 0x31, 0xf5,
	0xa2, 0x2d, 0x21, 0xf4, 0xc1, 0x3a, 0x61, 0x34, 0x8e, 0xc8, 0x29, 0xaa, 0x2a, 0x3a, 0x10, 0x2a,
	0x51, 0x81, 0x53, 0x4f, 0x83, 0xe0, 0x81, 0x4a, 0x41, 0x1d, 0xae, 0x90, 0x3a, 0xaa, 0x95, 0x28,
	0x89, 0x9d, 0xb7, 0x40, 0x55, 0xc1, 0xde, 0x93, 0x2a, 0x3a, 0x48, 0xb4, 0x8b, 0x81, 0x89, 0x8e,
	0x00, 0x1e, 0xc0, 0x5a, 0x63, 0xf1, 0x37, 0x64, 0x0f, 0x21, 0x6d, 0x82, 0x36, 0x1c, 0x82, 0xe0,
	0x98, 0x92, 0x7d, 0xf4, 0x11, 0x4d, 0x7c, 0x2f, 0x74, 0xa8, 0x90, 0xc0, 0x71, 0x9b, 0x1c, 0xa2,
	0x7d, 0x66, 0xb4, 0x06, 0xe6, 0x83, 0x17, 0x0a, 0x4c, 0xe2, 0x31, 0xcb, 0xc4, 0x14, 0x95, 0x1d,
	0x63, 0x15, 0xf0, 0xa0, 0xc0, 0x39, 0xda, 0x05, 0xcc, 0x33, 0x23, 0xb1, 0x35, 0xde, 0x30, 0x23,
	0x8b, 0x06, 0x90, 0x0b, 0xb2, 0xcb, 0x55, 0x6d, 0x27, 0x13, 0x14, 0xba, 0x4f, 0xa5, 0xe0, 0x21,
	0xa6, 0x43, 0x69, 0x28, 0xc7, 0xdd, 0xb7, 0xc9, 0xc2, 0x14, 0xee, 0x65, 0x4e, 0x3f, 0x48, 0x16,
	0x6e, 0x04, 0x39, 0x46, 0x87, 0x1b, 0xa8, 0x23, 0xa4, 0x07, 0x8b, 0xbf, 0x25, 0x47, 0x08, 0x17,
	0xc6, 0xb5, 0xf1, 0xa1, 0x63, 0x12, 0xcd, 0xf1, 0x25, 0x39, 0x43, 0xc7, 0x16, 0x5c, 0xa2, 0x20,
	0x58, 0xb8, 0x4a, 0xc0, 0xf9, 0xc0, 0x8c, 0xee, 0x48, 0xc1, 0x3c, 0x96, 0xc5, 0xd4, 0x0c, 0x9c,
	0x2b, 0x5d, 0x2b, 0xf2, 0x29, 0x3a, 0xe5, 0xe0, 0x84, 0x05, 0x1e, 0xae, 0x8c, 0xcb, 0xb5, 0x5c,
	0x12, 0xc7, 0xc6, 0x7a, 0xe0, 0x58, 0x13, 0x8c, 0x76, 0x63, 0xa1, 0xbb, 0x2b, 0x57, 0x26, 0x5b,
	0xbd, 0x37, 0x26, 0x48, 0x6a, 0xbb, 0x50, 0x6e, 0x24, 0x38, 0x71, 0x03, 0x38, 0x26, 0x9f, 0xa0,
	0x93, 0x8c, 0x29, 0xaa, 0x87, 0x9b, 0x46, 0xc0, 0xe1, 0xab, 0x6c, 0xe2, 0x15, 0x7d, 0x1d, 0xdd,
	0x61, 0x9b, 0x79, 0xcf, 0xf5, 0x8c, 0xee, 0x86, 0x6c, 0x7f, 0x42, 0x7b, 0xb0, 0x7d, 0x2a, 0xb1,
	0x23, 0x9f, 0xa1, 0xb3, 0xb5, 0x9c, 0xb9, 0xd6, 0x85, 0xdf, 0xd7, 0x15, 0x38, 0xec, 0xcb, 0xda,
	0x75, 0xbf, 0x12, 0x25, 0xe5, 0x28, 0xb9, 0x2c, 0x0c, 0x62, 0x61, 0x87, 0x6b, 0xe5, 0xfe, 0x46,
	0xd3, 0x0d, 0x7f, 0xd7, 0xd9, 0x06, 0x33, 0xe4, 0x7a, 0xc6, 0xfa, 0x57, 0xb6, 0xaa, 0x1b, 0x94,
	0xe6, 0xdf, 0xc0, 0xb2, 0x70, 0x48, 0x6a, 0x88, 0x58, 0xea, 0x21, 0x48, 0xa1, 0x84, 0x0f, 0x16,
	0x28, 0xeb, 0x01, 0xc7, 0x37, 0xa4, 0x8a, 0x70, 0xf1, 0xea, 0x82, 0x12, 0x4e, 0x51, 0xcf, 0x7a,
	0xf8, 0xa7, 0x88, 0xd4, 0xd0, 0x81, 0x03, 0x97, 0x3d, 0xf5, 0x37, 0x3f, 0xf0, 0xe7, 0x88, 0x9c,
	0xa1, 0x5a, 0x99, 0xa7, 0xd2, 0x02, 0xe5, 0xc3, 0xfc, 0x58, 0x80, 0xe3, 0x5f, 0x22, 0x52, 0x47,
	0xd5, 0x12, 0x32, 0xaa, 0xb3, 0xba, 0x82, 0xfd, 0x1a, 0xd5, 0x2b, 0x38, 0x6a, 0xff, 0x1e, 0xfd,
	0xb9, 0x3c, 0x8f, 0xfe, 0x5e, 0x9e, 0x47, 0xff, 0x2c, 0xcf, 0x23, 0xb4, 0x3b, 0x4e, 0x1f, 0x1a,
	0xe5, 0x6d, 0xb6, 0xf7, 0xd7, 0x87, 0x19, 0x67, 0x67, 0x1b, 0x47, 0x37, 0x17, 0xb3, 0xfb, 0xc5,
	0xf7, 0xcf, 0x77, 0x8d, 0x71, 0xfa, 0xd0, 0x1c, 0xcd, 0x17, 0xf3, 0x74, 0xd2, 0xcc, 0x3e, 0xff,
	0x22, 0x3f, 0xeb, 0xe6, 0x6c, 0xfa, 0x63, 0x73, 0x96, 0xce, 0xd2, 0xef, 0x46, 0x4f, 0x8b, 0x66,
	0x79, 0xfe, 0x5f, 0xe7, 0xc1, 0x4b, 0xeb, 0xb7, 0xca, 0x7b, 0x31, 0x18, 0xfc, 0x51, 0xd9, 0x16,
	0xb9, 0x7e, 0xbf, 0xf5, 0x57, 0x11, 0xde, 0xf6, 0x5b, 0xcb, 0xca, 0x51, 0x19, 0xde, 0x76, 0xe3,
	0xb6, 0x9a, 0x2e, 0x46, 0x93, 0xd1, 0x62, 0xf4, 0x6f, 0x65, 0x27, 0x4f, 0x5f, 0x5c, 0xf4, 0x5b,
	0x77, 0x5b, 0x79, 0x8f, 0xaf, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x69, 0x77, 0xd1, 0x58,
	0x04, 0x00, 0x00,
}
