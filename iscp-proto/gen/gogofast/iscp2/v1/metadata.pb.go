// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscp2/v1/metadata.proto

package iscp2v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BaseTime struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority             uint32   `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ElapsedTime          uint64   `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	BaseTime             int64    `protobuf:"zigzag64,5,opt,name=base_time,json=baseTime,proto3" json:"base_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseTime) Reset()         { *m = BaseTime{} }
func (m *BaseTime) String() string { return proto.CompactTextString(m) }
func (*BaseTime) ProtoMessage()    {}
func (*BaseTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{0}
}
func (m *BaseTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseTime.Merge(m, src)
}
func (m *BaseTime) XXX_Size() int {
	return m.Size()
}
func (m *BaseTime) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseTime.DiscardUnknown(m)
}

var xxx_messageInfo_BaseTime proto.InternalMessageInfo

func (m *BaseTime) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *BaseTime) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaseTime) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *BaseTime) GetElapsedTime() uint64 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func (m *BaseTime) GetBaseTime() int64 {
	if m != nil {
		return m.BaseTime
	}
	return 0
}

type UpstreamOpen struct {
	StreamId             []byte   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Qos                  QoS      `protobuf:"varint,3,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamOpen) Reset()         { *m = UpstreamOpen{} }
func (m *UpstreamOpen) String() string { return proto.CompactTextString(m) }
func (*UpstreamOpen) ProtoMessage()    {}
func (*UpstreamOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{1}
}
func (m *UpstreamOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamOpen.Merge(m, src)
}
func (m *UpstreamOpen) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamOpen.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamOpen proto.InternalMessageInfo

func (m *UpstreamOpen) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *UpstreamOpen) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UpstreamOpen) GetQos() QoS {
	if m != nil {
		return m.Qos
	}
	return QoS_UNRELIABLE
}

type UpstreamAbnormalClose struct {
	StreamId             []byte   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamAbnormalClose) Reset()         { *m = UpstreamAbnormalClose{} }
func (m *UpstreamAbnormalClose) String() string { return proto.CompactTextString(m) }
func (*UpstreamAbnormalClose) ProtoMessage()    {}
func (*UpstreamAbnormalClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{2}
}
func (m *UpstreamAbnormalClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamAbnormalClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamAbnormalClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamAbnormalClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamAbnormalClose.Merge(m, src)
}
func (m *UpstreamAbnormalClose) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamAbnormalClose) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamAbnormalClose.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamAbnormalClose proto.InternalMessageInfo

func (m *UpstreamAbnormalClose) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *UpstreamAbnormalClose) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type UpstreamResume struct {
	StreamId             []byte   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Qos                  QoS      `protobuf:"varint,3,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamResume) Reset()         { *m = UpstreamResume{} }
func (m *UpstreamResume) String() string { return proto.CompactTextString(m) }
func (*UpstreamResume) ProtoMessage()    {}
func (*UpstreamResume) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{3}
}
func (m *UpstreamResume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamResume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamResume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamResume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamResume.Merge(m, src)
}
func (m *UpstreamResume) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamResume) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamResume.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamResume proto.InternalMessageInfo

func (m *UpstreamResume) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *UpstreamResume) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UpstreamResume) GetQos() QoS {
	if m != nil {
		return m.Qos
	}
	return QoS_UNRELIABLE
}

type UpstreamNormalClose struct {
	StreamId             []byte   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TotalDataPoints      uint64   `protobuf:"varint,3,opt,name=total_data_points,json=totalDataPoints,proto3" json:"total_data_points,omitempty"`
	FinalSequenceNumber  uint32   `protobuf:"varint,4,opt,name=final_sequence_number,json=finalSequenceNumber,proto3" json:"final_sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamNormalClose) Reset()         { *m = UpstreamNormalClose{} }
func (m *UpstreamNormalClose) String() string { return proto.CompactTextString(m) }
func (*UpstreamNormalClose) ProtoMessage()    {}
func (*UpstreamNormalClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{4}
}
func (m *UpstreamNormalClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamNormalClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamNormalClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamNormalClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamNormalClose.Merge(m, src)
}
func (m *UpstreamNormalClose) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamNormalClose) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamNormalClose.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamNormalClose proto.InternalMessageInfo

func (m *UpstreamNormalClose) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *UpstreamNormalClose) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UpstreamNormalClose) GetTotalDataPoints() uint64 {
	if m != nil {
		return m.TotalDataPoints
	}
	return 0
}

func (m *UpstreamNormalClose) GetFinalSequenceNumber() uint32 {
	if m != nil {
		return m.FinalSequenceNumber
	}
	return 0
}

type DownstreamOpen struct {
	StreamId             []byte              `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	DownstreamFilters    []*DownstreamFilter `protobuf:"bytes,2,rep,name=downstream_filters,json=downstreamFilters,proto3" json:"downstream_filters,omitempty"`
	Qos                  QoS                 `protobuf:"varint,3,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DownstreamOpen) Reset()         { *m = DownstreamOpen{} }
func (m *DownstreamOpen) String() string { return proto.CompactTextString(m) }
func (*DownstreamOpen) ProtoMessage()    {}
func (*DownstreamOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{5}
}
func (m *DownstreamOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamOpen.Merge(m, src)
}
func (m *DownstreamOpen) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamOpen.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamOpen proto.InternalMessageInfo

func (m *DownstreamOpen) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *DownstreamOpen) GetDownstreamFilters() []*DownstreamFilter {
	if m != nil {
		return m.DownstreamFilters
	}
	return nil
}

func (m *DownstreamOpen) GetQos() QoS {
	if m != nil {
		return m.Qos
	}
	return QoS_UNRELIABLE
}

type DownstreamAbnormalClose struct {
	StreamId             []byte   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownstreamAbnormalClose) Reset()         { *m = DownstreamAbnormalClose{} }
func (m *DownstreamAbnormalClose) String() string { return proto.CompactTextString(m) }
func (*DownstreamAbnormalClose) ProtoMessage()    {}
func (*DownstreamAbnormalClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{6}
}
func (m *DownstreamAbnormalClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamAbnormalClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamAbnormalClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamAbnormalClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamAbnormalClose.Merge(m, src)
}
func (m *DownstreamAbnormalClose) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamAbnormalClose) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamAbnormalClose.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamAbnormalClose proto.InternalMessageInfo

func (m *DownstreamAbnormalClose) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

type DownstreamResume struct {
	StreamId             []byte              `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	DownstreamFilters    []*DownstreamFilter `protobuf:"bytes,2,rep,name=downstream_filters,json=downstreamFilters,proto3" json:"downstream_filters,omitempty"`
	Qos                  QoS                 `protobuf:"varint,3,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DownstreamResume) Reset()         { *m = DownstreamResume{} }
func (m *DownstreamResume) String() string { return proto.CompactTextString(m) }
func (*DownstreamResume) ProtoMessage()    {}
func (*DownstreamResume) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{7}
}
func (m *DownstreamResume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamResume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamResume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamResume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamResume.Merge(m, src)
}
func (m *DownstreamResume) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamResume) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamResume.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamResume proto.InternalMessageInfo

func (m *DownstreamResume) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *DownstreamResume) GetDownstreamFilters() []*DownstreamFilter {
	if m != nil {
		return m.DownstreamFilters
	}
	return nil
}

func (m *DownstreamResume) GetQos() QoS {
	if m != nil {
		return m.Qos
	}
	return QoS_UNRELIABLE
}

type DownstreamNormalClose struct {
	StreamId             []byte   `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownstreamNormalClose) Reset()         { *m = DownstreamNormalClose{} }
func (m *DownstreamNormalClose) String() string { return proto.CompactTextString(m) }
func (*DownstreamNormalClose) ProtoMessage()    {}
func (*DownstreamNormalClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_76b7eec5b9495a8d, []int{8}
}
func (m *DownstreamNormalClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamNormalClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamNormalClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamNormalClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamNormalClose.Merge(m, src)
}
func (m *DownstreamNormalClose) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamNormalClose) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamNormalClose.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamNormalClose proto.InternalMessageInfo

func (m *DownstreamNormalClose) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseTime)(nil), "iscp2.v1.BaseTime")
	proto.RegisterType((*UpstreamOpen)(nil), "iscp2.v1.UpstreamOpen")
	proto.RegisterType((*UpstreamAbnormalClose)(nil), "iscp2.v1.UpstreamAbnormalClose")
	proto.RegisterType((*UpstreamResume)(nil), "iscp2.v1.UpstreamResume")
	proto.RegisterType((*UpstreamNormalClose)(nil), "iscp2.v1.UpstreamNormalClose")
	proto.RegisterType((*DownstreamOpen)(nil), "iscp2.v1.DownstreamOpen")
	proto.RegisterType((*DownstreamAbnormalClose)(nil), "iscp2.v1.DownstreamAbnormalClose")
	proto.RegisterType((*DownstreamResume)(nil), "iscp2.v1.DownstreamResume")
	proto.RegisterType((*DownstreamNormalClose)(nil), "iscp2.v1.DownstreamNormalClose")
}

func init() { proto.RegisterFile("iscp2/v1/metadata.proto", fileDescriptor_76b7eec5b9495a8d) }

var fileDescriptor_76b7eec5b9495a8d = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0xaf, 0xd2, 0x40,
	0x14, 0xcd, 0x14, 0x34, 0x65, 0x1e, 0xa0, 0xaf, 0x4f, 0xf2, 0x08, 0x46, 0x44, 0x56, 0xc4, 0x44,
	0x9a, 0xa2, 0x71, 0x81, 0x2b, 0xf1, 0x45, 0xc3, 0xc2, 0x27, 0x0e, 0x4a, 0x5e, 0xcc, 0x4b, 0x9a,
	0x29, 0xbd, 0xe0, 0xc4, 0xce, 0x4c, 0x5f, 0x67, 0xc0, 0xf8, 0x53, 0x8c, 0x3b, 0x17, 0x2e, 0xdc,
	0xf9, 0x2f, 0x8c, 0x2b, 0x7f, 0x82, 0x61, 0xe9, 0xaf, 0x30, 0x1d, 0x5a, 0x48, 0xd8, 0x48, 0xe2,
	0xc7, 0xee, 0xf6, 0x9e, 0xd3, 0x73, 0xce, 0xcc, 0xdc, 0x5c, 0x7c, 0xcc, 0xd4, 0x34, 0xee, 0xb9,
	0x4b, 0xcf, 0xe5, 0xa0, 0x69, 0x48, 0x35, 0xed, 0xc6, 0x89, 0xd4, 0xd2, 0xb1, 0x0d, 0xd0, 0x5d,
	0x7a, 0x8d, 0xda, 0x86, 0x32, 0x95, 0x9c, 0x4b, 0xb1, 0x26, 0xb4, 0xdf, 0x23, 0x6c, 0x0f, 0xa8,
	0x82, 0x17, 0x8c, 0x83, 0x73, 0x03, 0x63, 0x05, 0x4a, 0x31, 0x29, 0x7c, 0x16, 0xd6, 0x51, 0x0b,
	0x75, 0x4a, 0xa4, 0x94, 0x75, 0x86, 0xa1, 0xe3, 0xe0, 0xa2, 0xa0, 0x1c, 0xea, 0x96, 0x01, 0x4c,
	0xed, 0x34, 0xb0, 0x1d, 0x27, 0x4c, 0x26, 0x4c, 0xbf, 0xab, 0x17, 0x5a, 0xa8, 0x53, 0x21, 0x9b,
	0x6f, 0xe7, 0x16, 0x2e, 0x43, 0x44, 0x63, 0x05, 0xa1, 0xaf, 0x19, 0x87, 0x7a, 0xb1, 0x85, 0x3a,
	0x45, 0x72, 0x90, 0xf5, 0x8c, 0xe3, 0x75, 0x5c, 0x0a, 0xa8, 0x82, 0x35, 0x7e, 0xa9, 0x85, 0x3a,
	0x0e, 0xb1, 0x83, 0x2c, 0x4e, 0xfb, 0x0d, 0x2e, 0xbf, 0x8c, 0x95, 0x4e, 0x80, 0xf2, 0x67, 0x31,
	0x88, 0x94, 0xbc, 0xfe, 0xca, 0xd3, 0x95, 0x89, 0xbd, 0x6e, 0x0c, 0xc3, 0x9d, 0xec, 0xd6, 0x6e,
	0xf6, 0x9b, 0xb8, 0x70, 0x21, 0x95, 0x89, 0x58, 0xed, 0x55, 0xba, 0xf9, 0xb5, 0x74, 0x9f, 0xcb,
	0x31, 0x49, 0x91, 0xf6, 0x18, 0xd7, 0x72, 0xb3, 0x87, 0x81, 0x90, 0x09, 0xa7, 0xd1, 0xa3, 0x48,
	0x2a, 0xf8, 0x13, 0xd7, 0x36, 0xc7, 0xd5, 0x5c, 0x94, 0x80, 0x5a, 0x70, 0xf8, 0xb7, 0x67, 0xf8,
	0x82, 0xf0, 0x51, 0xee, 0x77, 0xfa, 0x77, 0x8e, 0xe0, 0xdc, 0xc6, 0x87, 0x5a, 0x6a, 0x1a, 0xf9,
	0xe9, 0x54, 0xf9, 0xb1, 0x64, 0x42, 0xaf, 0x23, 0x14, 0xc9, 0x15, 0x03, 0x9c, 0x50, 0x4d, 0x47,
	0xa6, 0xed, 0xf4, 0x70, 0x6d, 0xc6, 0x04, 0x8d, 0x7c, 0x05, 0x17, 0x0b, 0x10, 0x53, 0xf0, 0xc5,
	0x82, 0x07, 0x90, 0x98, 0x97, 0xaf, 0x90, 0x23, 0x03, 0x8e, 0x33, 0xec, 0xd4, 0x40, 0xe9, 0x00,
	0x56, 0x4f, 0xe4, 0x5b, 0xb1, 0xef, 0x3b, 0x0f, 0xb1, 0x13, 0x6e, 0xe8, 0xfe, 0x8c, 0x45, 0x1a,
	0x12, 0x55, 0xb7, 0x5a, 0x85, 0xce, 0x41, 0xaf, 0xb1, 0xbd, 0x93, 0xad, 0xe4, 0x63, 0x43, 0x21,
	0x87, 0xe1, 0x4e, 0x47, 0xfd, 0xfe, 0x3e, 0xef, 0xe3, 0xe3, 0xad, 0xce, 0xfe, 0x53, 0xd1, 0xfe,
	0x80, 0xf0, 0xd5, 0xed, 0x8f, 0xfb, 0xbc, 0xfc, 0xff, 0x3c, 0xd5, 0x3d, 0x5c, 0xdb, 0xea, 0xec,
	0x3b, 0x26, 0x83, 0x4f, 0xe8, 0xeb, 0xaa, 0x89, 0xbe, 0xaf, 0x9a, 0xe8, 0xc7, 0xaa, 0x89, 0x70,
	0x79, 0x2a, 0xf9, 0x46, 0x7b, 0x50, 0x79, 0x9a, 0xad, 0x9d, 0x51, 0xba, 0x54, 0x46, 0xe8, 0x55,
	0x7f, 0xce, 0xf4, 0xeb, 0x45, 0xd0, 0x9d, 0x4a, 0xee, 0xd2, 0x58, 0xc7, 0x32, 0x74, 0x53, 0xf2,
	0x1d, 0xb3, 0x74, 0xdc, 0x39, 0x08, 0x77, 0x2e, 0xe7, 0x72, 0x46, 0x95, 0x76, 0xf3, 0xbd, 0xf4,
	0xc0, 0x14, 0x4b, 0xef, 0xa3, 0x55, 0x18, 0x9e, 0x9d, 0x7d, 0xb6, 0xec, 0xa1, 0x51, 0x9f, 0x78,
	0xdf, 0xb2, 0xf2, 0x7c, 0xe2, 0xad, 0xac, 0x6b, 0x79, 0x79, 0xfe, 0x64, 0x34, 0xc8, 0x5d, 0x7f,
	0x5a, 0x25, 0xd3, 0xee, 0xf7, 0x27, 0x5e, 0x70, 0xd9, 0x78, 0xdc, 0xfd, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xe5, 0xce, 0x31, 0x04, 0x14, 0x05, 0x00, 0x00,
}

func (m *BaseTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BaseTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64((uint64(m.BaseTime)<<1)^uint64((m.BaseTime>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.ElapsedTime != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ElapsedTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Priority != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qos != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamAbnormalClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamAbnormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamAbnormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamResume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamResume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamResume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qos != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamNormalClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamNormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamNormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FinalSequenceNumber != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.FinalSequenceNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDataPoints != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.TotalDataPoints))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qos != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DownstreamFilters) > 0 {
		for iNdEx := len(m.DownstreamFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamAbnormalClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamAbnormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamAbnormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamResume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamResume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamResume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qos != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DownstreamFilters) > 0 {
		for iNdEx := len(m.DownstreamFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamNormalClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamNormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamNormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovMetadata(uint64(m.Priority))
	}
	if m.ElapsedTime != 0 {
		n += 1 + sovMetadata(uint64(m.ElapsedTime))
	}
	if m.BaseTime != 0 {
		n += 1 + sozMetadata(uint64(m.BaseTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Qos != 0 {
		n += 1 + sovMetadata(uint64(m.Qos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamAbnormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamResume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Qos != 0 {
		n += 1 + sovMetadata(uint64(m.Qos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamNormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.TotalDataPoints != 0 {
		n += 1 + sovMetadata(uint64(m.TotalDataPoints))
	}
	if m.FinalSequenceNumber != 0 {
		n += 1 + sovMetadata(uint64(m.FinalSequenceNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.DownstreamFilters) > 0 {
		for _, e := range m.DownstreamFilters {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.Qos != 0 {
		n += 1 + sovMetadata(uint64(m.Qos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamAbnormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamResume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.DownstreamFilters) > 0 {
		for _, e := range m.DownstreamFilters {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.Qos != 0 {
		n += 1 + sovMetadata(uint64(m.Qos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamNormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedTime", wireType)
			}
			m.ElapsedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElapsedTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.BaseTime = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= QoS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamAbnormalClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamAbnormalClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamAbnormalClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamResume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamResume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamResume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= QoS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamNormalClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamNormalClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamNormalClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDataPoints", wireType)
			}
			m.TotalDataPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDataPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSequenceNumber", wireType)
			}
			m.FinalSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalSequenceNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamFilters = append(m.DownstreamFilters, &DownstreamFilter{})
			if err := m.DownstreamFilters[len(m.DownstreamFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= QoS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamAbnormalClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamAbnormalClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamAbnormalClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamResume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamResume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamResume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamFilters = append(m.DownstreamFilters, &DownstreamFilter{})
			if err := m.DownstreamFilters[len(m.DownstreamFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= QoS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamNormalClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamNormalClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamNormalClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
