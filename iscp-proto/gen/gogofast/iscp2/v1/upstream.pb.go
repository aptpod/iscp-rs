// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscp2/v1/upstream.proto

package iscp2v1

import (
	fmt "fmt"
	extensions "github.com/aptpod/iscp-proto/gen/gogofast/iscp2/v1/extensions"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpstreamOpenRequest struct {
	RequestId            uint32                                         `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SessionId            string                                         `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AckInterval          uint32                                         `protobuf:"varint,3,opt,name=ack_interval,json=ackInterval,proto3" json:"ack_interval,omitempty"`
	ExpiryInterval       uint32                                         `protobuf:"varint,5,opt,name=expiry_interval,json=expiryInterval,proto3" json:"expiry_interval,omitempty"`
	DataIds              []*DataID                                      `protobuf:"bytes,6,rep,name=data_ids,json=dataIds,proto3" json:"data_ids,omitempty"`
	Qos                  QoS                                            `protobuf:"varint,7,opt,name=qos,proto3,enum=iscp2.v1.QoS" json:"qos,omitempty"`
	ExtensionFields      *extensions.UpstreamOpenRequestExtensionFields `protobuf:"bytes,8,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *UpstreamOpenRequest) Reset()         { *m = UpstreamOpenRequest{} }
func (m *UpstreamOpenRequest) String() string { return proto.CompactTextString(m) }
func (*UpstreamOpenRequest) ProtoMessage()    {}
func (*UpstreamOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{0}
}
func (m *UpstreamOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamOpenRequest.Merge(m, src)
}
func (m *UpstreamOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamOpenRequest proto.InternalMessageInfo

func (m *UpstreamOpenRequest) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamOpenRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UpstreamOpenRequest) GetAckInterval() uint32 {
	if m != nil {
		return m.AckInterval
	}
	return 0
}

func (m *UpstreamOpenRequest) GetExpiryInterval() uint32 {
	if m != nil {
		return m.ExpiryInterval
	}
	return 0
}

func (m *UpstreamOpenRequest) GetDataIds() []*DataID {
	if m != nil {
		return m.DataIds
	}
	return nil
}

func (m *UpstreamOpenRequest) GetQos() QoS {
	if m != nil {
		return m.Qos
	}
	return QoS_UNRELIABLE
}

func (m *UpstreamOpenRequest) GetExtensionFields() *extensions.UpstreamOpenRequestExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamOpenResponse struct {
	RequestId             uint32                                          `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AssignedStreamId      []byte                                          `protobuf:"bytes,2,opt,name=assigned_stream_id,json=assignedStreamId,proto3" json:"assigned_stream_id,omitempty"`
	AssignedStreamIdAlias uint32                                          `protobuf:"varint,3,opt,name=assigned_stream_id_alias,json=assignedStreamIdAlias,proto3" json:"assigned_stream_id_alias,omitempty"`
	DataIdAliases         map[uint32]*DataID                              `protobuf:"bytes,4,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServerTime            int64                                           `protobuf:"zigzag64,5,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ResultCode            ResultCode                                      `protobuf:"varint,6,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString          string                                          `protobuf:"bytes,7,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields       *extensions.UpstreamOpenResponseExtensionFields `protobuf:"bytes,8,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                        `json:"-"`
	XXX_unrecognized      []byte                                          `json:"-"`
	XXX_sizecache         int32                                           `json:"-"`
}

func (m *UpstreamOpenResponse) Reset()         { *m = UpstreamOpenResponse{} }
func (m *UpstreamOpenResponse) String() string { return proto.CompactTextString(m) }
func (*UpstreamOpenResponse) ProtoMessage()    {}
func (*UpstreamOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{1}
}
func (m *UpstreamOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamOpenResponse.Merge(m, src)
}
func (m *UpstreamOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamOpenResponse proto.InternalMessageInfo

func (m *UpstreamOpenResponse) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamOpenResponse) GetAssignedStreamId() []byte {
	if m != nil {
		return m.AssignedStreamId
	}
	return nil
}

func (m *UpstreamOpenResponse) GetAssignedStreamIdAlias() uint32 {
	if m != nil {
		return m.AssignedStreamIdAlias
	}
	return 0
}

func (m *UpstreamOpenResponse) GetDataIdAliases() map[uint32]*DataID {
	if m != nil {
		return m.DataIdAliases
	}
	return nil
}

func (m *UpstreamOpenResponse) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *UpstreamOpenResponse) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *UpstreamOpenResponse) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *UpstreamOpenResponse) GetExtensionFields() *extensions.UpstreamOpenResponseExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamResumeRequest struct {
	RequestId            uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId             []byte                                           `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ExtensionFields      *extensions.UpstreamResumeRequestExtensionFields `protobuf:"bytes,3,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *UpstreamResumeRequest) Reset()         { *m = UpstreamResumeRequest{} }
func (m *UpstreamResumeRequest) String() string { return proto.CompactTextString(m) }
func (*UpstreamResumeRequest) ProtoMessage()    {}
func (*UpstreamResumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{2}
}
func (m *UpstreamResumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamResumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamResumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamResumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamResumeRequest.Merge(m, src)
}
func (m *UpstreamResumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamResumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamResumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamResumeRequest proto.InternalMessageInfo

func (m *UpstreamResumeRequest) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamResumeRequest) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *UpstreamResumeRequest) GetExtensionFields() *extensions.UpstreamResumeRequestExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamResumeResponse struct {
	RequestId             uint32                                            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AssignedStreamIdAlias uint32                                            `protobuf:"varint,2,opt,name=assigned_stream_id_alias,json=assignedStreamIdAlias,proto3" json:"assigned_stream_id_alias,omitempty"`
	ResultCode            ResultCode                                        `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString          string                                            `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields       *extensions.UpstreamResumeResponseExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                          `json:"-"`
	XXX_unrecognized      []byte                                            `json:"-"`
	XXX_sizecache         int32                                             `json:"-"`
}

func (m *UpstreamResumeResponse) Reset()         { *m = UpstreamResumeResponse{} }
func (m *UpstreamResumeResponse) String() string { return proto.CompactTextString(m) }
func (*UpstreamResumeResponse) ProtoMessage()    {}
func (*UpstreamResumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{3}
}
func (m *UpstreamResumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamResumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamResumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamResumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamResumeResponse.Merge(m, src)
}
func (m *UpstreamResumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamResumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamResumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamResumeResponse proto.InternalMessageInfo

func (m *UpstreamResumeResponse) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamResumeResponse) GetAssignedStreamIdAlias() uint32 {
	if m != nil {
		return m.AssignedStreamIdAlias
	}
	return 0
}

func (m *UpstreamResumeResponse) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *UpstreamResumeResponse) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *UpstreamResumeResponse) GetExtensionFields() *extensions.UpstreamResumeResponseExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamCloseRequest struct {
	RequestId            uint32                                          `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId             []byte                                          `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	TotalDataPoints      uint64                                          `protobuf:"varint,3,opt,name=total_data_points,json=totalDataPoints,proto3" json:"total_data_points,omitempty"`
	FinalSequenceNumber  uint32                                          `protobuf:"varint,4,opt,name=final_sequence_number,json=finalSequenceNumber,proto3" json:"final_sequence_number,omitempty"`
	ExtensionFields      *extensions.UpstreamCloseRequestExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *UpstreamCloseRequest) Reset()         { *m = UpstreamCloseRequest{} }
func (m *UpstreamCloseRequest) String() string { return proto.CompactTextString(m) }
func (*UpstreamCloseRequest) ProtoMessage()    {}
func (*UpstreamCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{4}
}
func (m *UpstreamCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCloseRequest.Merge(m, src)
}
func (m *UpstreamCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCloseRequest proto.InternalMessageInfo

func (m *UpstreamCloseRequest) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamCloseRequest) GetStreamId() []byte {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *UpstreamCloseRequest) GetTotalDataPoints() uint64 {
	if m != nil {
		return m.TotalDataPoints
	}
	return 0
}

func (m *UpstreamCloseRequest) GetFinalSequenceNumber() uint32 {
	if m != nil {
		return m.FinalSequenceNumber
	}
	return 0
}

func (m *UpstreamCloseRequest) GetExtensionFields() *extensions.UpstreamCloseRequestExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamCloseResponse struct {
	RequestId            uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode           ResultCode                                       `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                           `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.UpstreamCloseResponseExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *UpstreamCloseResponse) Reset()         { *m = UpstreamCloseResponse{} }
func (m *UpstreamCloseResponse) String() string { return proto.CompactTextString(m) }
func (*UpstreamCloseResponse) ProtoMessage()    {}
func (*UpstreamCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{5}
}
func (m *UpstreamCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCloseResponse.Merge(m, src)
}
func (m *UpstreamCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCloseResponse proto.InternalMessageInfo

func (m *UpstreamCloseResponse) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamCloseResponse) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *UpstreamCloseResponse) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *UpstreamCloseResponse) GetExtensionFields() *extensions.UpstreamCloseResponseExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamChunk struct {
	StreamIdAlias        uint32                                   `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	StreamChunk          *StreamChunk                             `protobuf:"bytes,2,opt,name=stream_chunk,json=streamChunk,proto3" json:"stream_chunk,omitempty"`
	DataIds              []*DataID                                `protobuf:"bytes,3,rep,name=data_ids,json=dataIds,proto3" json:"data_ids,omitempty"`
	ExtensionFields      *extensions.UpstreamChunkExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *UpstreamChunk) Reset()         { *m = UpstreamChunk{} }
func (m *UpstreamChunk) String() string { return proto.CompactTextString(m) }
func (*UpstreamChunk) ProtoMessage()    {}
func (*UpstreamChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{6}
}
func (m *UpstreamChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamChunk.Merge(m, src)
}
func (m *UpstreamChunk) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamChunk.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamChunk proto.InternalMessageInfo

func (m *UpstreamChunk) GetStreamIdAlias() uint32 {
	if m != nil {
		return m.StreamIdAlias
	}
	return 0
}

func (m *UpstreamChunk) GetStreamChunk() *StreamChunk {
	if m != nil {
		return m.StreamChunk
	}
	return nil
}

func (m *UpstreamChunk) GetDataIds() []*DataID {
	if m != nil {
		return m.DataIds
	}
	return nil
}

func (m *UpstreamChunk) GetExtensionFields() *extensions.UpstreamChunkExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamChunkAck struct {
	StreamIdAlias        uint32                                      `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	Results              []*UpstreamChunkResult                      `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	DataIdAliases        map[uint32]*DataID                          `protobuf:"bytes,3,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtensionFields      *extensions.UpstreamChunkAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *UpstreamChunkAck) Reset()         { *m = UpstreamChunkAck{} }
func (m *UpstreamChunkAck) String() string { return proto.CompactTextString(m) }
func (*UpstreamChunkAck) ProtoMessage()    {}
func (*UpstreamChunkAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{7}
}
func (m *UpstreamChunkAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamChunkAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamChunkAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamChunkAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamChunkAck.Merge(m, src)
}
func (m *UpstreamChunkAck) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamChunkAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamChunkAck.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamChunkAck proto.InternalMessageInfo

func (m *UpstreamChunkAck) GetStreamIdAlias() uint32 {
	if m != nil {
		return m.StreamIdAlias
	}
	return 0
}

func (m *UpstreamChunkAck) GetResults() []*UpstreamChunkResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *UpstreamChunkAck) GetDataIdAliases() map[uint32]*DataID {
	if m != nil {
		return m.DataIdAliases
	}
	return nil
}

func (m *UpstreamChunkAck) GetExtensionFields() *extensions.UpstreamChunkAckExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamMetadata struct {
	RequestId uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//
	//	*UpstreamMetadata_BaseTime
	Metadata             isUpstreamMetadata_Metadata                 `protobuf_oneof:"metadata"`
	ExtensionFields      *extensions.UpstreamMetadataExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *UpstreamMetadata) Reset()         { *m = UpstreamMetadata{} }
func (m *UpstreamMetadata) String() string { return proto.CompactTextString(m) }
func (*UpstreamMetadata) ProtoMessage()    {}
func (*UpstreamMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{8}
}
func (m *UpstreamMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamMetadata.Merge(m, src)
}
func (m *UpstreamMetadata) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamMetadata proto.InternalMessageInfo

type isUpstreamMetadata_Metadata interface {
	isUpstreamMetadata_Metadata()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpstreamMetadata_BaseTime struct {
	BaseTime *BaseTime `protobuf:"bytes,2,opt,name=base_time,json=baseTime,proto3,oneof" json:"base_time,omitempty"`
}

func (*UpstreamMetadata_BaseTime) isUpstreamMetadata_Metadata() {}

func (m *UpstreamMetadata) GetMetadata() isUpstreamMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpstreamMetadata) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamMetadata) GetBaseTime() *BaseTime {
	if x, ok := m.GetMetadata().(*UpstreamMetadata_BaseTime); ok {
		return x.BaseTime
	}
	return nil
}

func (m *UpstreamMetadata) GetExtensionFields() *extensions.UpstreamMetadataExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpstreamMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpstreamMetadata_BaseTime)(nil),
	}
}

type UpstreamMetadataAck struct {
	RequestId            uint32                                         `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode           ResultCode                                     `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                         `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.UpstreamMetadataAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *UpstreamMetadataAck) Reset()         { *m = UpstreamMetadataAck{} }
func (m *UpstreamMetadataAck) String() string { return proto.CompactTextString(m) }
func (*UpstreamMetadataAck) ProtoMessage()    {}
func (*UpstreamMetadataAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{9}
}
func (m *UpstreamMetadataAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamMetadataAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamMetadataAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamMetadataAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamMetadataAck.Merge(m, src)
}
func (m *UpstreamMetadataAck) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamMetadataAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamMetadataAck.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamMetadataAck proto.InternalMessageInfo

func (m *UpstreamMetadataAck) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *UpstreamMetadataAck) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *UpstreamMetadataAck) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *UpstreamMetadataAck) GetExtensionFields() *extensions.UpstreamMetadataAckExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type UpstreamChunkResult struct {
	SequenceNumber       uint32                                         `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ResultCode           ResultCode                                     `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                         `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.UpstreamChunkResultExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *UpstreamChunkResult) Reset()         { *m = UpstreamChunkResult{} }
func (m *UpstreamChunkResult) String() string { return proto.CompactTextString(m) }
func (*UpstreamChunkResult) ProtoMessage()    {}
func (*UpstreamChunkResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6e224e790f4b2fc, []int{10}
}
func (m *UpstreamChunkResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamChunkResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamChunkResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamChunkResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamChunkResult.Merge(m, src)
}
func (m *UpstreamChunkResult) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamChunkResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamChunkResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamChunkResult proto.InternalMessageInfo

func (m *UpstreamChunkResult) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *UpstreamChunkResult) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *UpstreamChunkResult) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *UpstreamChunkResult) GetExtensionFields() *extensions.UpstreamChunkResultExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

func init() {
	proto.RegisterType((*UpstreamOpenRequest)(nil), "iscp2.v1.UpstreamOpenRequest")
	proto.RegisterType((*UpstreamOpenResponse)(nil), "iscp2.v1.UpstreamOpenResponse")
	proto.RegisterMapType((map[uint32]*DataID)(nil), "iscp2.v1.UpstreamOpenResponse.DataIdAliasesEntry")
	proto.RegisterType((*UpstreamResumeRequest)(nil), "iscp2.v1.UpstreamResumeRequest")
	proto.RegisterType((*UpstreamResumeResponse)(nil), "iscp2.v1.UpstreamResumeResponse")
	proto.RegisterType((*UpstreamCloseRequest)(nil), "iscp2.v1.UpstreamCloseRequest")
	proto.RegisterType((*UpstreamCloseResponse)(nil), "iscp2.v1.UpstreamCloseResponse")
	proto.RegisterType((*UpstreamChunk)(nil), "iscp2.v1.UpstreamChunk")
	proto.RegisterType((*UpstreamChunkAck)(nil), "iscp2.v1.UpstreamChunkAck")
	proto.RegisterMapType((map[uint32]*DataID)(nil), "iscp2.v1.UpstreamChunkAck.DataIdAliasesEntry")
	proto.RegisterType((*UpstreamMetadata)(nil), "iscp2.v1.UpstreamMetadata")
	proto.RegisterType((*UpstreamMetadataAck)(nil), "iscp2.v1.UpstreamMetadataAck")
	proto.RegisterType((*UpstreamChunkResult)(nil), "iscp2.v1.UpstreamChunkResult")
}

func init() { proto.RegisterFile("iscp2/v1/upstream.proto", fileDescriptor_b6e224e790f4b2fc) }

var fileDescriptor_b6e224e790f4b2fc = []byte{
	// 1027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc6, 0x4e, 0xda, 0x26, 0x93, 0xa4, 0x09, 0xb3, 0x0d, 0x44, 0x41, 0xdb, 0x0d, 0x41, 0x5a,
	0x22, 0x60, 0x13, 0x25, 0x80, 0x5a, 0xc2, 0xa9, 0xdd, 0x5d, 0x20, 0x07, 0xa0, 0x4c, 0xd8, 0x6a,
	0x41, 0x95, 0xac, 0x89, 0x3d, 0xcd, 0x5a, 0x89, 0x3d, 0x59, 0xcf, 0x24, 0xda, 0xfe, 0x12, 0xee,
	0x1c, 0x38, 0x20, 0x71, 0xe2, 0xc4, 0x3f, 0x40, 0x9c, 0xd8, 0x7f, 0x80, 0x7a, 0xe4, 0xcc, 0x81,
	0x03, 0x02, 0x34, 0x33, 0x76, 0xec, 0xa4, 0x4e, 0x6d, 0x55, 0x48, 0xcb, 0x6d, 0xf4, 0xbe, 0xf7,
	0xde, 0xcc, 0xfb, 0xde, 0xf7, 0x66, 0x6c, 0xf0, 0xaa, 0xcd, 0xcc, 0x59, 0xaf, 0xb3, 0xe8, 0x76,
	0xe6, 0x33, 0xc6, 0x3d, 0x82, 0x9d, 0xf6, 0xcc, 0xa3, 0x9c, 0xc2, 0x9c, 0x04, 0xda, 0x8b, 0x6e,
	0xbd, 0xba, 0x74, 0x31, 0xa9, 0xe3, 0x50, 0x57, 0x39, 0xd4, 0x9b, 0x4b, 0x33, 0x79, 0xc6, 0x89,
	0xcb, 0x6c, 0xea, 0xb2, 0xb5, 0x24, 0xf5, 0x30, 0xbb, 0x43, 0x38, 0xb6, 0x30, 0xc7, 0x3e, 0x50,
	0x5f, 0x02, 0x1e, 0x61, 0xf3, 0x29, 0x37, 0x4c, 0x6a, 0x11, 0x85, 0x35, 0x9f, 0xeb, 0xe0, 0xd6,
	0x23, 0x3f, 0xcf, 0xe7, 0x33, 0xe2, 0x22, 0xf2, 0x74, 0x4e, 0x18, 0x87, 0xb7, 0x01, 0xf0, 0xd4,
	0xd2, 0xb0, 0xad, 0x9a, 0xd6, 0xd0, 0x5a, 0x25, 0x94, 0xf7, 0x2d, 0x03, 0x4b, 0xc0, 0x8c, 0x30,
	0x71, 0x0c, 0x01, 0xeb, 0x0d, 0xad, 0x95, 0x47, 0x79, 0xdf, 0x32, 0xb0, 0xe0, 0xeb, 0xa0, 0x88,
	0xcd, 0x89, 0x61, 0xbb, 0x9c, 0x78, 0x0b, 0x3c, 0xad, 0x65, 0x64, 0x7c, 0x01, 0x9b, 0x93, 0x81,
	0x6f, 0x82, 0x6f, 0x82, 0x32, 0x79, 0x36, 0xb3, 0xbd, 0x8b, 0xd0, 0x6b, 0x4b, 0x7a, 0xed, 0x2a,
	0xf3, 0xd2, 0xf1, 0x6d, 0x90, 0x13, 0xb5, 0x18, 0xb6, 0xc5, 0x6a, 0xdb, 0x8d, 0x4c, 0xab, 0xd0,
	0xab, 0xb4, 0x03, 0xba, 0xda, 0x0f, 0x30, 0xc7, 0x83, 0x07, 0x68, 0x47, 0x78, 0x0c, 0x2c, 0x06,
	0xef, 0x80, 0xcc, 0x53, 0xca, 0x6a, 0x3b, 0x0d, 0xad, 0xb5, 0xdb, 0x2b, 0x85, 0x7e, 0x5f, 0xd0,
	0x21, 0x12, 0x08, 0x1c, 0x81, 0xca, 0x92, 0x41, 0xe3, 0xdc, 0x26, 0x53, 0x8b, 0xd5, 0x72, 0x0d,
	0xad, 0x55, 0xe8, 0x1d, 0x84, 0xde, 0x21, 0xc7, 0xed, 0x18, 0x6e, 0x1e, 0x06, 0xe8, 0x47, 0x32,
	0x1c, 0x95, 0xc9, 0xaa, 0xa1, 0xf9, 0x43, 0x16, 0xec, 0xad, 0xc6, 0xb1, 0x19, 0x75, 0x19, 0x49,
	0x22, 0xf5, 0x1d, 0x00, 0x31, 0x63, 0xf6, 0xd8, 0x25, 0x96, 0xa1, 0xa2, 0x03, 0x72, 0x8b, 0xa8,
	0x12, 0x20, 0x43, 0x09, 0x0c, 0x2c, 0x78, 0x00, 0x6a, 0x57, 0xbd, 0x0d, 0x3c, 0xb5, 0x31, 0xf3,
	0xf9, 0xae, 0xae, 0xc7, 0x1c, 0x09, 0x10, 0x7e, 0x05, 0xca, 0x3e, 0xa1, 0xca, 0x9b, 0xb0, 0x5a,
	0x56, 0xf2, 0xda, 0x0d, 0x19, 0x88, 0x3b, 0xbe, 0x22, 0x5b, 0x25, 0x21, 0xec, 0xa1, 0xcb, 0xbd,
	0x0b, 0x54, 0xb2, 0xa2, 0x36, 0x78, 0x07, 0x14, 0x18, 0xf1, 0x16, 0xc4, 0x33, 0xb8, 0xed, 0x10,
	0xd9, 0x50, 0x88, 0x80, 0x32, 0x7d, 0x69, 0x3b, 0x04, 0xbe, 0x0f, 0x0a, 0x11, 0x0d, 0xd6, 0xb6,
	0x65, 0x9f, 0xf6, 0xc2, 0x7d, 0x91, 0x04, 0xef, 0x53, 0x8b, 0x20, 0xe0, 0x2d, 0xd7, 0xf0, 0x0d,
	0x50, 0xf2, 0xc3, 0x18, 0xf7, 0x6c, 0x77, 0x2c, 0x1b, 0x9c, 0x47, 0x45, 0x65, 0x1c, 0x4a, 0x1b,
	0x34, 0x37, 0xb6, 0xf6, 0x30, 0x45, 0x6b, 0x55, 0x8d, 0x49, 0xbd, 0xad, 0x23, 0x00, 0xaf, 0xd2,
	0x00, 0x2b, 0x20, 0x33, 0x21, 0x17, 0x7e, 0x47, 0xc5, 0x12, 0xde, 0x05, 0x5b, 0x0b, 0x3c, 0x9d,
	0x13, 0xd9, 0xbe, 0x38, 0xc9, 0x2a, 0xb8, 0xaf, 0x1f, 0x6a, 0xcd, 0x9f, 0x34, 0x50, 0x0d, 0x0e,
	0x23, 0x08, 0x70, 0x48, 0xca, 0x29, 0x7c, 0x0d, 0xe4, 0xd7, 0x75, 0x92, 0x63, 0x81, 0x3e, 0xac,
	0x18, 0x3a, 0x32, 0xf2, 0x30, 0x1f, 0x5c, 0x4b, 0xc7, 0xca, 0x09, 0x12, 0xb5, 0xfe, 0xa3, 0x0e,
	0x5e, 0x59, 0x8f, 0x4c, 0xa7, 0xf6, 0xeb, 0xf4, 0xab, 0x5f, 0xa7, 0xdf, 0x35, 0x0d, 0x65, 0x6e,
	0xaa, 0xa1, 0x6c, 0x8c, 0x86, 0x48, 0x0c, 0x69, 0x5b, 0x92, 0xb4, 0x7e, 0x2a, 0xd2, 0xd2, 0xa9,
	0xa8, 0xf9, 0x8d, 0x1e, 0xde, 0x10, 0xf7, 0xa7, 0x94, 0xfd, 0x27, 0x0d, 0x7f, 0x0b, 0xbc, 0xcc,
	0x29, 0xc7, 0x53, 0x43, 0x4e, 0xf7, 0x8c, 0xda, 0x2e, 0x57, 0x1d, 0xcf, 0xa2, 0xb2, 0x04, 0x84,
	0xf2, 0x4e, 0xa4, 0x19, 0xf6, 0x40, 0xf5, 0xdc, 0x76, 0xf1, 0xd4, 0x60, 0x22, 0xb7, 0x6b, 0x12,
	0xc3, 0x9d, 0x3b, 0x23, 0xe2, 0x49, 0x52, 0x4a, 0xe8, 0x96, 0x04, 0x87, 0x3e, 0xf6, 0x99, 0x84,
	0x62, 0xe7, 0x6b, 0x2b, 0xc5, 0x7c, 0x45, 0x0b, 0x4c, 0x64, 0xe6, 0xcf, 0xc8, 0x2c, 0xf8, 0x81,
	0xe9, 0xe4, 0xb4, 0xa6, 0x0a, 0xfd, 0xa6, 0xaa, 0xc8, 0xc4, 0xa8, 0x22, 0x6e, 0x94, 0xb2, 0x29,
	0x46, 0x69, 0xa5, 0x80, 0xc4, 0xd2, 0xff, 0xd2, 0x40, 0x69, 0x19, 0xf9, 0x64, 0xee, 0x4e, 0xe0,
	0x5d, 0x50, 0x5e, 0x9f, 0x0c, 0x55, 0x77, 0x89, 0xad, 0x4c, 0xc4, 0x21, 0x28, 0xfa, 0x7e, 0xa6,
	0x88, 0xf3, 0xef, 0x9c, 0x6a, 0x78, 0xb6, 0x61, 0x98, 0x14, 0x15, 0xa2, 0x3b, 0x44, 0x1f, 0xd7,
	0x4c, 0xd2, 0xe3, 0x7a, 0xb6, 0x91, 0x86, 0xee, 0xf5, 0x34, 0x88, 0xad, 0x12, 0xcb, 0xff, 0x47,
	0x07, 0x95, 0x95, 0x88, 0x23, 0x33, 0x3d, 0x03, 0x07, 0x60, 0x47, 0x75, 0x4c, 0xdc, 0x1d, 0xa2,
	0x8c, 0xdb, 0x57, 0xdf, 0x32, 0x55, 0xbe, 0xf4, 0x42, 0x81, 0x37, 0x7c, 0x74, 0xf5, 0x31, 0x54,
	0x3c, 0xdc, 0xdb, 0x90, 0xe0, 0xc8, 0x9c, 0xa4, 0x78, 0x08, 0x8d, 0x8d, 0x54, 0xbd, 0x97, 0x4c,
	0xd5, 0x91, 0x39, 0x79, 0x21, 0xef, 0xd0, 0x73, 0x2d, 0xec, 0xc0, 0xa7, 0xfe, 0x27, 0x64, 0xd2,
	0xd8, 0x75, 0x41, 0x7e, 0x84, 0x19, 0x51, 0xef, 0xbd, 0xda, 0x03, 0x86, 0x7b, 0x1c, 0x63, 0x46,
	0xc4, 0xbb, 0xff, 0xc9, 0x4b, 0x28, 0x37, 0xf2, 0xd7, 0x37, 0xe6, 0x26, 0x38, 0x52, 0x12, 0x37,
	0xc7, 0x00, 0xe4, 0x82, 0x2f, 0xe0, 0xe6, 0x1f, 0x5a, 0xf8, 0x7d, 0x1b, 0x24, 0x10, 0xc2, 0x7a,
	0x81, 0xb7, 0xc9, 0x68, 0x63, 0xfd, 0x07, 0xa9, 0xea, 0x4f, 0x21, 0x8f, 0xe6, 0xdf, 0x91, 0xb2,
	0x23, 0xba, 0x17, 0x5f, 0xdd, 0xeb, 0x37, 0xbe, 0xaa, 0x7d, 0x97, 0xad, 0x5e, 0xf6, 0xff, 0x47,
	0x02, 0x22, 0x85, 0x24, 0x6a, 0xe0, 0x3b, 0xed, 0xe7, 0xcb, 0x7d, 0xed, 0xd7, 0xcb, 0x7d, 0xed,
	0xb7, 0xcb, 0x7d, 0x0d, 0x14, 0x4d, 0xea, 0x2c, 0x73, 0x1f, 0x2f, 0xaf, 0xd9, 0x13, 0xf1, 0x0f,
	0x74, 0xa2, 0x7d, 0xdd, 0x1f, 0xdb, 0xfc, 0xc9, 0x7c, 0xd4, 0x36, 0xa9, 0xd3, 0xc1, 0x33, 0x3e,
	0xa3, 0x56, 0x47, 0x38, 0xdf, 0x93, 0xff, 0x48, 0x9d, 0x31, 0x71, 0x3b, 0x63, 0x3a, 0xa6, 0xe7,
	0x98, 0xf1, 0x4e, 0xf0, 0x2f, 0xf5, 0xa1, 0x5c, 0x2c, 0xba, 0xdf, 0xea, 0x99, 0xc1, 0xe3, 0xc7,
	0xdf, 0xeb, 0xb9, 0x81, 0xcc, 0x7e, 0xda, 0xfd, 0xc5, 0x5f, 0x9e, 0x9d, 0x76, 0x2f, 0xf5, 0xbd,
	0x60, 0x79, 0xf6, 0xf1, 0xc9, 0x71, 0xd0, 0xc0, 0xdf, 0xf5, 0xbc, 0x34, 0xf7, 0xfb, 0xa7, 0xdd,
	0xd1, 0xb6, 0xdc, 0xe3, 0xdd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x13, 0xbf, 0x74, 0x12, 0x1c,
	0x0e, 0x00, 0x00,
}

func (m *UpstreamOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Qos != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DataIds) > 0 {
		for iNdEx := len(m.DataIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpstream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ExpiryInterval != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.ExpiryInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.AckInterval != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.AckInterval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ResultCode != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x30
	}
	if m.ServerTime != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64((uint64(m.ServerTime)<<1)^uint64((m.ServerTime>>63))))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DataIdAliases) > 0 {
		for k := range m.DataIdAliases {
			v := m.DataIdAliases[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUpstream(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUpstream(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUpstream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AssignedStreamIdAlias != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.AssignedStreamIdAlias))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AssignedStreamId) > 0 {
		i -= len(m.AssignedStreamId)
		copy(dAtA[i:], m.AssignedStreamId)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.AssignedStreamId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamResumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamResumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamResumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamResumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamResumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamResumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResultCode != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x18
	}
	if m.AssignedStreamIdAlias != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.AssignedStreamIdAlias))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FinalSequenceNumber != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.FinalSequenceNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDataPoints != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.TotalDataPoints))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataIds) > 0 {
		for iNdEx := len(m.DataIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpstream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StreamChunk != nil {
		{
			size, err := m.StreamChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StreamIdAlias != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.StreamIdAlias))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamChunkAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamChunkAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamChunkAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataIdAliases) > 0 {
		for k := range m.DataIdAliases {
			v := m.DataIdAliases[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUpstream(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUpstream(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUpstream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpstream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StreamIdAlias != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.StreamIdAlias))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Metadata != nil {
		{
			size := m.Metadata.Size()
			i -= size
			if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamMetadata_BaseTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamMetadata_BaseTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaseTime != nil {
		{
			size, err := m.BaseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UpstreamMetadataAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamMetadataAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamMetadataAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamChunkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamChunkResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamChunkResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintUpstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintUpstream(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpstream(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpstream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpstreamOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.AckInterval != 0 {
		n += 1 + sovUpstream(uint64(m.AckInterval))
	}
	if m.ExpiryInterval != 0 {
		n += 1 + sovUpstream(uint64(m.ExpiryInterval))
	}
	if len(m.DataIds) > 0 {
		for _, e := range m.DataIds {
			l = e.Size()
			n += 1 + l + sovUpstream(uint64(l))
		}
	}
	if m.Qos != 0 {
		n += 1 + sovUpstream(uint64(m.Qos))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	l = len(m.AssignedStreamId)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.AssignedStreamIdAlias != 0 {
		n += 1 + sovUpstream(uint64(m.AssignedStreamIdAlias))
	}
	if len(m.DataIdAliases) > 0 {
		for k, v := range m.DataIdAliases {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUpstream(uint64(l))
			}
			mapEntrySize := 1 + sovUpstream(uint64(k)) + l
			n += mapEntrySize + 1 + sovUpstream(uint64(mapEntrySize))
		}
	}
	if m.ServerTime != 0 {
		n += 1 + sozUpstream(uint64(m.ServerTime))
	}
	if m.ResultCode != 0 {
		n += 1 + sovUpstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamResumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamResumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	if m.AssignedStreamIdAlias != 0 {
		n += 1 + sovUpstream(uint64(m.AssignedStreamIdAlias))
	}
	if m.ResultCode != 0 {
		n += 1 + sovUpstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.TotalDataPoints != 0 {
		n += 1 + sovUpstream(uint64(m.TotalDataPoints))
	}
	if m.FinalSequenceNumber != 0 {
		n += 1 + sovUpstream(uint64(m.FinalSequenceNumber))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	if m.ResultCode != 0 {
		n += 1 + sovUpstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamIdAlias != 0 {
		n += 1 + sovUpstream(uint64(m.StreamIdAlias))
	}
	if m.StreamChunk != nil {
		l = m.StreamChunk.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if len(m.DataIds) > 0 {
		for _, e := range m.DataIds {
			l = e.Size()
			n += 1 + l + sovUpstream(uint64(l))
		}
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamChunkAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamIdAlias != 0 {
		n += 1 + sovUpstream(uint64(m.StreamIdAlias))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovUpstream(uint64(l))
		}
	}
	if len(m.DataIdAliases) > 0 {
		for k, v := range m.DataIdAliases {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUpstream(uint64(l))
			}
			mapEntrySize := 1 + sovUpstream(uint64(k)) + l
			n += mapEntrySize + 1 + sovUpstream(uint64(mapEntrySize))
		}
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamMetadata_BaseTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseTime != nil {
		l = m.BaseTime.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	return n
}
func (m *UpstreamMetadataAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovUpstream(uint64(m.RequestId))
	}
	if m.ResultCode != 0 {
		n += 1 + sovUpstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamChunkResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovUpstream(uint64(m.SequenceNumber))
	}
	if m.ResultCode != 0 {
		n += 1 + sovUpstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovUpstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUpstream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpstream(x uint64) (n int) {
	return sovUpstream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpstreamOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckInterval", wireType)
			}
			m.AckInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryInterval", wireType)
			}
			m.ExpiryInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataIds = append(m.DataIds, &DataID{})
			if err := m.DataIds[len(m.DataIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= QoS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamOpenRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedStreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedStreamId = append(m.AssignedStreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.AssignedStreamId == nil {
				m.AssignedStreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedStreamIdAlias", wireType)
			}
			m.AssignedStreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignedStreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIdAliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataIdAliases == nil {
				m.DataIdAliases = make(map[uint32]*DataID)
			}
			var mapkey uint32
			var mapvalue *DataID
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpstream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUpstream
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUpstream
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DataID{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUpstream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUpstream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DataIdAliases[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ServerTime = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamOpenResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamResumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamResumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamResumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamResumeRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamResumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamResumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamResumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedStreamIdAlias", wireType)
			}
			m.AssignedStreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignedStreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamResumeResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDataPoints", wireType)
			}
			m.TotalDataPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDataPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSequenceNumber", wireType)
			}
			m.FinalSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalSequenceNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamCloseRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamCloseResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdAlias", wireType)
			}
			m.StreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamChunk == nil {
				m.StreamChunk = &StreamChunk{}
			}
			if err := m.StreamChunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataIds = append(m.DataIds, &DataID{})
			if err := m.DataIds[len(m.DataIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamChunkExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamChunkAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamChunkAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamChunkAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdAlias", wireType)
			}
			m.StreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &UpstreamChunkResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIdAliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataIdAliases == nil {
				m.DataIdAliases = make(map[uint32]*DataID)
			}
			var mapkey uint32
			var mapvalue *DataID
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpstream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUpstream
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUpstream
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DataID{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUpstream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUpstream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DataIdAliases[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamChunkAckExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaseTime{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &UpstreamMetadata_BaseTime{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamMetadataExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamMetadataAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamMetadataAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamMetadataAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamMetadataAckExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamChunkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamChunkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamChunkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamChunkResultExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpstream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpstream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpstream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpstream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpstream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpstream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpstream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpstream = fmt.Errorf("proto: unexpected end of group")
)
