// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscp2/v1/connection.proto

package iscp2v1

import (
	fmt "fmt"
	extensions "github.com/aptpod/iscp-proto/gen/gogofast/iscp2/v1/extensions"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectRequest struct {
	RequestId            uint32                                    `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ProtocolVersion      string                                    `protobuf:"bytes,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	NodeId               string                                    `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	PingInterval         uint32                                    `protobuf:"varint,4,opt,name=ping_interval,json=pingInterval,proto3" json:"ping_interval,omitempty"`
	PingTimeout          uint32                                    `protobuf:"varint,5,opt,name=ping_timeout,json=pingTimeout,proto3" json:"ping_timeout,omitempty"`
	ExtensionFields      *extensions.ConnectRequestExtensionFields `protobuf:"bytes,6,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f15d4eef2338ff0, []int{0}
}
func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *ConnectRequest) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *ConnectRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ConnectRequest) GetPingInterval() uint32 {
	if m != nil {
		return m.PingInterval
	}
	return 0
}

func (m *ConnectRequest) GetPingTimeout() uint32 {
	if m != nil {
		return m.PingTimeout
	}
	return 0
}

func (m *ConnectRequest) GetExtensionFields() *extensions.ConnectRequestExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type ConnectResponse struct {
	RequestId            uint32                                     `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ProtocolVersion      string                                     `protobuf:"bytes,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	ResultCode           ResultCode                                 `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                     `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.ConnectResponseExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f15d4eef2338ff0, []int{1}
}
func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

func (m *ConnectResponse) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *ConnectResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *ConnectResponse) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *ConnectResponse) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *ConnectResponse) GetExtensionFields() *extensions.ConnectResponseExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

type Disconnect struct {
	ResultCode           ResultCode                            `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=iscp2.v1.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                `protobuf:"bytes,2,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.DisconnectExtensionFields `protobuf:"bytes,3,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *Disconnect) Reset()         { *m = Disconnect{} }
func (m *Disconnect) String() string { return proto.CompactTextString(m) }
func (*Disconnect) ProtoMessage()    {}
func (*Disconnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f15d4eef2338ff0, []int{2}
}
func (m *Disconnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Disconnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Disconnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Disconnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disconnect.Merge(m, src)
}
func (m *Disconnect) XXX_Size() int {
	return m.Size()
}
func (m *Disconnect) XXX_DiscardUnknown() {
	xxx_messageInfo_Disconnect.DiscardUnknown(m)
}

var xxx_messageInfo_Disconnect proto.InternalMessageInfo

func (m *Disconnect) GetResultCode() ResultCode {
	if m != nil {
		return m.ResultCode
	}
	return ResultCode_SUCCEEDED
}

func (m *Disconnect) GetResultString() string {
	if m != nil {
		return m.ResultString
	}
	return ""
}

func (m *Disconnect) GetExtensionFields() *extensions.DisconnectExtensionFields {
	if m != nil {
		return m.ExtensionFields
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "iscp2.v1.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "iscp2.v1.ConnectResponse")
	proto.RegisterType((*Disconnect)(nil), "iscp2.v1.Disconnect")
}

func init() { proto.RegisterFile("iscp2/v1/connection.proto", fileDescriptor_6f15d4eef2338ff0) }

var fileDescriptor_6f15d4eef2338ff0 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb5, 0x0e, 0x0d, 0xcd, 0x26, 0x6d, 0x2a, 0xab, 0x12, 0x26, 0x12, 0x51, 0x28, 0x1c,
	0xc2, 0x01, 0x5b, 0x4e, 0xc5, 0x25, 0xdc, 0x52, 0x3e, 0xe4, 0x03, 0x52, 0x64, 0x50, 0x54, 0x50,
	0xc1, 0x72, 0xbd, 0x5b, 0xb3, 0x52, 0xb2, 0x63, 0xbc, 0x1b, 0x8b, 0x37, 0x41, 0xe2, 0xc8, 0x09,
	0xf1, 0x1a, 0x5c, 0x10, 0x27, 0x1e, 0x01, 0xe5, 0xc8, 0x53, 0x20, 0x8f, 0x3f, 0x42, 0x21, 0x22,
	0x12, 0xe2, 0x36, 0xfb, 0x9b, 0x99, 0x9d, 0xfd, 0xff, 0xc7, 0xa6, 0xd7, 0x85, 0x8a, 0x92, 0x91,
	0x93, 0xb9, 0x4e, 0x04, 0x52, 0xf2, 0x48, 0x0b, 0x90, 0x76, 0x92, 0x82, 0x06, 0x73, 0x17, 0x53,
	0x76, 0xe6, 0xf6, 0x6e, 0xd7, 0x45, 0xfc, 0xad, 0xe6, 0x52, 0x09, 0x90, 0xea, 0x8f, 0xfa, 0x5e,
	0xaf, 0xae, 0x4a, 0xb9, 0x5a, 0xce, 0x75, 0x10, 0x01, 0xe3, 0x45, 0xee, 0xe8, 0xbd, 0x41, 0xf7,
	0x4f, 0x8a, 0x06, 0x9f, 0xbf, 0x59, 0x72, 0xa5, 0xcd, 0x1b, 0x94, 0xa6, 0x45, 0x18, 0x08, 0x66,
	0x91, 0x01, 0x19, 0xee, 0xf9, 0xad, 0x92, 0x78, 0xcc, 0xbc, 0x43, 0x0f, 0xb0, 0x35, 0x82, 0x79,
	0x90, 0xf1, 0x34, 0x9f, 0x69, 0x19, 0x03, 0x32, 0x6c, 0xf9, 0xdd, 0x8a, 0xcf, 0x0a, 0x6c, 0x5e,
	0xa3, 0x57, 0x25, 0x30, 0x9e, 0x5f, 0xd3, 0xc0, 0x8a, 0x66, 0x7e, 0xf4, 0x98, 0x79, 0x8b, 0xee,
	0x25, 0x42, 0xc6, 0x81, 0x90, 0x9a, 0xa7, 0x59, 0x38, 0xb7, 0xae, 0xe0, 0x94, 0x4e, 0x0e, 0xbd,
	0x92, 0x99, 0x37, 0x29, 0x9e, 0x03, 0x2d, 0x16, 0x1c, 0x96, 0xda, 0xda, 0xc1, 0x9a, 0x76, 0xce,
	0x9e, 0x15, 0xc8, 0x7c, 0x49, 0x0f, 0x6a, 0xe1, 0xc1, 0x85, 0xe0, 0x73, 0xa6, 0xac, 0xe6, 0x80,
	0x0c, 0xdb, 0xa3, 0x91, 0x5d, 0x99, 0x64, 0xaf, 0xad, 0xb1, 0x2f, 0x2b, 0x7d, 0x58, 0x25, 0x1e,
	0x61, 0xa7, 0xdf, 0xe5, 0x97, 0xc1, 0xd1, 0x3b, 0x83, 0x76, 0xeb, 0x16, 0x95, 0x80, 0x54, 0xfc,
	0x3f, 0xba, 0x73, 0x8f, 0xb6, 0x7f, 0xd9, 0x07, 0x3a, 0xb4, 0x3f, 0x3a, 0x5c, 0xbf, 0xdb, 0xc7,
	0xe4, 0x09, 0x30, 0xee, 0xd3, 0xb4, 0x8e, 0x73, 0xef, 0xca, 0x36, 0xa5, 0x53, 0x21, 0x63, 0xf4,
	0xae, 0xe5, 0x77, 0x0a, 0xf8, 0x14, 0x99, 0xf9, 0x6a, 0x83, 0x31, 0x3b, 0x68, 0xcc, 0xf1, 0xdf,
	0x8d, 0x29, 0x54, 0x6e, 0x75, 0xe6, 0x33, 0xa1, 0xf4, 0x81, 0x50, 0xe5, 0xa7, 0xf6, 0xbb, 0x14,
	0xf2, 0xaf, 0x52, 0x8c, 0x0d, 0x52, 0x9e, 0x6f, 0x90, 0xd2, 0x40, 0x29, 0xf6, 0x46, 0x29, 0xeb,
	0x67, 0x6d, 0x53, 0x31, 0xf9, 0x48, 0xbe, 0xac, 0xfa, 0xe4, 0xdb, 0xaa, 0x4f, 0xbe, 0xaf, 0xfa,
	0x84, 0x76, 0x22, 0x58, 0xd4, 0x57, 0x4e, 0xaa, 0xcd, 0x0b, 0x90, 0xd3, 0x7c, 0x73, 0x53, 0xf2,
	0x62, 0x1c, 0x0b, 0xfd, 0x7a, 0x79, 0x6e, 0x47, 0xb0, 0x70, 0xc2, 0x44, 0x27, 0xc0, 0x9c, 0xbc,
	0xfc, 0x2e, 0x6e, 0xd6, 0x89, 0xb9, 0x74, 0x62, 0x88, 0xe1, 0x22, 0x54, 0xda, 0xa9, 0x7e, 0xb9,
	0xfb, 0x18, 0x64, 0xee, 0x07, 0xa3, 0xe1, 0x9d, 0x9e, 0x7e, 0x32, 0x76, 0x3d, 0xbc, 0x7f, 0xe6,
	0x7e, 0x2d, 0xc3, 0xb3, 0x99, 0xbb, 0x32, 0x0e, 0xab, 0xf0, 0xec, 0xf1, 0x74, 0xf2, 0x84, 0xeb,
	0x90, 0x85, 0x3a, 0xfc, 0x61, 0xb4, 0x10, 0x8f, 0xc7, 0x33, 0xf7, 0xbc, 0x89, 0x33, 0x8e, 0x7f,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x88, 0x0c, 0xfb, 0x0a, 0x17, 0x04, 0x00, 0x00,
}

func (m *ConnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PingTimeout != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.PingTimeout))
		i--
		dAtA[i] = 0x28
	}
	if m.PingInterval != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.PingInterval))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintConnection(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProtocolVersion) > 0 {
		i -= len(m.ProtocolVersion)
		copy(dAtA[i:], m.ProtocolVersion)
		i = encodeVarintConnection(dAtA, i, uint64(len(m.ProtocolVersion)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintConnection(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResultCode != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProtocolVersion) > 0 {
		i -= len(m.ProtocolVersion)
		copy(dAtA[i:], m.ProtocolVersion)
		i = encodeVarintConnection(dAtA, i, uint64(len(m.ProtocolVersion)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Disconnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Disconnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Disconnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintConnection(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResultCode != 0 {
		i = encodeVarintConnection(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConnection(dAtA []byte, offset int, v uint64) int {
	offset -= sovConnection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovConnection(uint64(m.RequestId))
	}
	l = len(m.ProtocolVersion)
	if l > 0 {
		n += 1 + l + sovConnection(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.PingInterval != 0 {
		n += 1 + sovConnection(uint64(m.PingInterval))
	}
	if m.PingTimeout != 0 {
		n += 1 + sovConnection(uint64(m.PingTimeout))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovConnection(uint64(m.RequestId))
	}
	l = len(m.ProtocolVersion)
	if l > 0 {
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.ResultCode != 0 {
		n += 1 + sovConnection(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Disconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovConnection(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovConnection(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConnection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConnection(x uint64) (n int) {
	return sovConnection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingInterval", wireType)
			}
			m.PingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingTimeout", wireType)
			}
			m.PingTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.ConnectRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.ConnectResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Disconnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Disconnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Disconnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DisconnectExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConnection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConnection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConnection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConnection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConnection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConnection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConnection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConnection = fmt.Errorf("proto: unexpected end of group")
)
