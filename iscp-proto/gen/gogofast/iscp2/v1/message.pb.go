// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iscp2/v1/message.proto

package iscp2v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Message:
	//	*Message_ConnectRequest
	//	*Message_ConnectResponse
	//	*Message_Disconnect
	//	*Message_UpstreamOpenRequest
	//	*Message_UpstreamOpenResponse
	//	*Message_UpstreamResumeRequest
	//	*Message_UpstreamResumeResponse
	//	*Message_UpstreamCloseRequest
	//	*Message_UpstreamCloseResponse
	//	*Message_UpstreamChunk
	//	*Message_UpstreamChunkAck
	//	*Message_UpstreamMetadata
	//	*Message_UpstreamMetadataAck
	//	*Message_DownstreamOpenRequest
	//	*Message_DownstreamOpenResponse
	//	*Message_DownstreamResumeRequest
	//	*Message_DownstreamResumeResponse
	//	*Message_DownstreamCloseRequest
	//	*Message_DownstreamCloseResponse
	//	*Message_DownstreamChunk
	//	*Message_DownstreamChunkAck
	//	*Message_DownstreamChunkAckComplete
	//	*Message_DownstreamMetadata
	//	*Message_DownstreamMetadataAck
	//	*Message_Ping
	//	*Message_Pong
	//	*Message_UpstreamCall
	//	*Message_UpstreamCallAck
	//	*Message_DownstreamCall
	Message              isMessage_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_e87fd5b9f4831430, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Message interface {
	isMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_ConnectRequest struct {
	ConnectRequest *ConnectRequest `protobuf:"bytes,1,opt,name=connect_request,json=connectRequest,proto3,oneof" json:"connect_request,omitempty"`
}
type Message_ConnectResponse struct {
	ConnectResponse *ConnectResponse `protobuf:"bytes,2,opt,name=connect_response,json=connectResponse,proto3,oneof" json:"connect_response,omitempty"`
}
type Message_Disconnect struct {
	Disconnect *Disconnect `protobuf:"bytes,3,opt,name=disconnect,proto3,oneof" json:"disconnect,omitempty"`
}
type Message_UpstreamOpenRequest struct {
	UpstreamOpenRequest *UpstreamOpenRequest `protobuf:"bytes,64,opt,name=upstream_open_request,json=upstreamOpenRequest,proto3,oneof" json:"upstream_open_request,omitempty"`
}
type Message_UpstreamOpenResponse struct {
	UpstreamOpenResponse *UpstreamOpenResponse `protobuf:"bytes,65,opt,name=upstream_open_response,json=upstreamOpenResponse,proto3,oneof" json:"upstream_open_response,omitempty"`
}
type Message_UpstreamResumeRequest struct {
	UpstreamResumeRequest *UpstreamResumeRequest `protobuf:"bytes,66,opt,name=upstream_resume_request,json=upstreamResumeRequest,proto3,oneof" json:"upstream_resume_request,omitempty"`
}
type Message_UpstreamResumeResponse struct {
	UpstreamResumeResponse *UpstreamResumeResponse `protobuf:"bytes,67,opt,name=upstream_resume_response,json=upstreamResumeResponse,proto3,oneof" json:"upstream_resume_response,omitempty"`
}
type Message_UpstreamCloseRequest struct {
	UpstreamCloseRequest *UpstreamCloseRequest `protobuf:"bytes,68,opt,name=upstream_close_request,json=upstreamCloseRequest,proto3,oneof" json:"upstream_close_request,omitempty"`
}
type Message_UpstreamCloseResponse struct {
	UpstreamCloseResponse *UpstreamCloseResponse `protobuf:"bytes,69,opt,name=upstream_close_response,json=upstreamCloseResponse,proto3,oneof" json:"upstream_close_response,omitempty"`
}
type Message_UpstreamChunk struct {
	UpstreamChunk *UpstreamChunk `protobuf:"bytes,70,opt,name=upstream_chunk,json=upstreamChunk,proto3,oneof" json:"upstream_chunk,omitempty"`
}
type Message_UpstreamChunkAck struct {
	UpstreamChunkAck *UpstreamChunkAck `protobuf:"bytes,71,opt,name=upstream_chunk_ack,json=upstreamChunkAck,proto3,oneof" json:"upstream_chunk_ack,omitempty"`
}
type Message_UpstreamMetadata struct {
	UpstreamMetadata *UpstreamMetadata `protobuf:"bytes,72,opt,name=upstream_metadata,json=upstreamMetadata,proto3,oneof" json:"upstream_metadata,omitempty"`
}
type Message_UpstreamMetadataAck struct {
	UpstreamMetadataAck *UpstreamMetadataAck `protobuf:"bytes,73,opt,name=upstream_metadata_ack,json=upstreamMetadataAck,proto3,oneof" json:"upstream_metadata_ack,omitempty"`
}
type Message_DownstreamOpenRequest struct {
	DownstreamOpenRequest *DownstreamOpenRequest `protobuf:"bytes,128,opt,name=downstream_open_request,json=downstreamOpenRequest,proto3,oneof" json:"downstream_open_request,omitempty"`
}
type Message_DownstreamOpenResponse struct {
	DownstreamOpenResponse *DownstreamOpenResponse `protobuf:"bytes,129,opt,name=downstream_open_response,json=downstreamOpenResponse,proto3,oneof" json:"downstream_open_response,omitempty"`
}
type Message_DownstreamResumeRequest struct {
	DownstreamResumeRequest *DownstreamResumeRequest `protobuf:"bytes,130,opt,name=downstream_resume_request,json=downstreamResumeRequest,proto3,oneof" json:"downstream_resume_request,omitempty"`
}
type Message_DownstreamResumeResponse struct {
	DownstreamResumeResponse *DownstreamResumeResponse `protobuf:"bytes,131,opt,name=downstream_resume_response,json=downstreamResumeResponse,proto3,oneof" json:"downstream_resume_response,omitempty"`
}
type Message_DownstreamCloseRequest struct {
	DownstreamCloseRequest *DownstreamCloseRequest `protobuf:"bytes,132,opt,name=downstream_close_request,json=downstreamCloseRequest,proto3,oneof" json:"downstream_close_request,omitempty"`
}
type Message_DownstreamCloseResponse struct {
	DownstreamCloseResponse *DownstreamCloseResponse `protobuf:"bytes,133,opt,name=downstream_close_response,json=downstreamCloseResponse,proto3,oneof" json:"downstream_close_response,omitempty"`
}
type Message_DownstreamChunk struct {
	DownstreamChunk *DownstreamChunk `protobuf:"bytes,134,opt,name=downstream_chunk,json=downstreamChunk,proto3,oneof" json:"downstream_chunk,omitempty"`
}
type Message_DownstreamChunkAck struct {
	DownstreamChunkAck *DownstreamChunkAck `protobuf:"bytes,135,opt,name=downstream_chunk_ack,json=downstreamChunkAck,proto3,oneof" json:"downstream_chunk_ack,omitempty"`
}
type Message_DownstreamChunkAckComplete struct {
	DownstreamChunkAckComplete *DownstreamChunkAckComplete `protobuf:"bytes,136,opt,name=downstream_chunk_ack_complete,json=downstreamChunkAckComplete,proto3,oneof" json:"downstream_chunk_ack_complete,omitempty"`
}
type Message_DownstreamMetadata struct {
	DownstreamMetadata *DownstreamMetadata `protobuf:"bytes,137,opt,name=downstream_metadata,json=downstreamMetadata,proto3,oneof" json:"downstream_metadata,omitempty"`
}
type Message_DownstreamMetadataAck struct {
	DownstreamMetadataAck *DownstreamMetadataAck `protobuf:"bytes,138,opt,name=downstream_metadata_ack,json=downstreamMetadataAck,proto3,oneof" json:"downstream_metadata_ack,omitempty"`
}
type Message_Ping struct {
	Ping *Ping `protobuf:"bytes,192,opt,name=ping,proto3,oneof" json:"ping,omitempty"`
}
type Message_Pong struct {
	Pong *Pong `protobuf:"bytes,193,opt,name=pong,proto3,oneof" json:"pong,omitempty"`
}
type Message_UpstreamCall struct {
	UpstreamCall *UpstreamCall `protobuf:"bytes,256,opt,name=upstream_call,json=upstreamCall,proto3,oneof" json:"upstream_call,omitempty"`
}
type Message_UpstreamCallAck struct {
	UpstreamCallAck *UpstreamCallAck `protobuf:"bytes,257,opt,name=upstream_call_ack,json=upstreamCallAck,proto3,oneof" json:"upstream_call_ack,omitempty"`
}
type Message_DownstreamCall struct {
	DownstreamCall *DownstreamCall `protobuf:"bytes,258,opt,name=downstream_call,json=downstreamCall,proto3,oneof" json:"downstream_call,omitempty"`
}

func (*Message_ConnectRequest) isMessage_Message()             {}
func (*Message_ConnectResponse) isMessage_Message()            {}
func (*Message_Disconnect) isMessage_Message()                 {}
func (*Message_UpstreamOpenRequest) isMessage_Message()        {}
func (*Message_UpstreamOpenResponse) isMessage_Message()       {}
func (*Message_UpstreamResumeRequest) isMessage_Message()      {}
func (*Message_UpstreamResumeResponse) isMessage_Message()     {}
func (*Message_UpstreamCloseRequest) isMessage_Message()       {}
func (*Message_UpstreamCloseResponse) isMessage_Message()      {}
func (*Message_UpstreamChunk) isMessage_Message()              {}
func (*Message_UpstreamChunkAck) isMessage_Message()           {}
func (*Message_UpstreamMetadata) isMessage_Message()           {}
func (*Message_UpstreamMetadataAck) isMessage_Message()        {}
func (*Message_DownstreamOpenRequest) isMessage_Message()      {}
func (*Message_DownstreamOpenResponse) isMessage_Message()     {}
func (*Message_DownstreamResumeRequest) isMessage_Message()    {}
func (*Message_DownstreamResumeResponse) isMessage_Message()   {}
func (*Message_DownstreamCloseRequest) isMessage_Message()     {}
func (*Message_DownstreamCloseResponse) isMessage_Message()    {}
func (*Message_DownstreamChunk) isMessage_Message()            {}
func (*Message_DownstreamChunkAck) isMessage_Message()         {}
func (*Message_DownstreamChunkAckComplete) isMessage_Message() {}
func (*Message_DownstreamMetadata) isMessage_Message()         {}
func (*Message_DownstreamMetadataAck) isMessage_Message()      {}
func (*Message_Ping) isMessage_Message()                       {}
func (*Message_Pong) isMessage_Message()                       {}
func (*Message_UpstreamCall) isMessage_Message()               {}
func (*Message_UpstreamCallAck) isMessage_Message()            {}
func (*Message_DownstreamCall) isMessage_Message()             {}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetConnectRequest() *ConnectRequest {
	if x, ok := m.GetMessage().(*Message_ConnectRequest); ok {
		return x.ConnectRequest
	}
	return nil
}

func (m *Message) GetConnectResponse() *ConnectResponse {
	if x, ok := m.GetMessage().(*Message_ConnectResponse); ok {
		return x.ConnectResponse
	}
	return nil
}

func (m *Message) GetDisconnect() *Disconnect {
	if x, ok := m.GetMessage().(*Message_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (m *Message) GetUpstreamOpenRequest() *UpstreamOpenRequest {
	if x, ok := m.GetMessage().(*Message_UpstreamOpenRequest); ok {
		return x.UpstreamOpenRequest
	}
	return nil
}

func (m *Message) GetUpstreamOpenResponse() *UpstreamOpenResponse {
	if x, ok := m.GetMessage().(*Message_UpstreamOpenResponse); ok {
		return x.UpstreamOpenResponse
	}
	return nil
}

func (m *Message) GetUpstreamResumeRequest() *UpstreamResumeRequest {
	if x, ok := m.GetMessage().(*Message_UpstreamResumeRequest); ok {
		return x.UpstreamResumeRequest
	}
	return nil
}

func (m *Message) GetUpstreamResumeResponse() *UpstreamResumeResponse {
	if x, ok := m.GetMessage().(*Message_UpstreamResumeResponse); ok {
		return x.UpstreamResumeResponse
	}
	return nil
}

func (m *Message) GetUpstreamCloseRequest() *UpstreamCloseRequest {
	if x, ok := m.GetMessage().(*Message_UpstreamCloseRequest); ok {
		return x.UpstreamCloseRequest
	}
	return nil
}

func (m *Message) GetUpstreamCloseResponse() *UpstreamCloseResponse {
	if x, ok := m.GetMessage().(*Message_UpstreamCloseResponse); ok {
		return x.UpstreamCloseResponse
	}
	return nil
}

func (m *Message) GetUpstreamChunk() *UpstreamChunk {
	if x, ok := m.GetMessage().(*Message_UpstreamChunk); ok {
		return x.UpstreamChunk
	}
	return nil
}

func (m *Message) GetUpstreamChunkAck() *UpstreamChunkAck {
	if x, ok := m.GetMessage().(*Message_UpstreamChunkAck); ok {
		return x.UpstreamChunkAck
	}
	return nil
}

func (m *Message) GetUpstreamMetadata() *UpstreamMetadata {
	if x, ok := m.GetMessage().(*Message_UpstreamMetadata); ok {
		return x.UpstreamMetadata
	}
	return nil
}

func (m *Message) GetUpstreamMetadataAck() *UpstreamMetadataAck {
	if x, ok := m.GetMessage().(*Message_UpstreamMetadataAck); ok {
		return x.UpstreamMetadataAck
	}
	return nil
}

func (m *Message) GetDownstreamOpenRequest() *DownstreamOpenRequest {
	if x, ok := m.GetMessage().(*Message_DownstreamOpenRequest); ok {
		return x.DownstreamOpenRequest
	}
	return nil
}

func (m *Message) GetDownstreamOpenResponse() *DownstreamOpenResponse {
	if x, ok := m.GetMessage().(*Message_DownstreamOpenResponse); ok {
		return x.DownstreamOpenResponse
	}
	return nil
}

func (m *Message) GetDownstreamResumeRequest() *DownstreamResumeRequest {
	if x, ok := m.GetMessage().(*Message_DownstreamResumeRequest); ok {
		return x.DownstreamResumeRequest
	}
	return nil
}

func (m *Message) GetDownstreamResumeResponse() *DownstreamResumeResponse {
	if x, ok := m.GetMessage().(*Message_DownstreamResumeResponse); ok {
		return x.DownstreamResumeResponse
	}
	return nil
}

func (m *Message) GetDownstreamCloseRequest() *DownstreamCloseRequest {
	if x, ok := m.GetMessage().(*Message_DownstreamCloseRequest); ok {
		return x.DownstreamCloseRequest
	}
	return nil
}

func (m *Message) GetDownstreamCloseResponse() *DownstreamCloseResponse {
	if x, ok := m.GetMessage().(*Message_DownstreamCloseResponse); ok {
		return x.DownstreamCloseResponse
	}
	return nil
}

func (m *Message) GetDownstreamChunk() *DownstreamChunk {
	if x, ok := m.GetMessage().(*Message_DownstreamChunk); ok {
		return x.DownstreamChunk
	}
	return nil
}

func (m *Message) GetDownstreamChunkAck() *DownstreamChunkAck {
	if x, ok := m.GetMessage().(*Message_DownstreamChunkAck); ok {
		return x.DownstreamChunkAck
	}
	return nil
}

func (m *Message) GetDownstreamChunkAckComplete() *DownstreamChunkAckComplete {
	if x, ok := m.GetMessage().(*Message_DownstreamChunkAckComplete); ok {
		return x.DownstreamChunkAckComplete
	}
	return nil
}

func (m *Message) GetDownstreamMetadata() *DownstreamMetadata {
	if x, ok := m.GetMessage().(*Message_DownstreamMetadata); ok {
		return x.DownstreamMetadata
	}
	return nil
}

func (m *Message) GetDownstreamMetadataAck() *DownstreamMetadataAck {
	if x, ok := m.GetMessage().(*Message_DownstreamMetadataAck); ok {
		return x.DownstreamMetadataAck
	}
	return nil
}

func (m *Message) GetPing() *Ping {
	if x, ok := m.GetMessage().(*Message_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Message) GetPong() *Pong {
	if x, ok := m.GetMessage().(*Message_Pong); ok {
		return x.Pong
	}
	return nil
}

func (m *Message) GetUpstreamCall() *UpstreamCall {
	if x, ok := m.GetMessage().(*Message_UpstreamCall); ok {
		return x.UpstreamCall
	}
	return nil
}

func (m *Message) GetUpstreamCallAck() *UpstreamCallAck {
	if x, ok := m.GetMessage().(*Message_UpstreamCallAck); ok {
		return x.UpstreamCallAck
	}
	return nil
}

func (m *Message) GetDownstreamCall() *DownstreamCall {
	if x, ok := m.GetMessage().(*Message_DownstreamCall); ok {
		return x.DownstreamCall
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_ConnectRequest)(nil),
		(*Message_ConnectResponse)(nil),
		(*Message_Disconnect)(nil),
		(*Message_UpstreamOpenRequest)(nil),
		(*Message_UpstreamOpenResponse)(nil),
		(*Message_UpstreamResumeRequest)(nil),
		(*Message_UpstreamResumeResponse)(nil),
		(*Message_UpstreamCloseRequest)(nil),
		(*Message_UpstreamCloseResponse)(nil),
		(*Message_UpstreamChunk)(nil),
		(*Message_UpstreamChunkAck)(nil),
		(*Message_UpstreamMetadata)(nil),
		(*Message_UpstreamMetadataAck)(nil),
		(*Message_DownstreamOpenRequest)(nil),
		(*Message_DownstreamOpenResponse)(nil),
		(*Message_DownstreamResumeRequest)(nil),
		(*Message_DownstreamResumeResponse)(nil),
		(*Message_DownstreamCloseRequest)(nil),
		(*Message_DownstreamCloseResponse)(nil),
		(*Message_DownstreamChunk)(nil),
		(*Message_DownstreamChunkAck)(nil),
		(*Message_DownstreamChunkAckComplete)(nil),
		(*Message_DownstreamMetadata)(nil),
		(*Message_DownstreamMetadataAck)(nil),
		(*Message_Ping)(nil),
		(*Message_Pong)(nil),
		(*Message_UpstreamCall)(nil),
		(*Message_UpstreamCallAck)(nil),
		(*Message_DownstreamCall)(nil),
	}
}

func init() {
	proto.RegisterType((*Message)(nil), "iscp2.v1.Message")
}

func init() { proto.RegisterFile("iscp2/v1/message.proto", fileDescriptor_e87fd5b9f4831430) }

var fileDescriptor_e87fd5b9f4831430 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0x4d, 0x4f, 0xe3, 0x46,
	0x18, 0xc7, 0xe3, 0x50, 0x15, 0x98, 0x42, 0x42, 0x87, 0xbc, 0x98, 0xa8, 0xa4, 0x14, 0xb5, 0x52,
	0x2f, 0x4d, 0x14, 0x2a, 0xf5, 0x40, 0xa5, 0x0a, 0x92, 0x14, 0x9c, 0x4a, 0xa8, 0xa9, 0xab, 0x46,
	0x14, 0x51, 0xa5, 0xc6, 0x9e, 0x9a, 0x14, 0xc7, 0xe3, 0xc6, 0x36, 0xbd, 0x02, 0xfb, 0xbe, 0x1f,
	0x63, 0xa5, 0xbd, 0xec, 0x17, 0xd8, 0xeb, 0xee, 0x6d, 0xb5, 0xa7, 0xfd, 0x08, 0xab, 0x1c, 0xf7,
	0x53, 0xac, 0x3c, 0x1e, 0x8f, 0x67, 0xfc, 0x92, 0x9b, 0xf3, 0xfc, 0x1f, 0xff, 0xe6, 0x79, 0x9e,
	0x99, 0xbf, 0x33, 0xa0, 0x36, 0x71, 0x75, 0x67, 0xaf, 0x7d, 0xdd, 0x69, 0x4f, 0x91, 0xeb, 0x6a,
	0x26, 0x6a, 0x39, 0x33, 0xec, 0x61, 0xb8, 0x42, 0xe2, 0xad, 0xeb, 0x4e, 0x63, 0x8b, 0x65, 0xe8,
	0xd8, 0xb6, 0x91, 0xee, 0x4d, 0xb0, 0x1d, 0x26, 0x71, 0x92, 0x81, 0xff, 0xb7, 0x5d, 0x6f, 0x86,
	0xb4, 0x29, 0x95, 0xea, 0x4c, 0x42, 0x7b, 0x68, 0xac, 0x6b, 0x96, 0x45, 0x05, 0x99, 0x09, 0xce,
	0xc4, 0x36, 0xc7, 0x0e, 0xb6, 0xcd, 0xd4, 0x2b, 0xbe, 0xc3, 0xb3, 0x76, 0x5f, 0x42, 0xb0, 0x7c,
	0x12, 0x56, 0x07, 0x7b, 0xa0, 0x4c, 0xcb, 0x18, 0xcf, 0xd0, 0x7f, 0x3e, 0x72, 0x3d, 0x59, 0xda,
	0x91, 0xbe, 0xfd, 0x6c, 0x4f, 0x6e, 0x45, 0x15, 0xb7, 0x7a, 0x61, 0x82, 0x1a, 0xea, 0x4a, 0x41,
	0x2d, 0xe9, 0x42, 0x04, 0x1e, 0x81, 0x8d, 0x18, 0xe2, 0x3a, 0xd8, 0x76, 0x91, 0x5c, 0x24, 0x94,
	0xad, 0x0c, 0x4a, 0x98, 0xa0, 0x14, 0xd4, 0xb2, 0x2e, 0x86, 0xe0, 0x0f, 0x00, 0x18, 0x13, 0x97,
	0x46, 0xe5, 0x25, 0x42, 0xa8, 0xc4, 0x84, 0x3e, 0xd3, 0x94, 0x82, 0xca, 0x65, 0xc2, 0xdf, 0x41,
	0x35, 0x6a, 0x71, 0x8c, 0x1d, 0x64, 0xb3, 0x56, 0x0e, 0x08, 0x62, 0x3b, 0x46, 0xfc, 0x41, 0xd3,
	0x7e, 0x75, 0x90, 0x1d, 0xf7, 0xb3, 0xe9, 0xa7, 0xc3, 0x70, 0x04, 0x6a, 0x49, 0x28, 0x6d, 0xed,
	0x90, 0x50, 0x9b, 0x79, 0x54, 0xd6, 0x5f, 0xc5, 0xcf, 0x88, 0xc3, 0x3f, 0x41, 0x9d, 0x71, 0x67,
	0xc8, 0xf5, 0xa7, 0x88, 0x95, 0xdb, 0x25, 0xe0, 0x2f, 0xd3, 0x60, 0x95, 0xe4, 0xc5, 0x05, 0xb3,
	0x76, 0x05, 0x01, 0x9e, 0x03, 0x39, 0x8d, 0xa6, 0x45, 0xf7, 0x08, 0x7b, 0x27, 0x9f, 0xcd, 0xca,
	0xae, 0xf9, 0x99, 0x8a, 0x30, 0x10, 0xdd, 0xc2, 0x6e, 0x5c, 0x77, 0x3f, 0x6f, 0x20, 0xbd, 0x20,
	0x2d, 0x2e, 0x9b, 0x0d, 0x84, 0x8f, 0x0b, 0x03, 0x89, 0xb8, 0xb4, 0xe8, 0x9f, 0xf3, 0x06, 0x42,
	0x01, 0xac, 0xe6, 0xaa, 0x9f, 0x25, 0xc0, 0x03, 0x50, 0x8a, 0xd1, 0x97, 0xbe, 0x7d, 0x25, 0x1f,
	0x11, 0x62, 0x3d, 0x83, 0x18, 0xc8, 0x4a, 0x41, 0x5d, 0xf7, 0xf9, 0x00, 0xfc, 0x05, 0x40, 0x91,
	0x30, 0xd6, 0xf4, 0x2b, 0xf9, 0x98, 0x50, 0x1a, 0x39, 0x94, 0x43, 0x3d, 0x00, 0x6d, 0xf8, 0x89,
	0x18, 0x1c, 0x80, 0xcf, 0x19, 0x6b, 0x8a, 0x3c, 0xcd, 0xd0, 0x3c, 0x4d, 0x56, 0xf2, 0x50, 0x27,
	0x34, 0x83, 0x47, 0x45, 0x31, 0xe1, 0xc4, 0x47, 0x28, 0x52, 0xd9, 0x20, 0xef, 0xc4, 0x47, 0xaf,
	0x86, 0xc5, 0x6d, 0xfa, 0xe9, 0x30, 0x3c, 0x03, 0xf5, 0xf8, 0xbb, 0x23, 0x1a, 0xe9, 0x46, 0x4a,
	0xee, 0x44, 0x9f, 0x65, 0x8a, 0x5e, 0xaa, 0x1a, 0x59, 0x02, 0xfc, 0x0b, 0xc8, 0x69, 0x36, 0xdd,
	0xe5, 0x5b, 0x29, 0x79, 0x36, 0x93, 0xf0, 0xf8, 0x6c, 0x1a, 0x99, 0x0a, 0xfc, 0x1b, 0x6c, 0x71,
	0xf8, 0x84, 0xad, 0xee, 0x42, 0xfe, 0x57, 0x59, 0xfc, 0xa4, 0xb3, 0xb8, 0x09, 0x88, 0xde, 0xd2,
	0x41, 0x23, 0x6b, 0x05, 0xda, 0xc2, 0xbd, 0x70, 0x89, 0xdd, 0x45, 0x4b, 0xb0, 0x26, 0x64, 0x23,
	0x47, 0x4b, 0x4c, 0x49, 0x34, 0xd9, 0xfd, 0x05, 0x53, 0x4a, 0xf8, 0x8c, 0x9b, 0x92, 0xe0, 0x34,
	0x71, 0x4a, 0x09, 0xaf, 0x3d, 0x58, 0x30, 0xa5, 0xa4, 0xdd, 0xea, 0x46, 0xb6, 0x04, 0x8f, 0xc1,
	0x06, 0xbf, 0x02, 0xb1, 0xdc, 0x43, 0x29, 0xf9, 0x57, 0xc0, 0x81, 0xa9, 0xeb, 0xca, 0x86, 0x18,
	0x82, 0xbf, 0x81, 0x4a, 0x12, 0x44, 0xce, 0xf7, 0xa3, 0x10, 0xf6, 0x45, 0x2e, 0x2c, 0x3c, 0xdf,
	0xd0, 0x48, 0x45, 0xe1, 0xbf, 0x60, 0x3b, 0x0b, 0x39, 0xd6, 0xf1, 0xd4, 0xb1, 0x90, 0x87, 0xe4,
	0xc7, 0x21, 0xfb, 0xeb, 0x45, 0xec, 0x1e, 0x4d, 0x56, 0x0a, 0x6a, 0xc3, 0xc8, 0x55, 0xe1, 0x10,
	0x6c, 0x72, 0x6b, 0x31, 0xb3, 0x3f, 0x59, 0x50, 0x3d, 0xe7, 0x77, 0xae, 0x7a, 0xe6, 0x78, 0xd1,
	0x9c, 0x82, 0xe7, 0x9f, 0x2e, 0x30, 0xa7, 0x68, 0xfb, 0xaa, 0x91, 0x25, 0xc0, 0x6f, 0xc0, 0x27,
	0xc1, 0xe5, 0x41, 0x7e, 0x15, 0x82, 0x4a, 0x31, 0x68, 0x38, 0xb1, 0x4d, 0xa5, 0xa0, 0x12, 0x99,
	0xa4, 0x61, 0xdb, 0x94, 0x5f, 0xa7, 0xd3, 0x30, 0x4d, 0xc3, 0xb6, 0x09, 0x7f, 0x02, 0xeb, 0xf1,
	0x27, 0x53, 0xb3, 0x2c, 0xf9, 0x26, 0xbc, 0x0b, 0xd4, 0x32, 0x3e, 0x97, 0x9a, 0x65, 0x29, 0x05,
	0x75, 0xcd, 0xe7, 0x7e, 0x43, 0x85, 0xfb, 0x4c, 0x06, 0xef, 0x93, 0x1e, 0x6f, 0x53, 0xf7, 0x09,
	0x9e, 0x11, 0x76, 0x57, 0xf6, 0xc5, 0x10, 0xec, 0x83, 0x32, 0xbf, 0xe3, 0x41, 0x2d, 0x77, 0xc5,
	0xe4, 0xed, 0x86, 0xdb, 0xe3, 0xb0, 0x9a, 0x92, 0x21, 0x44, 0xba, 0xab, 0x60, 0x99, 0xde, 0xe5,
	0xba, 0xcf, 0xa5, 0x37, 0xf3, 0xa6, 0xf4, 0x6e, 0xde, 0x94, 0xde, 0xcf, 0x9b, 0x12, 0x58, 0xd3,
	0xf1, 0x94, 0x81, 0xba, 0x6b, 0xf4, 0x4e, 0x35, 0x0c, 0x2e, 0x59, 0x43, 0xe9, 0x6c, 0xdf, 0x9c,
	0x78, 0x97, 0xfe, 0x45, 0x4b, 0xc7, 0xd3, 0xb6, 0xe6, 0x78, 0x0e, 0x36, 0xda, 0x41, 0xee, 0x77,
	0xe4, 0x12, 0xd6, 0x36, 0x91, 0xdd, 0x36, 0xb1, 0x89, 0xff, 0xd1, 0x5c, 0xaf, 0x1d, 0xdd, 0xd4,
	0x7e, 0x24, 0x0f, 0xd7, 0x9d, 0x67, 0xc5, 0xa5, 0xc1, 0xe9, 0xe9, 0x8b, 0xe2, 0xca, 0x80, 0xc0,
	0x47, 0x9d, 0xb7, 0xf4, 0xf1, 0x7c, 0xd4, 0x99, 0x17, 0x2b, 0xd1, 0xe3, 0xf9, 0xf1, 0xb0, 0x1b,
	0xed, 0xe3, 0x87, 0xe2, 0x2a, 0x09, 0xef, 0xef, 0x8f, 0x3a, 0x17, 0x9f, 0x92, 0x35, 0xbe, 0xff,
	0x18, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x9f, 0x4f, 0x63, 0x8e, 0x0a, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_ConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ConnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectRequest != nil {
		{
			size, err := m.ConnectRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_ConnectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ConnectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectResponse != nil {
		{
			size, err := m.ConnectResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_Disconnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Disconnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disconnect != nil {
		{
			size, err := m.Disconnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamOpenRequest != nil {
		{
			size, err := m.UpstreamOpenRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamOpenResponse != nil {
		{
			size, err := m.UpstreamOpenResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamResumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamResumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamResumeRequest != nil {
		{
			size, err := m.UpstreamResumeRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamResumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamResumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamResumeResponse != nil {
		{
			size, err := m.UpstreamResumeResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamCloseRequest != nil {
		{
			size, err := m.UpstreamCloseRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamCloseResponse != nil {
		{
			size, err := m.UpstreamCloseResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamChunk != nil {
		{
			size, err := m.UpstreamChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamChunkAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamChunkAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamChunkAck != nil {
		{
			size, err := m.UpstreamChunkAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamMetadata != nil {
		{
			size, err := m.UpstreamMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamMetadataAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamMetadataAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamMetadataAck != nil {
		{
			size, err := m.UpstreamMetadataAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamOpenRequest != nil {
		{
			size, err := m.DownstreamOpenRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamOpenResponse != nil {
		{
			size, err := m.DownstreamOpenResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamResumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamResumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamResumeRequest != nil {
		{
			size, err := m.DownstreamResumeRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamResumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamResumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamResumeResponse != nil {
		{
			size, err := m.DownstreamResumeResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamCloseRequest != nil {
		{
			size, err := m.DownstreamCloseRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamCloseResponse != nil {
		{
			size, err := m.DownstreamCloseResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamChunk != nil {
		{
			size, err := m.DownstreamChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamChunkAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamChunkAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamChunkAck != nil {
		{
			size, err := m.DownstreamChunkAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamChunkAckComplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamChunkAckComplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamChunkAckComplete != nil {
		{
			size, err := m.DownstreamChunkAckComplete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamMetadata != nil {
		{
			size, err := m.DownstreamMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamMetadataAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamMetadataAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamMetadataAck != nil {
		{
			size, err := m.DownstreamMetadataAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *Message_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ping != nil {
		{
			size, err := m.Ping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Pong != nil {
		{
			size, err := m.Pong.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamCall != nil {
		{
			size, err := m.UpstreamCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_UpstreamCallAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpstreamCallAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamCallAck != nil {
		{
			size, err := m.UpstreamCallAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Message_DownstreamCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_DownstreamCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamCall != nil {
		{
			size, err := m.DownstreamCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message_ConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectRequest != nil {
		l = m.ConnectRequest.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_ConnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectResponse != nil {
		l = m.ConnectResponse.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Disconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disconnect != nil {
		l = m.Disconnect.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamOpenRequest != nil {
		l = m.UpstreamOpenRequest.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamOpenResponse != nil {
		l = m.UpstreamOpenResponse.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamResumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamResumeRequest != nil {
		l = m.UpstreamResumeRequest.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamResumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamResumeResponse != nil {
		l = m.UpstreamResumeResponse.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamCloseRequest != nil {
		l = m.UpstreamCloseRequest.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamCloseResponse != nil {
		l = m.UpstreamCloseResponse.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamChunk != nil {
		l = m.UpstreamChunk.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamChunkAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamChunkAck != nil {
		l = m.UpstreamChunkAck.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamMetadata != nil {
		l = m.UpstreamMetadata.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamMetadataAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamMetadataAck != nil {
		l = m.UpstreamMetadataAck.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamOpenRequest != nil {
		l = m.DownstreamOpenRequest.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamOpenResponse != nil {
		l = m.DownstreamOpenResponse.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamResumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamResumeRequest != nil {
		l = m.DownstreamResumeRequest.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamResumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamResumeResponse != nil {
		l = m.DownstreamResumeResponse.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamCloseRequest != nil {
		l = m.DownstreamCloseRequest.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamCloseResponse != nil {
		l = m.DownstreamCloseResponse.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamChunk != nil {
		l = m.DownstreamChunk.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamChunkAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamChunkAck != nil {
		l = m.DownstreamChunkAck.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamChunkAckComplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamChunkAckComplete != nil {
		l = m.DownstreamChunkAckComplete.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamMetadata != nil {
		l = m.DownstreamMetadata.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamMetadataAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamMetadataAck != nil {
		l = m.DownstreamMetadataAck.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamCall != nil {
		l = m.UpstreamCall.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_UpstreamCallAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamCallAck != nil {
		l = m.UpstreamCallAck.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Message_DownstreamCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamCall != nil {
		l = m.DownstreamCall.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ConnectRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConnectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ConnectResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Disconnect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Disconnect{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamOpenRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamOpenRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamOpenRequest{v}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamOpenResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamOpenResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamOpenResponse{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamResumeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamResumeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamResumeRequest{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamResumeResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamResumeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamResumeResponse{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamCloseRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamCloseRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamCloseRequest{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamCloseResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamCloseResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamCloseResponse{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamChunk{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamChunkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamChunkAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamChunkAck{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamMetadata{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamMetadataAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamMetadataAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamMetadataAck{v}
			iNdEx = postIndex
		case 128:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamOpenRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamOpenRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamOpenRequest{v}
			iNdEx = postIndex
		case 129:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamOpenResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamOpenResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamOpenResponse{v}
			iNdEx = postIndex
		case 130:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamResumeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamResumeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamResumeRequest{v}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamResumeResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamResumeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamResumeResponse{v}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamCloseRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamCloseRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamCloseRequest{v}
			iNdEx = postIndex
		case 133:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamCloseResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamCloseResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamCloseResponse{v}
			iNdEx = postIndex
		case 134:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamChunk{v}
			iNdEx = postIndex
		case 135:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamChunkAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamChunkAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamChunkAck{v}
			iNdEx = postIndex
		case 136:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamChunkAckComplete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamChunkAckComplete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamChunkAckComplete{v}
			iNdEx = postIndex
		case 137:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamMetadata{v}
			iNdEx = postIndex
		case 138:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamMetadataAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamMetadataAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamMetadataAck{v}
			iNdEx = postIndex
		case 192:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Ping{v}
			iNdEx = postIndex
		case 193:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Pong{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Pong{v}
			iNdEx = postIndex
		case 256:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamCall{v}
			iNdEx = postIndex
		case 257:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamCallAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamCallAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_UpstreamCallAck{v}
			iNdEx = postIndex
		case 258:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_DownstreamCall{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
