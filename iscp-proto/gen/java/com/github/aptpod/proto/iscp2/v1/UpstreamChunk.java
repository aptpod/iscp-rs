// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iscp2/v1/upstream.proto

package com.github.aptpod.proto.iscp2.v1;

/**
 * Protobuf type {@code iscp2.v1.UpstreamChunk}
 */
public final class UpstreamChunk extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:iscp2.v1.UpstreamChunk)
    UpstreamChunkOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UpstreamChunk.newBuilder() to construct.
  private UpstreamChunk(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UpstreamChunk() {
    dataIds_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new UpstreamChunk();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.aptpod.proto.iscp2.v1.UpstreamProto.internal_static_iscp2_v1_UpstreamChunk_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.aptpod.proto.iscp2.v1.UpstreamProto.internal_static_iscp2_v1_UpstreamChunk_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.aptpod.proto.iscp2.v1.UpstreamChunk.class, com.github.aptpod.proto.iscp2.v1.UpstreamChunk.Builder.class);
  }

  public static final int STREAM_ID_ALIAS_FIELD_NUMBER = 1;
  private int streamIdAlias_ = 0;
  /**
   * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
   * @return The streamIdAlias.
   */
  @java.lang.Override
  public int getStreamIdAlias() {
    return streamIdAlias_;
  }

  public static final int STREAM_CHUNK_FIELD_NUMBER = 2;
  private com.github.aptpod.proto.iscp2.v1.StreamChunk streamChunk_;
  /**
   * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
   * @return Whether the streamChunk field is set.
   */
  @java.lang.Override
  public boolean hasStreamChunk() {
    return streamChunk_ != null;
  }
  /**
   * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
   * @return The streamChunk.
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.StreamChunk getStreamChunk() {
    return streamChunk_ == null ? com.github.aptpod.proto.iscp2.v1.StreamChunk.getDefaultInstance() : streamChunk_;
  }
  /**
   * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.StreamChunkOrBuilder getStreamChunkOrBuilder() {
    return streamChunk_ == null ? com.github.aptpod.proto.iscp2.v1.StreamChunk.getDefaultInstance() : streamChunk_;
  }

  public static final int DATA_IDS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.github.aptpod.proto.iscp2.v1.DataID> dataIds_;
  /**
   * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
   */
  @java.lang.Override
  public java.util.List<com.github.aptpod.proto.iscp2.v1.DataID> getDataIdsList() {
    return dataIds_;
  }
  /**
   * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder> 
      getDataIdsOrBuilderList() {
    return dataIds_;
  }
  /**
   * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
   */
  @java.lang.Override
  public int getDataIdsCount() {
    return dataIds_.size();
  }
  /**
   * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.DataID getDataIds(int index) {
    return dataIds_.get(index);
  }
  /**
   * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder getDataIdsOrBuilder(
      int index) {
    return dataIds_.get(index);
  }

  public static final int EXTENSION_FIELDS_FIELD_NUMBER = 4;
  private com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields extensionFields_;
  /**
   * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
   * @return Whether the extensionFields field is set.
   */
  @java.lang.Override
  public boolean hasExtensionFields() {
    return extensionFields_ != null;
  }
  /**
   * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
   * @return The extensionFields.
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields getExtensionFields() {
    return extensionFields_ == null ? com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.getDefaultInstance() : extensionFields_;
  }
  /**
   * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFieldsOrBuilder getExtensionFieldsOrBuilder() {
    return extensionFields_ == null ? com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.getDefaultInstance() : extensionFields_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (streamIdAlias_ != 0) {
      output.writeUInt32(1, streamIdAlias_);
    }
    if (streamChunk_ != null) {
      output.writeMessage(2, getStreamChunk());
    }
    for (int i = 0; i < dataIds_.size(); i++) {
      output.writeMessage(3, dataIds_.get(i));
    }
    if (extensionFields_ != null) {
      output.writeMessage(4, getExtensionFields());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (streamIdAlias_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, streamIdAlias_);
    }
    if (streamChunk_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getStreamChunk());
    }
    for (int i = 0; i < dataIds_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, dataIds_.get(i));
    }
    if (extensionFields_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getExtensionFields());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.aptpod.proto.iscp2.v1.UpstreamChunk)) {
      return super.equals(obj);
    }
    com.github.aptpod.proto.iscp2.v1.UpstreamChunk other = (com.github.aptpod.proto.iscp2.v1.UpstreamChunk) obj;

    if (getStreamIdAlias()
        != other.getStreamIdAlias()) return false;
    if (hasStreamChunk() != other.hasStreamChunk()) return false;
    if (hasStreamChunk()) {
      if (!getStreamChunk()
          .equals(other.getStreamChunk())) return false;
    }
    if (!getDataIdsList()
        .equals(other.getDataIdsList())) return false;
    if (hasExtensionFields() != other.hasExtensionFields()) return false;
    if (hasExtensionFields()) {
      if (!getExtensionFields()
          .equals(other.getExtensionFields())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STREAM_ID_ALIAS_FIELD_NUMBER;
    hash = (53 * hash) + getStreamIdAlias();
    if (hasStreamChunk()) {
      hash = (37 * hash) + STREAM_CHUNK_FIELD_NUMBER;
      hash = (53 * hash) + getStreamChunk().hashCode();
    }
    if (getDataIdsCount() > 0) {
      hash = (37 * hash) + DATA_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getDataIdsList().hashCode();
    }
    if (hasExtensionFields()) {
      hash = (37 * hash) + EXTENSION_FIELDS_FIELD_NUMBER;
      hash = (53 * hash) + getExtensionFields().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.aptpod.proto.iscp2.v1.UpstreamChunk prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code iscp2.v1.UpstreamChunk}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:iscp2.v1.UpstreamChunk)
      com.github.aptpod.proto.iscp2.v1.UpstreamChunkOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.aptpod.proto.iscp2.v1.UpstreamProto.internal_static_iscp2_v1_UpstreamChunk_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.aptpod.proto.iscp2.v1.UpstreamProto.internal_static_iscp2_v1_UpstreamChunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.aptpod.proto.iscp2.v1.UpstreamChunk.class, com.github.aptpod.proto.iscp2.v1.UpstreamChunk.Builder.class);
    }

    // Construct using com.github.aptpod.proto.iscp2.v1.UpstreamChunk.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      streamIdAlias_ = 0;
      streamChunk_ = null;
      if (streamChunkBuilder_ != null) {
        streamChunkBuilder_.dispose();
        streamChunkBuilder_ = null;
      }
      if (dataIdsBuilder_ == null) {
        dataIds_ = java.util.Collections.emptyList();
      } else {
        dataIds_ = null;
        dataIdsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      extensionFields_ = null;
      if (extensionFieldsBuilder_ != null) {
        extensionFieldsBuilder_.dispose();
        extensionFieldsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.aptpod.proto.iscp2.v1.UpstreamProto.internal_static_iscp2_v1_UpstreamChunk_descriptor;
    }

    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.UpstreamChunk getDefaultInstanceForType() {
      return com.github.aptpod.proto.iscp2.v1.UpstreamChunk.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.UpstreamChunk build() {
      com.github.aptpod.proto.iscp2.v1.UpstreamChunk result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.UpstreamChunk buildPartial() {
      com.github.aptpod.proto.iscp2.v1.UpstreamChunk result = new com.github.aptpod.proto.iscp2.v1.UpstreamChunk(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.github.aptpod.proto.iscp2.v1.UpstreamChunk result) {
      if (dataIdsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          dataIds_ = java.util.Collections.unmodifiableList(dataIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.dataIds_ = dataIds_;
      } else {
        result.dataIds_ = dataIdsBuilder_.build();
      }
    }

    private void buildPartial0(com.github.aptpod.proto.iscp2.v1.UpstreamChunk result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.streamIdAlias_ = streamIdAlias_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.streamChunk_ = streamChunkBuilder_ == null
            ? streamChunk_
            : streamChunkBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.extensionFields_ = extensionFieldsBuilder_ == null
            ? extensionFields_
            : extensionFieldsBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.aptpod.proto.iscp2.v1.UpstreamChunk) {
        return mergeFrom((com.github.aptpod.proto.iscp2.v1.UpstreamChunk)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.aptpod.proto.iscp2.v1.UpstreamChunk other) {
      if (other == com.github.aptpod.proto.iscp2.v1.UpstreamChunk.getDefaultInstance()) return this;
      if (other.getStreamIdAlias() != 0) {
        setStreamIdAlias(other.getStreamIdAlias());
      }
      if (other.hasStreamChunk()) {
        mergeStreamChunk(other.getStreamChunk());
      }
      if (dataIdsBuilder_ == null) {
        if (!other.dataIds_.isEmpty()) {
          if (dataIds_.isEmpty()) {
            dataIds_ = other.dataIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDataIdsIsMutable();
            dataIds_.addAll(other.dataIds_);
          }
          onChanged();
        }
      } else {
        if (!other.dataIds_.isEmpty()) {
          if (dataIdsBuilder_.isEmpty()) {
            dataIdsBuilder_.dispose();
            dataIdsBuilder_ = null;
            dataIds_ = other.dataIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
            dataIdsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDataIdsFieldBuilder() : null;
          } else {
            dataIdsBuilder_.addAllMessages(other.dataIds_);
          }
        }
      }
      if (other.hasExtensionFields()) {
        mergeExtensionFields(other.getExtensionFields());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              streamIdAlias_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getStreamChunkFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.github.aptpod.proto.iscp2.v1.DataID m =
                  input.readMessage(
                      com.github.aptpod.proto.iscp2.v1.DataID.parser(),
                      extensionRegistry);
              if (dataIdsBuilder_ == null) {
                ensureDataIdsIsMutable();
                dataIds_.add(m);
              } else {
                dataIdsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getExtensionFieldsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int streamIdAlias_ ;
    /**
     * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
     * @return The streamIdAlias.
     */
    @java.lang.Override
    public int getStreamIdAlias() {
      return streamIdAlias_;
    }
    /**
     * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
     * @param value The streamIdAlias to set.
     * @return This builder for chaining.
     */
    public Builder setStreamIdAlias(int value) {

      streamIdAlias_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStreamIdAlias() {
      bitField0_ = (bitField0_ & ~0x00000001);
      streamIdAlias_ = 0;
      onChanged();
      return this;
    }

    private com.github.aptpod.proto.iscp2.v1.StreamChunk streamChunk_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.StreamChunk, com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder, com.github.aptpod.proto.iscp2.v1.StreamChunkOrBuilder> streamChunkBuilder_;
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     * @return Whether the streamChunk field is set.
     */
    public boolean hasStreamChunk() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     * @return The streamChunk.
     */
    public com.github.aptpod.proto.iscp2.v1.StreamChunk getStreamChunk() {
      if (streamChunkBuilder_ == null) {
        return streamChunk_ == null ? com.github.aptpod.proto.iscp2.v1.StreamChunk.getDefaultInstance() : streamChunk_;
      } else {
        return streamChunkBuilder_.getMessage();
      }
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    public Builder setStreamChunk(com.github.aptpod.proto.iscp2.v1.StreamChunk value) {
      if (streamChunkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        streamChunk_ = value;
      } else {
        streamChunkBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    public Builder setStreamChunk(
        com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder builderForValue) {
      if (streamChunkBuilder_ == null) {
        streamChunk_ = builderForValue.build();
      } else {
        streamChunkBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    public Builder mergeStreamChunk(com.github.aptpod.proto.iscp2.v1.StreamChunk value) {
      if (streamChunkBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          streamChunk_ != null &&
          streamChunk_ != com.github.aptpod.proto.iscp2.v1.StreamChunk.getDefaultInstance()) {
          getStreamChunkBuilder().mergeFrom(value);
        } else {
          streamChunk_ = value;
        }
      } else {
        streamChunkBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    public Builder clearStreamChunk() {
      bitField0_ = (bitField0_ & ~0x00000002);
      streamChunk_ = null;
      if (streamChunkBuilder_ != null) {
        streamChunkBuilder_.dispose();
        streamChunkBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder getStreamChunkBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getStreamChunkFieldBuilder().getBuilder();
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.StreamChunkOrBuilder getStreamChunkOrBuilder() {
      if (streamChunkBuilder_ != null) {
        return streamChunkBuilder_.getMessageOrBuilder();
      } else {
        return streamChunk_ == null ?
            com.github.aptpod.proto.iscp2.v1.StreamChunk.getDefaultInstance() : streamChunk_;
      }
    }
    /**
     * <code>.iscp2.v1.StreamChunk stream_chunk = 2 [json_name = "streamChunk"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.StreamChunk, com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder, com.github.aptpod.proto.iscp2.v1.StreamChunkOrBuilder> 
        getStreamChunkFieldBuilder() {
      if (streamChunkBuilder_ == null) {
        streamChunkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.aptpod.proto.iscp2.v1.StreamChunk, com.github.aptpod.proto.iscp2.v1.StreamChunk.Builder, com.github.aptpod.proto.iscp2.v1.StreamChunkOrBuilder>(
                getStreamChunk(),
                getParentForChildren(),
                isClean());
        streamChunk_ = null;
      }
      return streamChunkBuilder_;
    }

    private java.util.List<com.github.aptpod.proto.iscp2.v1.DataID> dataIds_ =
      java.util.Collections.emptyList();
    private void ensureDataIdsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        dataIds_ = new java.util.ArrayList<com.github.aptpod.proto.iscp2.v1.DataID>(dataIds_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.DataID, com.github.aptpod.proto.iscp2.v1.DataID.Builder, com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder> dataIdsBuilder_;

    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public java.util.List<com.github.aptpod.proto.iscp2.v1.DataID> getDataIdsList() {
      if (dataIdsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(dataIds_);
      } else {
        return dataIdsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public int getDataIdsCount() {
      if (dataIdsBuilder_ == null) {
        return dataIds_.size();
      } else {
        return dataIdsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DataID getDataIds(int index) {
      if (dataIdsBuilder_ == null) {
        return dataIds_.get(index);
      } else {
        return dataIdsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder setDataIds(
        int index, com.github.aptpod.proto.iscp2.v1.DataID value) {
      if (dataIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIdsIsMutable();
        dataIds_.set(index, value);
        onChanged();
      } else {
        dataIdsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder setDataIds(
        int index, com.github.aptpod.proto.iscp2.v1.DataID.Builder builderForValue) {
      if (dataIdsBuilder_ == null) {
        ensureDataIdsIsMutable();
        dataIds_.set(index, builderForValue.build());
        onChanged();
      } else {
        dataIdsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder addDataIds(com.github.aptpod.proto.iscp2.v1.DataID value) {
      if (dataIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIdsIsMutable();
        dataIds_.add(value);
        onChanged();
      } else {
        dataIdsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder addDataIds(
        int index, com.github.aptpod.proto.iscp2.v1.DataID value) {
      if (dataIdsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIdsIsMutable();
        dataIds_.add(index, value);
        onChanged();
      } else {
        dataIdsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder addDataIds(
        com.github.aptpod.proto.iscp2.v1.DataID.Builder builderForValue) {
      if (dataIdsBuilder_ == null) {
        ensureDataIdsIsMutable();
        dataIds_.add(builderForValue.build());
        onChanged();
      } else {
        dataIdsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder addDataIds(
        int index, com.github.aptpod.proto.iscp2.v1.DataID.Builder builderForValue) {
      if (dataIdsBuilder_ == null) {
        ensureDataIdsIsMutable();
        dataIds_.add(index, builderForValue.build());
        onChanged();
      } else {
        dataIdsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder addAllDataIds(
        java.lang.Iterable<? extends com.github.aptpod.proto.iscp2.v1.DataID> values) {
      if (dataIdsBuilder_ == null) {
        ensureDataIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dataIds_);
        onChanged();
      } else {
        dataIdsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder clearDataIds() {
      if (dataIdsBuilder_ == null) {
        dataIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        dataIdsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public Builder removeDataIds(int index) {
      if (dataIdsBuilder_ == null) {
        ensureDataIdsIsMutable();
        dataIds_.remove(index);
        onChanged();
      } else {
        dataIdsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DataID.Builder getDataIdsBuilder(
        int index) {
      return getDataIdsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder getDataIdsOrBuilder(
        int index) {
      if (dataIdsBuilder_ == null) {
        return dataIds_.get(index);  } else {
        return dataIdsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public java.util.List<? extends com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder> 
         getDataIdsOrBuilderList() {
      if (dataIdsBuilder_ != null) {
        return dataIdsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(dataIds_);
      }
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DataID.Builder addDataIdsBuilder() {
      return getDataIdsFieldBuilder().addBuilder(
          com.github.aptpod.proto.iscp2.v1.DataID.getDefaultInstance());
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DataID.Builder addDataIdsBuilder(
        int index) {
      return getDataIdsFieldBuilder().addBuilder(
          index, com.github.aptpod.proto.iscp2.v1.DataID.getDefaultInstance());
    }
    /**
     * <code>repeated .iscp2.v1.DataID data_ids = 3 [json_name = "dataIds"];</code>
     */
    public java.util.List<com.github.aptpod.proto.iscp2.v1.DataID.Builder> 
         getDataIdsBuilderList() {
      return getDataIdsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.DataID, com.github.aptpod.proto.iscp2.v1.DataID.Builder, com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder> 
        getDataIdsFieldBuilder() {
      if (dataIdsBuilder_ == null) {
        dataIdsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.aptpod.proto.iscp2.v1.DataID, com.github.aptpod.proto.iscp2.v1.DataID.Builder, com.github.aptpod.proto.iscp2.v1.DataIDOrBuilder>(
                dataIds_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        dataIds_ = null;
      }
      return dataIdsBuilder_;
    }

    private com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields extensionFields_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields, com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.Builder, com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFieldsOrBuilder> extensionFieldsBuilder_;
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     * @return Whether the extensionFields field is set.
     */
    public boolean hasExtensionFields() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     * @return The extensionFields.
     */
    public com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields getExtensionFields() {
      if (extensionFieldsBuilder_ == null) {
        return extensionFields_ == null ? com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.getDefaultInstance() : extensionFields_;
      } else {
        return extensionFieldsBuilder_.getMessage();
      }
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    public Builder setExtensionFields(com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields value) {
      if (extensionFieldsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        extensionFields_ = value;
      } else {
        extensionFieldsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    public Builder setExtensionFields(
        com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.Builder builderForValue) {
      if (extensionFieldsBuilder_ == null) {
        extensionFields_ = builderForValue.build();
      } else {
        extensionFieldsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    public Builder mergeExtensionFields(com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields value) {
      if (extensionFieldsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          extensionFields_ != null &&
          extensionFields_ != com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.getDefaultInstance()) {
          getExtensionFieldsBuilder().mergeFrom(value);
        } else {
          extensionFields_ = value;
        }
      } else {
        extensionFieldsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    public Builder clearExtensionFields() {
      bitField0_ = (bitField0_ & ~0x00000008);
      extensionFields_ = null;
      if (extensionFieldsBuilder_ != null) {
        extensionFieldsBuilder_.dispose();
        extensionFieldsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.Builder getExtensionFieldsBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getExtensionFieldsFieldBuilder().getBuilder();
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFieldsOrBuilder getExtensionFieldsOrBuilder() {
      if (extensionFieldsBuilder_ != null) {
        return extensionFieldsBuilder_.getMessageOrBuilder();
      } else {
        return extensionFields_ == null ?
            com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.getDefaultInstance() : extensionFields_;
      }
    }
    /**
     * <code>.iscp2.v1.extensions.UpstreamChunkExtensionFields extension_fields = 4 [json_name = "extensionFields"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields, com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.Builder, com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFieldsOrBuilder> 
        getExtensionFieldsFieldBuilder() {
      if (extensionFieldsBuilder_ == null) {
        extensionFieldsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields, com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFields.Builder, com.github.aptpod.proto.iscp2.v1.extensions.UpstreamChunkExtensionFieldsOrBuilder>(
                getExtensionFields(),
                getParentForChildren(),
                isClean());
        extensionFields_ = null;
      }
      return extensionFieldsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:iscp2.v1.UpstreamChunk)
  }

  // @@protoc_insertion_point(class_scope:iscp2.v1.UpstreamChunk)
  private static final com.github.aptpod.proto.iscp2.v1.UpstreamChunk DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.aptpod.proto.iscp2.v1.UpstreamChunk();
  }

  public static com.github.aptpod.proto.iscp2.v1.UpstreamChunk getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UpstreamChunk>
      PARSER = new com.google.protobuf.AbstractParser<UpstreamChunk>() {
    @java.lang.Override
    public UpstreamChunk parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<UpstreamChunk> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UpstreamChunk> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.UpstreamChunk getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

