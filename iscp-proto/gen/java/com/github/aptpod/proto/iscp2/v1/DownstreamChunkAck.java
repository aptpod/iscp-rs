// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iscp2/v1/downstream.proto

package com.github.aptpod.proto.iscp2.v1;

/**
 * Protobuf type {@code iscp2.v1.DownstreamChunkAck}
 */
public final class DownstreamChunkAck extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:iscp2.v1.DownstreamChunkAck)
    DownstreamChunkAckOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DownstreamChunkAck.newBuilder() to construct.
  private DownstreamChunkAck(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DownstreamChunkAck() {
    results_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DownstreamChunkAck();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 4:
        return internalGetUpstreamAliases();
      case 5:
        return internalGetDataIdAliases();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.class, com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.Builder.class);
  }

  public static final int STREAM_ID_ALIAS_FIELD_NUMBER = 1;
  private int streamIdAlias_ = 0;
  /**
   * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
   * @return The streamIdAlias.
   */
  @java.lang.Override
  public int getStreamIdAlias() {
    return streamIdAlias_;
  }

  public static final int ACK_ID_FIELD_NUMBER = 2;
  private int ackId_ = 0;
  /**
   * <code>uint32 ack_id = 2 [json_name = "ackId"];</code>
   * @return The ackId.
   */
  @java.lang.Override
  public int getAckId() {
    return ackId_;
  }

  public static final int RESULTS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult> results_;
  /**
   * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
   */
  @java.lang.Override
  public java.util.List<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult> getResultsList() {
    return results_;
  }
  /**
   * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder> 
      getResultsOrBuilderList() {
    return results_;
  }
  /**
   * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
   */
  @java.lang.Override
  public int getResultsCount() {
    return results_.size();
  }
  /**
   * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult getResults(int index) {
    return results_.get(index);
  }
  /**
   * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder getResultsOrBuilder(
      int index) {
    return results_.get(index);
  }

  public static final int UPSTREAM_ALIASES_FIELD_NUMBER = 4;
  private static final class UpstreamAliasesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>newDefaultInstance(
                com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_UpstreamAliasesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.github.aptpod.proto.iscp2.v1.UpstreamInfo.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> upstreamAliases_;
  private com.google.protobuf.MapField<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>
  internalGetUpstreamAliases() {
    if (upstreamAliases_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          UpstreamAliasesDefaultEntryHolder.defaultEntry);
    }
    return upstreamAliases_;
  }
  public int getUpstreamAliasesCount() {
    return internalGetUpstreamAliases().getMap().size();
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
   */
  @java.lang.Override
  public boolean containsUpstreamAliases(
      int key) {

    return internalGetUpstreamAliases().getMap().containsKey(key);
  }
  /**
   * Use {@link #getUpstreamAliasesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> getUpstreamAliases() {
    return getUpstreamAliasesMap();
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> getUpstreamAliasesMap() {
    return internalGetUpstreamAliases().getMap();
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.github.aptpod.proto.iscp2.v1.UpstreamInfo getUpstreamAliasesOrDefault(
      int key,
      /* nullable */
com.github.aptpod.proto.iscp2.v1.UpstreamInfo defaultValue) {

    java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> map =
        internalGetUpstreamAliases().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.UpstreamInfo getUpstreamAliasesOrThrow(
      int key) {

    java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> map =
        internalGetUpstreamAliases().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int DATA_ID_ALIASES_FIELD_NUMBER = 5;
  private static final class DataIdAliasesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>newDefaultInstance(
                com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_DataIdAliasesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.github.aptpod.proto.iscp2.v1.DataID.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> dataIdAliases_;
  private com.google.protobuf.MapField<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>
  internalGetDataIdAliases() {
    if (dataIdAliases_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DataIdAliasesDefaultEntryHolder.defaultEntry);
    }
    return dataIdAliases_;
  }
  public int getDataIdAliasesCount() {
    return internalGetDataIdAliases().getMap().size();
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
   */
  @java.lang.Override
  public boolean containsDataIdAliases(
      int key) {

    return internalGetDataIdAliases().getMap().containsKey(key);
  }
  /**
   * Use {@link #getDataIdAliasesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> getDataIdAliases() {
    return getDataIdAliasesMap();
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> getDataIdAliasesMap() {
    return internalGetDataIdAliases().getMap();
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.github.aptpod.proto.iscp2.v1.DataID getDataIdAliasesOrDefault(
      int key,
      /* nullable */
com.github.aptpod.proto.iscp2.v1.DataID defaultValue) {

    java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> map =
        internalGetDataIdAliases().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.DataID getDataIdAliasesOrThrow(
      int key) {

    java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> map =
        internalGetDataIdAliases().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int EXTENSION_FIELDS_FIELD_NUMBER = 6;
  private com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extensionFields_;
  /**
   * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
   * @return Whether the extensionFields field is set.
   */
  @java.lang.Override
  public boolean hasExtensionFields() {
    return extensionFields_ != null;
  }
  /**
   * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
   * @return The extensionFields.
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields getExtensionFields() {
    return extensionFields_ == null ? com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.getDefaultInstance() : extensionFields_;
  }
  /**
   * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
   */
  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFieldsOrBuilder getExtensionFieldsOrBuilder() {
    return extensionFields_ == null ? com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.getDefaultInstance() : extensionFields_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (streamIdAlias_ != 0) {
      output.writeUInt32(1, streamIdAlias_);
    }
    if (ackId_ != 0) {
      output.writeUInt32(2, ackId_);
    }
    for (int i = 0; i < results_.size(); i++) {
      output.writeMessage(3, results_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetUpstreamAliases(),
        UpstreamAliasesDefaultEntryHolder.defaultEntry,
        4);
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetDataIdAliases(),
        DataIdAliasesDefaultEntryHolder.defaultEntry,
        5);
    if (extensionFields_ != null) {
      output.writeMessage(6, getExtensionFields());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (streamIdAlias_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, streamIdAlias_);
    }
    if (ackId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, ackId_);
    }
    for (int i = 0; i < results_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, results_.get(i));
    }
    for (java.util.Map.Entry<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> entry
         : internalGetUpstreamAliases().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>
      upstreamAliases__ = UpstreamAliasesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, upstreamAliases__);
    }
    for (java.util.Map.Entry<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> entry
         : internalGetDataIdAliases().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>
      dataIdAliases__ = DataIdAliasesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, dataIdAliases__);
    }
    if (extensionFields_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getExtensionFields());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck)) {
      return super.equals(obj);
    }
    com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck other = (com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck) obj;

    if (getStreamIdAlias()
        != other.getStreamIdAlias()) return false;
    if (getAckId()
        != other.getAckId()) return false;
    if (!getResultsList()
        .equals(other.getResultsList())) return false;
    if (!internalGetUpstreamAliases().equals(
        other.internalGetUpstreamAliases())) return false;
    if (!internalGetDataIdAliases().equals(
        other.internalGetDataIdAliases())) return false;
    if (hasExtensionFields() != other.hasExtensionFields()) return false;
    if (hasExtensionFields()) {
      if (!getExtensionFields()
          .equals(other.getExtensionFields())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STREAM_ID_ALIAS_FIELD_NUMBER;
    hash = (53 * hash) + getStreamIdAlias();
    hash = (37 * hash) + ACK_ID_FIELD_NUMBER;
    hash = (53 * hash) + getAckId();
    if (getResultsCount() > 0) {
      hash = (37 * hash) + RESULTS_FIELD_NUMBER;
      hash = (53 * hash) + getResultsList().hashCode();
    }
    if (!internalGetUpstreamAliases().getMap().isEmpty()) {
      hash = (37 * hash) + UPSTREAM_ALIASES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetUpstreamAliases().hashCode();
    }
    if (!internalGetDataIdAliases().getMap().isEmpty()) {
      hash = (37 * hash) + DATA_ID_ALIASES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDataIdAliases().hashCode();
    }
    if (hasExtensionFields()) {
      hash = (37 * hash) + EXTENSION_FIELDS_FIELD_NUMBER;
      hash = (53 * hash) + getExtensionFields().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code iscp2.v1.DownstreamChunkAck}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:iscp2.v1.DownstreamChunkAck)
      com.github.aptpod.proto.iscp2.v1.DownstreamChunkAckOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetUpstreamAliases();
        case 5:
          return internalGetDataIdAliases();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetMutableUpstreamAliases();
        case 5:
          return internalGetMutableDataIdAliases();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.class, com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.Builder.class);
    }

    // Construct using com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      streamIdAlias_ = 0;
      ackId_ = 0;
      if (resultsBuilder_ == null) {
        results_ = java.util.Collections.emptyList();
      } else {
        results_ = null;
        resultsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableUpstreamAliases().clear();
      internalGetMutableDataIdAliases().clear();
      extensionFields_ = null;
      if (extensionFieldsBuilder_ != null) {
        extensionFieldsBuilder_.dispose();
        extensionFieldsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.aptpod.proto.iscp2.v1.DownstreamProto.internal_static_iscp2_v1_DownstreamChunkAck_descriptor;
    }

    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck getDefaultInstanceForType() {
      return com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck build() {
      com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck buildPartial() {
      com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck result = new com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck result) {
      if (resultsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          results_ = java.util.Collections.unmodifiableList(results_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.results_ = results_;
      } else {
        result.results_ = resultsBuilder_.build();
      }
    }

    private void buildPartial0(com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.streamIdAlias_ = streamIdAlias_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.ackId_ = ackId_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.upstreamAliases_ = internalGetUpstreamAliases();
        result.upstreamAliases_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.dataIdAliases_ = internalGetDataIdAliases();
        result.dataIdAliases_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.extensionFields_ = extensionFieldsBuilder_ == null
            ? extensionFields_
            : extensionFieldsBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck) {
        return mergeFrom((com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck other) {
      if (other == com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck.getDefaultInstance()) return this;
      if (other.getStreamIdAlias() != 0) {
        setStreamIdAlias(other.getStreamIdAlias());
      }
      if (other.getAckId() != 0) {
        setAckId(other.getAckId());
      }
      if (resultsBuilder_ == null) {
        if (!other.results_.isEmpty()) {
          if (results_.isEmpty()) {
            results_ = other.results_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureResultsIsMutable();
            results_.addAll(other.results_);
          }
          onChanged();
        }
      } else {
        if (!other.results_.isEmpty()) {
          if (resultsBuilder_.isEmpty()) {
            resultsBuilder_.dispose();
            resultsBuilder_ = null;
            results_ = other.results_;
            bitField0_ = (bitField0_ & ~0x00000004);
            resultsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getResultsFieldBuilder() : null;
          } else {
            resultsBuilder_.addAllMessages(other.results_);
          }
        }
      }
      internalGetMutableUpstreamAliases().mergeFrom(
          other.internalGetUpstreamAliases());
      bitField0_ |= 0x00000008;
      internalGetMutableDataIdAliases().mergeFrom(
          other.internalGetDataIdAliases());
      bitField0_ |= 0x00000010;
      if (other.hasExtensionFields()) {
        mergeExtensionFields(other.getExtensionFields());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              streamIdAlias_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              ackId_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult m =
                  input.readMessage(
                      com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.parser(),
                      extensionRegistry);
              if (resultsBuilder_ == null) {
                ensureResultsIsMutable();
                results_.add(m);
              } else {
                resultsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              com.google.protobuf.MapEntry<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>
              upstreamAliases__ = input.readMessage(
                  UpstreamAliasesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableUpstreamAliases().getMutableMap().put(
                  upstreamAliases__.getKey(), upstreamAliases__.getValue());
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              com.google.protobuf.MapEntry<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>
              dataIdAliases__ = input.readMessage(
                  DataIdAliasesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableDataIdAliases().getMutableMap().put(
                  dataIdAliases__.getKey(), dataIdAliases__.getValue());
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getExtensionFieldsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int streamIdAlias_ ;
    /**
     * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
     * @return The streamIdAlias.
     */
    @java.lang.Override
    public int getStreamIdAlias() {
      return streamIdAlias_;
    }
    /**
     * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
     * @param value The streamIdAlias to set.
     * @return This builder for chaining.
     */
    public Builder setStreamIdAlias(int value) {

      streamIdAlias_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 stream_id_alias = 1 [json_name = "streamIdAlias"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStreamIdAlias() {
      bitField0_ = (bitField0_ & ~0x00000001);
      streamIdAlias_ = 0;
      onChanged();
      return this;
    }

    private int ackId_ ;
    /**
     * <code>uint32 ack_id = 2 [json_name = "ackId"];</code>
     * @return The ackId.
     */
    @java.lang.Override
    public int getAckId() {
      return ackId_;
    }
    /**
     * <code>uint32 ack_id = 2 [json_name = "ackId"];</code>
     * @param value The ackId to set.
     * @return This builder for chaining.
     */
    public Builder setAckId(int value) {

      ackId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 ack_id = 2 [json_name = "ackId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAckId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      ackId_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult> results_ =
      java.util.Collections.emptyList();
    private void ensureResultsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        results_ = new java.util.ArrayList<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult>(results_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder> resultsBuilder_;

    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public java.util.List<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult> getResultsList() {
      if (resultsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(results_);
      } else {
        return resultsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public int getResultsCount() {
      if (resultsBuilder_ == null) {
        return results_.size();
      } else {
        return resultsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult getResults(int index) {
      if (resultsBuilder_ == null) {
        return results_.get(index);
      } else {
        return resultsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder setResults(
        int index, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.set(index, value);
        onChanged();
      } else {
        resultsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder setResults(
        int index, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.set(index, builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder addResults(com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.add(value);
        onChanged();
      } else {
        resultsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder addResults(
        int index, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult value) {
      if (resultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResultsIsMutable();
        results_.add(index, value);
        onChanged();
      } else {
        resultsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder addResults(
        com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.add(builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder addResults(
        int index, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder builderForValue) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.add(index, builderForValue.build());
        onChanged();
      } else {
        resultsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder addAllResults(
        java.lang.Iterable<? extends com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult> values) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, results_);
        onChanged();
      } else {
        resultsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder clearResults() {
      if (resultsBuilder_ == null) {
        results_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        resultsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public Builder removeResults(int index) {
      if (resultsBuilder_ == null) {
        ensureResultsIsMutable();
        results_.remove(index);
        onChanged();
      } else {
        resultsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder getResultsBuilder(
        int index) {
      return getResultsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder getResultsOrBuilder(
        int index) {
      if (resultsBuilder_ == null) {
        return results_.get(index);  } else {
        return resultsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public java.util.List<? extends com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder> 
         getResultsOrBuilderList() {
      if (resultsBuilder_ != null) {
        return resultsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(results_);
      }
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder addResultsBuilder() {
      return getResultsFieldBuilder().addBuilder(
          com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.getDefaultInstance());
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder addResultsBuilder(
        int index) {
      return getResultsFieldBuilder().addBuilder(
          index, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.getDefaultInstance());
    }
    /**
     * <code>repeated .iscp2.v1.DownstreamChunkResult results = 3 [json_name = "results"];</code>
     */
    public java.util.List<com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder> 
         getResultsBuilderList() {
      return getResultsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder> 
        getResultsFieldBuilder() {
      if (resultsBuilder_ == null) {
        resultsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResult.Builder, com.github.aptpod.proto.iscp2.v1.DownstreamChunkResultOrBuilder>(
                results_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        results_ = null;
      }
      return resultsBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> upstreamAliases_;
    private com.google.protobuf.MapField<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>
        internalGetUpstreamAliases() {
      if (upstreamAliases_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            UpstreamAliasesDefaultEntryHolder.defaultEntry);
      }
      return upstreamAliases_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>
        internalGetMutableUpstreamAliases() {
      if (upstreamAliases_ == null) {
        upstreamAliases_ = com.google.protobuf.MapField.newMapField(
            UpstreamAliasesDefaultEntryHolder.defaultEntry);
      }
      if (!upstreamAliases_.isMutable()) {
        upstreamAliases_ = upstreamAliases_.copy();
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return upstreamAliases_;
    }
    public int getUpstreamAliasesCount() {
      return internalGetUpstreamAliases().getMap().size();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    @java.lang.Override
    public boolean containsUpstreamAliases(
        int key) {

      return internalGetUpstreamAliases().getMap().containsKey(key);
    }
    /**
     * Use {@link #getUpstreamAliasesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> getUpstreamAliases() {
      return getUpstreamAliasesMap();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> getUpstreamAliasesMap() {
      return internalGetUpstreamAliases().getMap();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.github.aptpod.proto.iscp2.v1.UpstreamInfo getUpstreamAliasesOrDefault(
        int key,
        /* nullable */
com.github.aptpod.proto.iscp2.v1.UpstreamInfo defaultValue) {

      java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> map =
          internalGetUpstreamAliases().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.UpstreamInfo getUpstreamAliasesOrThrow(
        int key) {

      java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> map =
          internalGetUpstreamAliases().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearUpstreamAliases() {
      bitField0_ = (bitField0_ & ~0x00000008);
      internalGetMutableUpstreamAliases().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    public Builder removeUpstreamAliases(
        int key) {

      internalGetMutableUpstreamAliases().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo>
        getMutableUpstreamAliases() {
      bitField0_ |= 0x00000008;
      return internalGetMutableUpstreamAliases().getMutableMap();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    public Builder putUpstreamAliases(
        int key,
        com.github.aptpod.proto.iscp2.v1.UpstreamInfo value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableUpstreamAliases().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000008;
      return this;
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.UpstreamInfo&gt; upstream_aliases = 4 [json_name = "upstreamAliases"];</code>
     */
    public Builder putAllUpstreamAliases(
        java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.UpstreamInfo> values) {
      internalGetMutableUpstreamAliases().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000008;
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> dataIdAliases_;
    private com.google.protobuf.MapField<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>
        internalGetDataIdAliases() {
      if (dataIdAliases_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DataIdAliasesDefaultEntryHolder.defaultEntry);
      }
      return dataIdAliases_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>
        internalGetMutableDataIdAliases() {
      if (dataIdAliases_ == null) {
        dataIdAliases_ = com.google.protobuf.MapField.newMapField(
            DataIdAliasesDefaultEntryHolder.defaultEntry);
      }
      if (!dataIdAliases_.isMutable()) {
        dataIdAliases_ = dataIdAliases_.copy();
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return dataIdAliases_;
    }
    public int getDataIdAliasesCount() {
      return internalGetDataIdAliases().getMap().size();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    @java.lang.Override
    public boolean containsDataIdAliases(
        int key) {

      return internalGetDataIdAliases().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDataIdAliasesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> getDataIdAliases() {
      return getDataIdAliasesMap();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> getDataIdAliasesMap() {
      return internalGetDataIdAliases().getMap();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.github.aptpod.proto.iscp2.v1.DataID getDataIdAliasesOrDefault(
        int key,
        /* nullable */
com.github.aptpod.proto.iscp2.v1.DataID defaultValue) {

      java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> map =
          internalGetDataIdAliases().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    @java.lang.Override
    public com.github.aptpod.proto.iscp2.v1.DataID getDataIdAliasesOrThrow(
        int key) {

      java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> map =
          internalGetDataIdAliases().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearDataIdAliases() {
      bitField0_ = (bitField0_ & ~0x00000010);
      internalGetMutableDataIdAliases().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    public Builder removeDataIdAliases(
        int key) {

      internalGetMutableDataIdAliases().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID>
        getMutableDataIdAliases() {
      bitField0_ |= 0x00000010;
      return internalGetMutableDataIdAliases().getMutableMap();
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    public Builder putDataIdAliases(
        int key,
        com.github.aptpod.proto.iscp2.v1.DataID value) {

      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableDataIdAliases().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>map&lt;uint32, .iscp2.v1.DataID&gt; data_id_aliases = 5 [json_name = "dataIdAliases"];</code>
     */
    public Builder putAllDataIdAliases(
        java.util.Map<java.lang.Integer, com.github.aptpod.proto.iscp2.v1.DataID> values) {
      internalGetMutableDataIdAliases().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000010;
      return this;
    }

    private com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extensionFields_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields, com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.Builder, com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFieldsOrBuilder> extensionFieldsBuilder_;
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     * @return Whether the extensionFields field is set.
     */
    public boolean hasExtensionFields() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     * @return The extensionFields.
     */
    public com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields getExtensionFields() {
      if (extensionFieldsBuilder_ == null) {
        return extensionFields_ == null ? com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.getDefaultInstance() : extensionFields_;
      } else {
        return extensionFieldsBuilder_.getMessage();
      }
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    public Builder setExtensionFields(com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields value) {
      if (extensionFieldsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        extensionFields_ = value;
      } else {
        extensionFieldsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    public Builder setExtensionFields(
        com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.Builder builderForValue) {
      if (extensionFieldsBuilder_ == null) {
        extensionFields_ = builderForValue.build();
      } else {
        extensionFieldsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    public Builder mergeExtensionFields(com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields value) {
      if (extensionFieldsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          extensionFields_ != null &&
          extensionFields_ != com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.getDefaultInstance()) {
          getExtensionFieldsBuilder().mergeFrom(value);
        } else {
          extensionFields_ = value;
        }
      } else {
        extensionFieldsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    public Builder clearExtensionFields() {
      bitField0_ = (bitField0_ & ~0x00000020);
      extensionFields_ = null;
      if (extensionFieldsBuilder_ != null) {
        extensionFieldsBuilder_.dispose();
        extensionFieldsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.Builder getExtensionFieldsBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getExtensionFieldsFieldBuilder().getBuilder();
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    public com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFieldsOrBuilder getExtensionFieldsOrBuilder() {
      if (extensionFieldsBuilder_ != null) {
        return extensionFieldsBuilder_.getMessageOrBuilder();
      } else {
        return extensionFields_ == null ?
            com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.getDefaultInstance() : extensionFields_;
      }
    }
    /**
     * <code>.iscp2.v1.extensions.DownstreamChunkAckExtensionFields extension_fields = 6 [json_name = "extensionFields"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields, com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.Builder, com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFieldsOrBuilder> 
        getExtensionFieldsFieldBuilder() {
      if (extensionFieldsBuilder_ == null) {
        extensionFieldsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields, com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFields.Builder, com.github.aptpod.proto.iscp2.v1.extensions.DownstreamChunkAckExtensionFieldsOrBuilder>(
                getExtensionFields(),
                getParentForChildren(),
                isClean());
        extensionFields_ = null;
      }
      return extensionFieldsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:iscp2.v1.DownstreamChunkAck)
  }

  // @@protoc_insertion_point(class_scope:iscp2.v1.DownstreamChunkAck)
  private static final com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck();
  }

  public static com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DownstreamChunkAck>
      PARSER = new com.google.protobuf.AbstractParser<DownstreamChunkAck>() {
    @java.lang.Override
    public DownstreamChunkAck parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DownstreamChunkAck> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DownstreamChunkAck> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.aptpod.proto.iscp2.v1.DownstreamChunkAck getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

