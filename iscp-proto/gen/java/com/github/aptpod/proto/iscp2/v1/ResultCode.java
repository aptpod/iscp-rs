// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iscp2/v1/result_code.proto

package com.github.aptpod.proto.iscp2.v1;

/**
 * Protobuf enum {@code iscp2.v1.ResultCode}
 */
public enum ResultCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SUCCEEDED = 0;</code>
   */
  SUCCEEDED(0, 0),
  /**
   * <code>INCOMPATIBLE_VERSION = 1;</code>
   */
  INCOMPATIBLE_VERSION(2, 1),
  /**
   * <code>MAXIMUM_DATA_ID_ALIAS = 2;</code>
   */
  MAXIMUM_DATA_ID_ALIAS(3, 2),
  /**
   * <code>MAXIMUM_UPSTREAM_ALIAS = 3;</code>
   */
  MAXIMUM_UPSTREAM_ALIAS(4, 3),
  /**
   * <code>UNSPECIFIED_ERROR = 64;</code>
   */
  UNSPECIFIED_ERROR(5, 64),
  /**
   * <code>NO_NODE_ID = 65;</code>
   */
  NO_NODE_ID(6, 65),
  /**
   * <code>AUTH_FAILED = 66;</code>
   */
  AUTH_FAILED(7, 66),
  /**
   * <code>CONNECT_TIMEOUT = 67;</code>
   */
  CONNECT_TIMEOUT(8, 67),
  /**
   * <code>MALFORMED_MESSAGE = 68;</code>
   */
  MALFORMED_MESSAGE(9, 68),
  /**
   * <code>PROTOCOL_ERROR = 69;</code>
   */
  PROTOCOL_ERROR(10, 69),
  /**
   * <code>ACK_TIMEOUT = 70;</code>
   */
  ACK_TIMEOUT(11, 70),
  /**
   * <code>INVALID_PAYLOAD = 71;</code>
   */
  INVALID_PAYLOAD(12, 71),
  /**
   * <code>INVALID_DATA_ID = 72;</code>
   */
  INVALID_DATA_ID(13, 72),
  /**
   * <code>INVALID_DATA_ID_ALIAS = 73;</code>
   */
  INVALID_DATA_ID_ALIAS(14, 73),
  /**
   * <code>INVALID_DATA_FILTER = 74;</code>
   */
  INVALID_DATA_FILTER(15, 74),
  /**
   * <code>STREAM_NOT_FOUND = 75;</code>
   */
  STREAM_NOT_FOUND(16, 75),
  /**
   * <code>RESUME_REQUEST_CONFLICT = 76;</code>
   */
  RESUME_REQUEST_CONFLICT(17, 76),
  /**
   * <code>PROCESS_FAILED = 77;</code>
   */
  PROCESS_FAILED(18, 77),
  /**
   * <code>DESIRED_QOS_NOT_SUPPORTED = 78;</code>
   */
  DESIRED_QOS_NOT_SUPPORTED(19, 78),
  /**
   * <code>PING_TIMEOUT = 79;</code>
   */
  PING_TIMEOUT(20, 79),
  /**
   * <code>TOO_LARGE_MESSAGE_SIZE = 80;</code>
   */
  TOO_LARGE_MESSAGE_SIZE(21, 80),
  /**
   * <code>TOO_MANY_DATA_ID_ALIASES = 81;</code>
   */
  TOO_MANY_DATA_ID_ALIASES(22, 81),
  /**
   * <code>TOO_MANY_STREAMS = 82;</code>
   */
  TOO_MANY_STREAMS(23, 82),
  /**
   * <code>TOO_LONG_ACK_INTERVAL = 83;</code>
   */
  TOO_LONG_ACK_INTERVAL(24, 83),
  /**
   * <code>TOO_MANY_DOWNSTREAM_FILTERS = 84;</code>
   */
  TOO_MANY_DOWNSTREAM_FILTERS(25, 84),
  /**
   * <code>TOO_MANY_DATA_FILTERS = 85;</code>
   */
  TOO_MANY_DATA_FILTERS(26, 85),
  /**
   * <code>TOO_LONG_EXPIRY_INTERVAL = 86;</code>
   */
  TOO_LONG_EXPIRY_INTERVAL(27, 86),
  /**
   * <code>TOO_LONG_PING_TIMEOUT = 87;</code>
   */
  TOO_LONG_PING_TIMEOUT(28, 87),
  /**
   * <code>TOO_SHORT_PING_INTERVAL = 88;</code>
   */
  TOO_SHORT_PING_INTERVAL(29, 88),
  /**
   * <code>TOO_SHORT_PING_TIMEOUT = 89;</code>
   */
  TOO_SHORT_PING_TIMEOUT(30, 89),
  /**
   * <code>RATE_LIMIT_REACHED = 90;</code>
   */
  RATE_LIMIT_REACHED(31, 90),
  /**
   * <code>NODE_ID_MISMATCH = 128;</code>
   */
  NODE_ID_MISMATCH(32, 128),
  /**
   * <code>SESSION_NOT_FOUND = 129;</code>
   */
  SESSION_NOT_FOUND(33, 129),
  /**
   * <code>SESSION_ALREADY_CLOSED = 130;</code>
   */
  SESSION_ALREADY_CLOSED(34, 130),
  /**
   * <code>SESSION_CANNOT_CLOSED = 131;</code>
   */
  SESSION_CANNOT_CLOSED(35, 131),
  UNRECOGNIZED(-1, -1),
  ;

  /**
   * <code>NORMAL_CLOSURE = 0;</code>
   */
  public static final ResultCode NORMAL_CLOSURE = SUCCEEDED;
  /**
   * <code>SUCCEEDED = 0;</code>
   */
  public static final int SUCCEEDED_VALUE = 0;
  /**
   * <code>NORMAL_CLOSURE = 0;</code>
   */
  public static final int NORMAL_CLOSURE_VALUE = 0;
  /**
   * <code>INCOMPATIBLE_VERSION = 1;</code>
   */
  public static final int INCOMPATIBLE_VERSION_VALUE = 1;
  /**
   * <code>MAXIMUM_DATA_ID_ALIAS = 2;</code>
   */
  public static final int MAXIMUM_DATA_ID_ALIAS_VALUE = 2;
  /**
   * <code>MAXIMUM_UPSTREAM_ALIAS = 3;</code>
   */
  public static final int MAXIMUM_UPSTREAM_ALIAS_VALUE = 3;
  /**
   * <code>UNSPECIFIED_ERROR = 64;</code>
   */
  public static final int UNSPECIFIED_ERROR_VALUE = 64;
  /**
   * <code>NO_NODE_ID = 65;</code>
   */
  public static final int NO_NODE_ID_VALUE = 65;
  /**
   * <code>AUTH_FAILED = 66;</code>
   */
  public static final int AUTH_FAILED_VALUE = 66;
  /**
   * <code>CONNECT_TIMEOUT = 67;</code>
   */
  public static final int CONNECT_TIMEOUT_VALUE = 67;
  /**
   * <code>MALFORMED_MESSAGE = 68;</code>
   */
  public static final int MALFORMED_MESSAGE_VALUE = 68;
  /**
   * <code>PROTOCOL_ERROR = 69;</code>
   */
  public static final int PROTOCOL_ERROR_VALUE = 69;
  /**
   * <code>ACK_TIMEOUT = 70;</code>
   */
  public static final int ACK_TIMEOUT_VALUE = 70;
  /**
   * <code>INVALID_PAYLOAD = 71;</code>
   */
  public static final int INVALID_PAYLOAD_VALUE = 71;
  /**
   * <code>INVALID_DATA_ID = 72;</code>
   */
  public static final int INVALID_DATA_ID_VALUE = 72;
  /**
   * <code>INVALID_DATA_ID_ALIAS = 73;</code>
   */
  public static final int INVALID_DATA_ID_ALIAS_VALUE = 73;
  /**
   * <code>INVALID_DATA_FILTER = 74;</code>
   */
  public static final int INVALID_DATA_FILTER_VALUE = 74;
  /**
   * <code>STREAM_NOT_FOUND = 75;</code>
   */
  public static final int STREAM_NOT_FOUND_VALUE = 75;
  /**
   * <code>RESUME_REQUEST_CONFLICT = 76;</code>
   */
  public static final int RESUME_REQUEST_CONFLICT_VALUE = 76;
  /**
   * <code>PROCESS_FAILED = 77;</code>
   */
  public static final int PROCESS_FAILED_VALUE = 77;
  /**
   * <code>DESIRED_QOS_NOT_SUPPORTED = 78;</code>
   */
  public static final int DESIRED_QOS_NOT_SUPPORTED_VALUE = 78;
  /**
   * <code>PING_TIMEOUT = 79;</code>
   */
  public static final int PING_TIMEOUT_VALUE = 79;
  /**
   * <code>TOO_LARGE_MESSAGE_SIZE = 80;</code>
   */
  public static final int TOO_LARGE_MESSAGE_SIZE_VALUE = 80;
  /**
   * <code>TOO_MANY_DATA_ID_ALIASES = 81;</code>
   */
  public static final int TOO_MANY_DATA_ID_ALIASES_VALUE = 81;
  /**
   * <code>TOO_MANY_STREAMS = 82;</code>
   */
  public static final int TOO_MANY_STREAMS_VALUE = 82;
  /**
   * <code>TOO_LONG_ACK_INTERVAL = 83;</code>
   */
  public static final int TOO_LONG_ACK_INTERVAL_VALUE = 83;
  /**
   * <code>TOO_MANY_DOWNSTREAM_FILTERS = 84;</code>
   */
  public static final int TOO_MANY_DOWNSTREAM_FILTERS_VALUE = 84;
  /**
   * <code>TOO_MANY_DATA_FILTERS = 85;</code>
   */
  public static final int TOO_MANY_DATA_FILTERS_VALUE = 85;
  /**
   * <code>TOO_LONG_EXPIRY_INTERVAL = 86;</code>
   */
  public static final int TOO_LONG_EXPIRY_INTERVAL_VALUE = 86;
  /**
   * <code>TOO_LONG_PING_TIMEOUT = 87;</code>
   */
  public static final int TOO_LONG_PING_TIMEOUT_VALUE = 87;
  /**
   * <code>TOO_SHORT_PING_INTERVAL = 88;</code>
   */
  public static final int TOO_SHORT_PING_INTERVAL_VALUE = 88;
  /**
   * <code>TOO_SHORT_PING_TIMEOUT = 89;</code>
   */
  public static final int TOO_SHORT_PING_TIMEOUT_VALUE = 89;
  /**
   * <code>RATE_LIMIT_REACHED = 90;</code>
   */
  public static final int RATE_LIMIT_REACHED_VALUE = 90;
  /**
   * <code>NODE_ID_MISMATCH = 128;</code>
   */
  public static final int NODE_ID_MISMATCH_VALUE = 128;
  /**
   * <code>SESSION_NOT_FOUND = 129;</code>
   */
  public static final int SESSION_NOT_FOUND_VALUE = 129;
  /**
   * <code>SESSION_ALREADY_CLOSED = 130;</code>
   */
  public static final int SESSION_ALREADY_CLOSED_VALUE = 130;
  /**
   * <code>SESSION_CANNOT_CLOSED = 131;</code>
   */
  public static final int SESSION_CANNOT_CLOSED_VALUE = 131;


  public final int getNumber() {
    if (index == -1) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ResultCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ResultCode forNumber(int value) {
    switch (value) {
      case 0: return SUCCEEDED;
      case 1: return INCOMPATIBLE_VERSION;
      case 2: return MAXIMUM_DATA_ID_ALIAS;
      case 3: return MAXIMUM_UPSTREAM_ALIAS;
      case 64: return UNSPECIFIED_ERROR;
      case 65: return NO_NODE_ID;
      case 66: return AUTH_FAILED;
      case 67: return CONNECT_TIMEOUT;
      case 68: return MALFORMED_MESSAGE;
      case 69: return PROTOCOL_ERROR;
      case 70: return ACK_TIMEOUT;
      case 71: return INVALID_PAYLOAD;
      case 72: return INVALID_DATA_ID;
      case 73: return INVALID_DATA_ID_ALIAS;
      case 74: return INVALID_DATA_FILTER;
      case 75: return STREAM_NOT_FOUND;
      case 76: return RESUME_REQUEST_CONFLICT;
      case 77: return PROCESS_FAILED;
      case 78: return DESIRED_QOS_NOT_SUPPORTED;
      case 79: return PING_TIMEOUT;
      case 80: return TOO_LARGE_MESSAGE_SIZE;
      case 81: return TOO_MANY_DATA_ID_ALIASES;
      case 82: return TOO_MANY_STREAMS;
      case 83: return TOO_LONG_ACK_INTERVAL;
      case 84: return TOO_MANY_DOWNSTREAM_FILTERS;
      case 85: return TOO_MANY_DATA_FILTERS;
      case 86: return TOO_LONG_EXPIRY_INTERVAL;
      case 87: return TOO_LONG_PING_TIMEOUT;
      case 88: return TOO_SHORT_PING_INTERVAL;
      case 89: return TOO_SHORT_PING_TIMEOUT;
      case 90: return RATE_LIMIT_REACHED;
      case 128: return NODE_ID_MISMATCH;
      case 129: return SESSION_NOT_FOUND;
      case 130: return SESSION_ALREADY_CLOSED;
      case 131: return SESSION_CANNOT_CLOSED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ResultCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ResultCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ResultCode>() {
          public ResultCode findValueByNumber(int number) {
            return ResultCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (index == -1) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.github.aptpod.proto.iscp2.v1.ResultCodeProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ResultCode[] VALUES = getStaticValuesArray();
  private static ResultCode[] getStaticValuesArray() {
    return new ResultCode[] {
    SUCCEEDED, NORMAL_CLOSURE, INCOMPATIBLE_VERSION, MAXIMUM_DATA_ID_ALIAS, MAXIMUM_UPSTREAM_ALIAS, UNSPECIFIED_ERROR, NO_NODE_ID, AUTH_FAILED, CONNECT_TIMEOUT, MALFORMED_MESSAGE, PROTOCOL_ERROR, ACK_TIMEOUT, INVALID_PAYLOAD, INVALID_DATA_ID, INVALID_DATA_ID_ALIAS, INVALID_DATA_FILTER, STREAM_NOT_FOUND, RESUME_REQUEST_CONFLICT, PROCESS_FAILED, DESIRED_QOS_NOT_SUPPORTED, PING_TIMEOUT, TOO_LARGE_MESSAGE_SIZE, TOO_MANY_DATA_ID_ALIASES, TOO_MANY_STREAMS, TOO_LONG_ACK_INTERVAL, TOO_MANY_DOWNSTREAM_FILTERS, TOO_MANY_DATA_FILTERS, TOO_LONG_EXPIRY_INTERVAL, TOO_LONG_PING_TIMEOUT, TOO_SHORT_PING_INTERVAL, TOO_SHORT_PING_TIMEOUT, RATE_LIMIT_REACHED, NODE_ID_MISMATCH, SESSION_NOT_FOUND, SESSION_ALREADY_CLOSED, SESSION_CANNOT_CLOSED, 
    };
  }
  public static ResultCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private ResultCode(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:iscp2.v1.ResultCode)
}

